{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Active Edge Overview \u00b6 Intel\u00ae vPro\u2122 Platforms offer hardware-enhanced security features and remote manageability, also known as out-of-band manageability, using Intel\u00ae Active Management Technology (Intel\u00ae AMT). With Intel\u00ae AMT, administrators remotely manage, repair, and update network assets, such as systems and edge devices. In the event that a network asset is powered off or the operating system is unavailable, administrators can power on the asset. Active Edge provides open-source, modular microservices and libraries for integration of hardware provisioning, out-of-band manageability, and other Intel\u00ae AMT features with both new and existing management consoles, software solutions, and more. As an open source implementation, Active Edge makes it easier for IT departments and ISVs to adopt, integrate, and customize out-of-band management solutions for Intel\u00ae vPro\u2122 Platforms. Read more about Intel\u00ae AMT features and capabilities here . Goals \u00b6 The Active Edge guides provides instructions to: Deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) on the development system. Build and run Remote Provisioning client (RPC) on the managed device. Connect the managed device (edge device) Additional sections provide guidance on the reference implementation UI Toolkit, REST API usage, asset security, and more. Figure 1: Active Edge High-level Architecture As shown in Figure 1, Active Edge high-level architecture consists of four components: MPS - A microservice that utilizes an Intel vPro\u00ae feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or KVM control. RPS - A microservice that activates Intel\u00ae AMT-based platforms using pre-defined profiles and connects them to the MPS for manageability use cases. RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT. UI Toolkit - A Toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the Keyboard, Video, Mouse (KVM), to a console. Active Edge Setup \u00b6 Build and Deploy Microservices Locally \u00b6 If unfamiliar with Docker, choose this setup option to accomplish a manual, local installation of microservices. Get Started with Local Microservices Estimated completion time: Approximately 15 minutes Build and Deploy Microservices with Local Docker* Images \u00b6 If familiar with Docker, choose this setup option to install microservices as local Docker images. This option is an especially good choice for development systems with Docker already installed. Get Started with Microservices as Docker Images Estimated completion time: Approximately 15 minutes Both build-and-deploy options install microservices locally on a development system. The client application is installed on a managed device. Experienced Docker users may choose to deploy microservices straight to the cloud . Additional Intel\u00ae AMT Resources \u00b6 For additional information about Intel\u00ae AMT, see the following links: Intel\u00ae vPro Overview Video Link Detailed Setup document","title":"Home"},{"location":"#active-edge-overview","text":"Intel\u00ae vPro\u2122 Platforms offer hardware-enhanced security features and remote manageability, also known as out-of-band manageability, using Intel\u00ae Active Management Technology (Intel\u00ae AMT). With Intel\u00ae AMT, administrators remotely manage, repair, and update network assets, such as systems and edge devices. In the event that a network asset is powered off or the operating system is unavailable, administrators can power on the asset. Active Edge provides open-source, modular microservices and libraries for integration of hardware provisioning, out-of-band manageability, and other Intel\u00ae AMT features with both new and existing management consoles, software solutions, and more. As an open source implementation, Active Edge makes it easier for IT departments and ISVs to adopt, integrate, and customize out-of-band management solutions for Intel\u00ae vPro\u2122 Platforms. Read more about Intel\u00ae AMT features and capabilities here .","title":"Active Edge Overview"},{"location":"#goals","text":"The Active Edge guides provides instructions to: Deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) on the development system. Build and run Remote Provisioning client (RPC) on the managed device. Connect the managed device (edge device) Additional sections provide guidance on the reference implementation UI Toolkit, REST API usage, asset security, and more. Figure 1: Active Edge High-level Architecture As shown in Figure 1, Active Edge high-level architecture consists of four components: MPS - A microservice that utilizes an Intel vPro\u00ae feature, Client Initiated Remote Access (CIRA), for enabling edge, cloud devices to maintain a persistent connection for out-of-band manageability features, such as power control or KVM control. RPS - A microservice that activates Intel\u00ae AMT-based platforms using pre-defined profiles and connects them to the MPS for manageability use cases. RPC - A lightweight client application that communicates with the RPS server to activate Intel\u00ae AMT. UI Toolkit - A Toolkit that includes prebuilt React components and a reference implementation web console. The React-based snippets simplify the task of adding complex manageability-related UI controls, such as the Keyboard, Video, Mouse (KVM), to a console.","title":"Goals"},{"location":"#active-edge-setup","text":"","title":"Active Edge Setup"},{"location":"#build-and-deploy-microservices-locally","text":"If unfamiliar with Docker, choose this setup option to accomplish a manual, local installation of microservices. Get Started with Local Microservices Estimated completion time: Approximately 15 minutes","title":"Build and Deploy Microservices Locally"},{"location":"#build-and-deploy-microservices-with-local-docker-images","text":"If familiar with Docker, choose this setup option to install microservices as local Docker images. This option is an especially good choice for development systems with Docker already installed. Get Started with Microservices as Docker Images Estimated completion time: Approximately 15 minutes Both build-and-deploy options install microservices locally on a development system. The client application is installed on a managed device. Experienced Docker users may choose to deploy microservices straight to the cloud .","title":"Build and Deploy Microservices with Local Docker* Images"},{"location":"#additional-intel-amt-resources","text":"For additional information about Intel\u00ae AMT, see the following links: Intel\u00ae vPro Overview Video Link Detailed Setup document","title":"Additional Intel\u00ae AMT Resources"},{"location":"Glossary/","text":"Glossary \u00b6 A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z A \u00b6 Active Edge: An open source software architecture consisting of modular microservices and libraries for integration of out-of-band manageability into exisiting network infrastructures. The software enables network administrators and ISVs to explore key Intel\u00ae Active Management Technology (Intel\u00ae AMT). admin control mode (ACM): A mode of provisioning Intel\u00ae AMT that requires a purchased provisioning certificate from a Certificate Authority (CA), the creation of a domain, and the creation of a profile in the Remote Provisioning Server (RPS) application. ACM achieves a higher level of trust than client control mode (CCM). See CCM and provisioning. ACM Activation : The act of loading a purchased certificate and associating it with an Active Edge profile. allowlist : A list permiting access to a privilege, service, network, etc. B \u00b6 C \u00b6 certificate (provisioning): A digitally signed document used in the provisioning of an edge device featuring Intel\u00ae AMT. The Intel\u00ae AMT firmware is pre-loaded with Transport Layer Security (TLS) certificate thumbprints of different certificate vendors. A digital certificate binds the identity of the certificate holder to vendor-specific thumbprints. To provision an edge device, users must purchase a certificate from an approved vendor. Client Initiated Remote Access (CIRA): An out-of-band (OOB) management communication protocol that network clients can use to initiate a secure connection with a server. CIRA Config Control: Client Control Mode (CCM) : An alternative to ACM provisioning mode that does not require a purchased certificate. Use this mode to setup Active Edge software features quickly. Container (Docker*): The instantiation, or running instance, of a Docker image. D \u00b6 development system: The system on which Management Presence Server (MPS) and Remote Provision Server (RPS) are installed. Docker*: A platform that employs the idea of containerization, isolating a unit of software, such as an application, from its environment. Containerization creates applications as lightweight, discrete processes that can be deployed to the cloud as services. See Docker overview for more information. domain suffix: The top-level portion (end) of a domain name (i.e., com, net, org). E \u00b6 Edge Devices : A device that serves as an entry point into an enterprise or service provider network. Edge devices include those related to banking, retail, hospitality, point-of-sale, etc. Globally Unique Identifier (GUID): A 128-bit integer used to identify a system resource. I \u00b6 Intel\u00ae Active Management Technology (Intel\u00ae AMT): A technology that provides out-of-band management and security features on an Intel vPro\u00ae platform. Intel vPro\u00ae Platform: An Intel\u00ae platform created for business environments. Intel vPro\u00ae features Intel\u00ae Core\u2122 i5 and Intel\u00ae Core\u2122 i7 vPro\u00ae processors, built-in security features, and out-of-band manageability using Intel\u00ae AMT. Images (Docker*): a set of instructions that determine the creation of an instantiated container on a Docker platform. K \u00b6 Keyboard Video Mouse (KVM): A technology, often a device, that allows a user to control multiple computers from a single keyboard, mouse, and video source. L \u00b6 lights-out management (LOM): See out-of-band management . M \u00b6 managed device: An Intel vPro\u00ae platform that features Intel\u00ae AMT and functions as an edge device. Manageability Engine BIOS Extensions (MEBX): A BIOS extension that enables the configuration of the Intel\u00ae AMT. Management Presence Server (MPS): A microservice that resides on the development system and enables platforms featuring featuring Intel\u00ae AMT. The MPS receives client initiated remote access (CIRA) requests from the managed device. microservice: A software unit or module of a microservice architecture. In Active Edge architecture, MPS and RPS are microservices residing on the development system. microservice architecture: An architecture in which the component parts are broken into discrete services, called microservices, that perform specific, limited functions. N \u00b6 Node.js*: An open source JavaScript runtime created for asynchronous, event-driven backend network applications. Node Package Manager (npm): a command line utility in node.js. The utility enables the management of packages, versions, and dependencies in node projects. O \u00b6 out-of-band (OOB) manageability: A remote management technology that allows administrators to perform actions on network assets or devices using a secure alernative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, Active Edge software can perform remote management, including powering up as system that is currently powered down. P \u00b6 profile : A set of configuration information, including a password and provisioning method, provided to Intel AMT firmware during the activation process. provision or provisioning: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Q \u00b6 R \u00b6 Remote Provision Client (RPC): A lightweight client application that resides on the managed device. The RPC communicates with the Managability Engine Interface (MEI) in the Management Engine (ME) driver to activate Intel AMT. Remote Provision Server (RPS): A node.js-based microservice that works with the Remote Provision Client (RPC) to activate Intel AMT using a pre-defined profile. Representational State Transfer (REST) API : An architectural style or set of rules describing constraints that allow administrators and developers to take advantage of various Web services. in the context of Active Edge, administrators can construct REST API calls and run them with node, use provided REST code snippets to expand the reference implementation console, and use provided REST code snippets as a springboard for developing and expanding custom consoles. S \u00b6 T \u00b6 U \u00b6 UI Toolkit: A modular, REST-based API consisting of code snippets administrators can use to add Web services to the reference implentation console. V \u00b6 vcpkg : A command-line application that helps manage package creation and C and C++ libraries on Microsoft Windows, Linux, and MacOS. Vault storage : A service that manages encryption and storage of infrastructure secrets. W \u00b6 WebSocket: A communication protocol that enables persistent connnections and full-duplex communnication between clients and servers. Web Service Management (WS-MAN): A SOAP-based protocol for exchanging management data between network devices. X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"Glossary/#glossary","text":"A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z","title":"Glossary"},{"location":"Glossary/#a","text":"Active Edge: An open source software architecture consisting of modular microservices and libraries for integration of out-of-band manageability into exisiting network infrastructures. The software enables network administrators and ISVs to explore key Intel\u00ae Active Management Technology (Intel\u00ae AMT). admin control mode (ACM): A mode of provisioning Intel\u00ae AMT that requires a purchased provisioning certificate from a Certificate Authority (CA), the creation of a domain, and the creation of a profile in the Remote Provisioning Server (RPS) application. ACM achieves a higher level of trust than client control mode (CCM). See CCM and provisioning. ACM Activation : The act of loading a purchased certificate and associating it with an Active Edge profile. allowlist : A list permiting access to a privilege, service, network, etc.","title":"A"},{"location":"Glossary/#b","text":"","title":"B"},{"location":"Glossary/#c","text":"certificate (provisioning): A digitally signed document used in the provisioning of an edge device featuring Intel\u00ae AMT. The Intel\u00ae AMT firmware is pre-loaded with Transport Layer Security (TLS) certificate thumbprints of different certificate vendors. A digital certificate binds the identity of the certificate holder to vendor-specific thumbprints. To provision an edge device, users must purchase a certificate from an approved vendor. Client Initiated Remote Access (CIRA): An out-of-band (OOB) management communication protocol that network clients can use to initiate a secure connection with a server. CIRA Config Control: Client Control Mode (CCM) : An alternative to ACM provisioning mode that does not require a purchased certificate. Use this mode to setup Active Edge software features quickly. Container (Docker*): The instantiation, or running instance, of a Docker image.","title":"C"},{"location":"Glossary/#d","text":"development system: The system on which Management Presence Server (MPS) and Remote Provision Server (RPS) are installed. Docker*: A platform that employs the idea of containerization, isolating a unit of software, such as an application, from its environment. Containerization creates applications as lightweight, discrete processes that can be deployed to the cloud as services. See Docker overview for more information. domain suffix: The top-level portion (end) of a domain name (i.e., com, net, org).","title":"D"},{"location":"Glossary/#e","text":"Edge Devices : A device that serves as an entry point into an enterprise or service provider network. Edge devices include those related to banking, retail, hospitality, point-of-sale, etc. Globally Unique Identifier (GUID): A 128-bit integer used to identify a system resource.","title":"E"},{"location":"Glossary/#i","text":"Intel\u00ae Active Management Technology (Intel\u00ae AMT): A technology that provides out-of-band management and security features on an Intel vPro\u00ae platform. Intel vPro\u00ae Platform: An Intel\u00ae platform created for business environments. Intel vPro\u00ae features Intel\u00ae Core\u2122 i5 and Intel\u00ae Core\u2122 i7 vPro\u00ae processors, built-in security features, and out-of-band manageability using Intel\u00ae AMT. Images (Docker*): a set of instructions that determine the creation of an instantiated container on a Docker platform.","title":"I"},{"location":"Glossary/#k","text":"Keyboard Video Mouse (KVM): A technology, often a device, that allows a user to control multiple computers from a single keyboard, mouse, and video source.","title":"K"},{"location":"Glossary/#l","text":"lights-out management (LOM): See out-of-band management .","title":"L"},{"location":"Glossary/#m","text":"managed device: An Intel vPro\u00ae platform that features Intel\u00ae AMT and functions as an edge device. Manageability Engine BIOS Extensions (MEBX): A BIOS extension that enables the configuration of the Intel\u00ae AMT. Management Presence Server (MPS): A microservice that resides on the development system and enables platforms featuring featuring Intel\u00ae AMT. The MPS receives client initiated remote access (CIRA) requests from the managed device. microservice: A software unit or module of a microservice architecture. In Active Edge architecture, MPS and RPS are microservices residing on the development system. microservice architecture: An architecture in which the component parts are broken into discrete services, called microservices, that perform specific, limited functions.","title":"M"},{"location":"Glossary/#n","text":"Node.js*: An open source JavaScript runtime created for asynchronous, event-driven backend network applications. Node Package Manager (npm): a command line utility in node.js. The utility enables the management of packages, versions, and dependencies in node projects.","title":"N"},{"location":"Glossary/#o","text":"out-of-band (OOB) manageability: A remote management technology that allows administrators to perform actions on network assets or devices using a secure alernative to LAN-based communication protocols. Actions include reboot, power up, power down, system updates, and more. As long as the network device or asset is connected to power, Active Edge software can perform remote management, including powering up as system that is currently powered down.","title":"O"},{"location":"Glossary/#p","text":"profile : A set of configuration information, including a password and provisioning method, provided to Intel AMT firmware during the activation process. provision or provisioning: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"P"},{"location":"Glossary/#q","text":"","title":"Q"},{"location":"Glossary/#r","text":"Remote Provision Client (RPC): A lightweight client application that resides on the managed device. The RPC communicates with the Managability Engine Interface (MEI) in the Management Engine (ME) driver to activate Intel AMT. Remote Provision Server (RPS): A node.js-based microservice that works with the Remote Provision Client (RPC) to activate Intel AMT using a pre-defined profile. Representational State Transfer (REST) API : An architectural style or set of rules describing constraints that allow administrators and developers to take advantage of various Web services. in the context of Active Edge, administrators can construct REST API calls and run them with node, use provided REST code snippets to expand the reference implementation console, and use provided REST code snippets as a springboard for developing and expanding custom consoles.","title":"R"},{"location":"Glossary/#s","text":"","title":"S"},{"location":"Glossary/#t","text":"","title":"T"},{"location":"Glossary/#u","text":"UI Toolkit: A modular, REST-based API consisting of code snippets administrators can use to add Web services to the reference implentation console.","title":"U"},{"location":"Glossary/#v","text":"vcpkg : A command-line application that helps manage package creation and C and C++ libraries on Microsoft Windows, Linux, and MacOS. Vault storage : A service that manages encryption and storage of infrastructure secrets.","title":"V"},{"location":"Glossary/#w","text":"WebSocket: A communication protocol that enables persistent connnections and full-duplex communnication between clients and servers. Web Service Management (WS-MAN): A SOAP-based protocol for exchanging management data between network devices.","title":"W"},{"location":"Glossary/#x","text":"","title":"X"},{"location":"Glossary/#y","text":"","title":"Y"},{"location":"Glossary/#z","text":"","title":"Z"},{"location":"license/","text":"License \u00b6 Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Intel Corporation Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#license","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2019 Intel Corporation Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"release-notes/","text":"Release Notes \u00b6 MPS V1 \u00b6 MPS server migrated to typescript project from traditional node js. All the REST API interfaces are changed to new interfaces.Now, there are four end points which are categarized based on the functionality. /admin - for all the admin user operations like downloading mescript, root certificate, disconnected device etc. /amt - for all AMT operations /relay - for KVM operations /notifications - fo updating the device connections. Known Defects \u00b6 Under high pressure, device responds as timed out. Make sure you give 30 to 60 seconds before proceeding.","title":"Release notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#mps-v1","text":"MPS server migrated to typescript project from traditional node js. All the REST API interfaces are changed to new interfaces.Now, there are four end points which are categarized based on the functionality. /admin - for all the admin user operations like downloading mescript, root certificate, disconnected device etc. /amt - for all AMT operations /relay - for KVM operations /notifications - fo updating the device connections.","title":"MPS V1"},{"location":"release-notes/#known-defects","text":"Under high pressure, device responds as timed out. Make sure you give 30 to 60 seconds before proceeding.","title":"Known Defects"},{"location":"security/","text":"MPS Security Considerations \u00b6 Management Presence Server (MPS) is a cloud agnostic micro-service that enables Intel\u00ae AMT-based platforms connecting over the internet to connect securely to manageability consoles. In order for a client to securely perform actions on Intel&reg AMT devices using REST APIs, MPS uses secrets. There are six key assets that must be protected: Intel\u00ae AMT credentials Intel\u00ae MPS credentials Device Allowlisting (List of UUIDs) APIKey Server Configuration Web User Credentials In addition to the above assets, there are best practices that are recommened to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets. Security Assets \u00b6 1. Intel\u00ae AMT credentials \u00b6 AMT credentials allows a user to remotely control Intel\u00ae AMT device and these credentials are configured in AMT Firmware. When user performs an action on the device using REST API, MPS then fetches corresponding credentials of that device from Vault/Database and uses it as part of digest authentication. It is highly recommended to use strong password (as per AMT password requirements) and also, unique passwords per device to make it more secure. 2. Intel\u00ae MPS credentials \u00b6 Every Intel\u00ae device needs to be authenticated prior to successful connection to MPS. MPS credentials are used to authenticate every Intel\u00ae device. After establishing TLS connection with MPS, device sends it's username and password, which will then be used to authenticate. It is highly recommended that every device use a unique username and password. 3. Device Allowlisting (List of UUIDs) \u00b6 Each Intel\u00ae AMT device has a unique identifier (UUID) assigned to it and this UUID is assigned by Original Equipment Manufacturer (OEM). As discussed above, devices are authenticated by MPS using MPS credentials. But even before validating credentials, only allowlisted Intel\u00ae AMT devices can be allowed to connect to make it more secure and this is being done using the allowlisted UUID. 4. APIKey \u00b6 Every client/user needs to be authenticated before allowing them to perform an action using REST API call. APIKey will be used by MPS to authenticate a client/user. 5. Server Configuration \u00b6 In order for MPS to use secure protocols, we will have to configure certificates, and the keys for these certificates need to be securely stored. If the keys are compromised then the attacker will be able to decrypt all the messages. 6. Web User Credentials \u00b6 Primary way of authenticating a user who intends to perform an action is using APIKey but MPS also provides a sample Web-based User Interface. This Web Interface shows how to make REST API calls using AJAX. Only authenticated users should be allowed to make REST API calls using Web UI and the authentication will be done using Web user credentials. Best Known Security Methods \u00b6 1. Enable TLS on network connections \u00b6 There are three potential places where TLS should be enabled to protect the security assets: HTTP/WS connection between client and MPS Connection between MPS and Vault/Database Connection between MPS and Intel\u00ae AMT device Encrypting these communication will help prevent network based attacks attempting to control Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections. 2. Secure and isolate execution environment \u00b6 MPS holds the described security assets in memory during execution. In order to protect these assets while in memory of MPS, it is recommended that MPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the assets. 3. Utilize Vault for storing Credentials \u00b6 Vault is a tool used to secure, store and tightly control access to secrets. Utilizing Vault to store passwords used by MPS will greatly increase the security of these assets. 4. Utilize Kubernetes Secrets for storing dynamic configuration values (like environment variables) \u00b6 Kubernetes Secrets help you to store and manage sensitive information like Tokens. Use Kubernetes secrets for storing environment variables required for configuring MPS rather than putting them in the image/pod. Vault token, Session secret key, and Server configuration assets required for MPS should be stored in Kubernetes secrets. RPS Security Considerations \u00b6 Remote Provision Service (RPS) is built to be a microservice that plays a component role in a larger set of services that makes up the device management software suite. In this role, RPS uses and creates secrets that are required to be able to successfully activate and use Intel\u00ae AMT. There are four key assets that must be protected: Remote admin password for Intel\u00ae AMT Provisioning Certificate for each supported domain Password used to encrypt each Provisioning Certificate Device configuration information sent to Intel\u00ae AMT device In addition to the above assets, there are best practices that are recommened to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets. Security Assets \u00b6 1 Remote Admin Password \u00b6 This password is what is configured in the Intel\u00ae AMT firmware that allows a remote user to remotely control the Intel\u00ae AMT device (power actions, remote desktop, remote terminal, etc). When RPS activates an Intel\u00ae AMT device, it sets this password in the Intel\u00ae AMT firmware. This password can either be statically set or can be randomly generated based on the profile defined by the user setting up RPS (covered in AMTConfigurations section). It is highly recommended to use randomly generated passwords as this will make each Intel\u00ae AMT device more secure by using unique passwords per device. RPS will only ever save the Remote Admin Password to a configured database connection. If a database connection is not configured, RPS will not use profiles that specify a randomly generated password. 2 Provisioning Certificate \u00b6 This certificate is unique per owned domain that has Intel\u00ae AMT devices located and RPS needs to provision. This certificate must be derived from a root certificate whose hash matches one of the trusted provisioning root certificate hashes that is listed in the Intel\u00ae AMT device firmware. Generally, the provisioning certificate is purchased from a trusted certificate authority (VeriSign, GoDaddy, Comodo, etc). The full list of supported CAs based on Intel\u00ae AMT version are listed here . This certificate must contain the leaf certificate, root certificate, and all of the intermediate certificates to form a complete certificate chain. Additionally, the certificate file must also include the private key for the certificate (.pfx format). The leaf certificate for the provisioning certificate must match the domain suffix that the Intel\u00ae AMT device is connected as specified by DHCP option 15 or the Truted DNS Suffix in the Management BIOS Extentions (MEBx). Matching this is one of the ways in which the Intel\u00ae AMT firmware establishes trust with RPS. RPS reads the location of the Provisioning Certificate from the configuration file and will then fetch the certificate when it is needed to activate an Intel\u00ae AMT device. RPS doesn't ever save or export the Provisioning Certificate anywhere. 3 Password used to encrypt Provisioning Certificate \u00b6 This is the password that is used to encrypt the provisioning certificate .pfx file that is discussed above. RPS uses this password to decrypt the provisioning certificate so that it can use the certificate components and the private key to activate Intel\u00ae AMT devices. RPS reads the password from the configuration file and will use it when it is needed to decrypt a provisioning certificate. RPS doesn't ever save or export the Provisioning Certficiate Password anywhere. 4 Device configuration information sent to Intel\u00ae AMT device \u00b6 This data is a set of information that Intel\u00ae AMT firmware will use to establish trust and then activate the Intel\u00ae AMT device. Contained in this information is the hashed remote admin password. It is important to protect this set of information while it is being used by RPS and while in transit to the Intel\u00ae AMT device. This set of information is not replayable and is specific for a given Intel\u00ae AMT device. Best Known Security Methods \u00b6 1 Enable TLS on network connections \u00b6 There are two potential places where TLS should be enable to protect the security assets: * WebSocket connection between RPS and Intel\u00ae AMT client * Database connection between RPS and storage database Encrypting these communication transports will help prevent network based attacks attempting to discover the Remote Admin Password for the Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections. 2 Secure and isolate execution environment \u00b6 RPS holds the described security assets in memory during execution. In order to protect these assets while in memory of RPS, it is recommended that RPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the configuration files and provisioning certificates 3 Utilize a Vault implementation to encrypt passwords \u00b6 Utilizing an encryption Vault to encrypt the passwords either created by or used by RPS will greatly increase the security of these assets. By only having the hash value stored in the RPS configuration file ensures that these assets are protected while at rest. Additionally, RPS can encrypt the static or randomly generated Remote Admin Password prior to sending this information to the database, protecting this asset while at rest in an unencrypted database.","title":"Security"},{"location":"security/#mps-security-considerations","text":"Management Presence Server (MPS) is a cloud agnostic micro-service that enables Intel\u00ae AMT-based platforms connecting over the internet to connect securely to manageability consoles. In order for a client to securely perform actions on Intel&reg AMT devices using REST APIs, MPS uses secrets. There are six key assets that must be protected: Intel\u00ae AMT credentials Intel\u00ae MPS credentials Device Allowlisting (List of UUIDs) APIKey Server Configuration Web User Credentials In addition to the above assets, there are best practices that are recommened to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets.","title":"MPS Security Considerations"},{"location":"security/#security-assets","text":"","title":"Security Assets"},{"location":"security/#1-intel-amt-credentials","text":"AMT credentials allows a user to remotely control Intel\u00ae AMT device and these credentials are configured in AMT Firmware. When user performs an action on the device using REST API, MPS then fetches corresponding credentials of that device from Vault/Database and uses it as part of digest authentication. It is highly recommended to use strong password (as per AMT password requirements) and also, unique passwords per device to make it more secure.","title":"1. Intel&reg; AMT credentials"},{"location":"security/#2-intel-mps-credentials","text":"Every Intel\u00ae device needs to be authenticated prior to successful connection to MPS. MPS credentials are used to authenticate every Intel\u00ae device. After establishing TLS connection with MPS, device sends it's username and password, which will then be used to authenticate. It is highly recommended that every device use a unique username and password.","title":"2. Intel&reg; MPS credentials"},{"location":"security/#3-device-allowlisting-list-of-uuids","text":"Each Intel\u00ae AMT device has a unique identifier (UUID) assigned to it and this UUID is assigned by Original Equipment Manufacturer (OEM). As discussed above, devices are authenticated by MPS using MPS credentials. But even before validating credentials, only allowlisted Intel\u00ae AMT devices can be allowed to connect to make it more secure and this is being done using the allowlisted UUID.","title":"3. Device Allowlisting (List of UUIDs)"},{"location":"security/#4-apikey","text":"Every client/user needs to be authenticated before allowing them to perform an action using REST API call. APIKey will be used by MPS to authenticate a client/user.","title":"4. APIKey"},{"location":"security/#5-server-configuration","text":"In order for MPS to use secure protocols, we will have to configure certificates, and the keys for these certificates need to be securely stored. If the keys are compromised then the attacker will be able to decrypt all the messages.","title":"5. Server Configuration"},{"location":"security/#6-web-user-credentials","text":"Primary way of authenticating a user who intends to perform an action is using APIKey but MPS also provides a sample Web-based User Interface. This Web Interface shows how to make REST API calls using AJAX. Only authenticated users should be allowed to make REST API calls using Web UI and the authentication will be done using Web user credentials.","title":"6. Web User Credentials"},{"location":"security/#best-known-security-methods","text":"","title":"Best Known Security Methods"},{"location":"security/#1-enable-tls-on-network-connections","text":"There are three potential places where TLS should be enabled to protect the security assets: HTTP/WS connection between client and MPS Connection between MPS and Vault/Database Connection between MPS and Intel\u00ae AMT device Encrypting these communication will help prevent network based attacks attempting to control Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections.","title":"1. Enable TLS on network connections"},{"location":"security/#2-secure-and-isolate-execution-environment","text":"MPS holds the described security assets in memory during execution. In order to protect these assets while in memory of MPS, it is recommended that MPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the assets.","title":"2. Secure and isolate execution environment"},{"location":"security/#3-utilize-vault-for-storing-credentials","text":"Vault is a tool used to secure, store and tightly control access to secrets. Utilizing Vault to store passwords used by MPS will greatly increase the security of these assets.","title":"3. Utilize Vault for storing Credentials"},{"location":"security/#4-utilize-kubernetes-secrets-for-storing-dynamic-configuration-values-like-environment-variables","text":"Kubernetes Secrets help you to store and manage sensitive information like Tokens. Use Kubernetes secrets for storing environment variables required for configuring MPS rather than putting them in the image/pod. Vault token, Session secret key, and Server configuration assets required for MPS should be stored in Kubernetes secrets.","title":"4. Utilize Kubernetes Secrets for storing dynamic configuration values (like environment variables)"},{"location":"security/#rps-security-considerations","text":"Remote Provision Service (RPS) is built to be a microservice that plays a component role in a larger set of services that makes up the device management software suite. In this role, RPS uses and creates secrets that are required to be able to successfully activate and use Intel\u00ae AMT. There are four key assets that must be protected: Remote admin password for Intel\u00ae AMT Provisioning Certificate for each supported domain Password used to encrypt each Provisioning Certificate Device configuration information sent to Intel\u00ae AMT device In addition to the above assets, there are best practices that are recommened to help secure these assets as they are used within the system. The following sections will cover each asset and the recommended practices to use to protect the assets.","title":"RPS Security Considerations"},{"location":"security/#security-assets_1","text":"","title":"Security Assets"},{"location":"security/#1-remote-admin-password","text":"This password is what is configured in the Intel\u00ae AMT firmware that allows a remote user to remotely control the Intel\u00ae AMT device (power actions, remote desktop, remote terminal, etc). When RPS activates an Intel\u00ae AMT device, it sets this password in the Intel\u00ae AMT firmware. This password can either be statically set or can be randomly generated based on the profile defined by the user setting up RPS (covered in AMTConfigurations section). It is highly recommended to use randomly generated passwords as this will make each Intel\u00ae AMT device more secure by using unique passwords per device. RPS will only ever save the Remote Admin Password to a configured database connection. If a database connection is not configured, RPS will not use profiles that specify a randomly generated password.","title":"1 Remote Admin Password"},{"location":"security/#2-provisioning-certificate","text":"This certificate is unique per owned domain that has Intel\u00ae AMT devices located and RPS needs to provision. This certificate must be derived from a root certificate whose hash matches one of the trusted provisioning root certificate hashes that is listed in the Intel\u00ae AMT device firmware. Generally, the provisioning certificate is purchased from a trusted certificate authority (VeriSign, GoDaddy, Comodo, etc). The full list of supported CAs based on Intel\u00ae AMT version are listed here . This certificate must contain the leaf certificate, root certificate, and all of the intermediate certificates to form a complete certificate chain. Additionally, the certificate file must also include the private key for the certificate (.pfx format). The leaf certificate for the provisioning certificate must match the domain suffix that the Intel\u00ae AMT device is connected as specified by DHCP option 15 or the Truted DNS Suffix in the Management BIOS Extentions (MEBx). Matching this is one of the ways in which the Intel\u00ae AMT firmware establishes trust with RPS. RPS reads the location of the Provisioning Certificate from the configuration file and will then fetch the certificate when it is needed to activate an Intel\u00ae AMT device. RPS doesn't ever save or export the Provisioning Certificate anywhere.","title":"2 Provisioning Certificate"},{"location":"security/#3-password-used-to-encrypt-provisioning-certificate","text":"This is the password that is used to encrypt the provisioning certificate .pfx file that is discussed above. RPS uses this password to decrypt the provisioning certificate so that it can use the certificate components and the private key to activate Intel\u00ae AMT devices. RPS reads the password from the configuration file and will use it when it is needed to decrypt a provisioning certificate. RPS doesn't ever save or export the Provisioning Certficiate Password anywhere.","title":"3 Password used to encrypt Provisioning Certificate"},{"location":"security/#4-device-configuration-information-sent-to-intel-amt-device","text":"This data is a set of information that Intel\u00ae AMT firmware will use to establish trust and then activate the Intel\u00ae AMT device. Contained in this information is the hashed remote admin password. It is important to protect this set of information while it is being used by RPS and while in transit to the Intel\u00ae AMT device. This set of information is not replayable and is specific for a given Intel\u00ae AMT device.","title":"4 Device configuration information sent to Intel&reg; AMT device"},{"location":"security/#best-known-security-methods_1","text":"","title":"Best Known Security Methods"},{"location":"security/#1-enable-tls-on-network-connections_1","text":"There are two potential places where TLS should be enable to protect the security assets: * WebSocket connection between RPS and Intel\u00ae AMT client * Database connection between RPS and storage database Encrypting these communication transports will help prevent network based attacks attempting to discover the Remote Admin Password for the Intel\u00ae AMT device. It is recommended that the most modern version of TLS be used to protect these connections.","title":"1 Enable TLS on network connections"},{"location":"security/#2-secure-and-isolate-execution-environment_1","text":"RPS holds the described security assets in memory during execution. In order to protect these assets while in memory of RPS, it is recommended that RPS be run in a secure execution environment such as a dedicated VM or container. Deploying into a hardened execution environment eases the burden of individually securing the configuration files and provisioning certificates","title":"2 Secure and isolate execution environment"},{"location":"security/#3-utilize-a-vault-implementation-to-encrypt-passwords","text":"Utilizing an encryption Vault to encrypt the passwords either created by or used by RPS will greatly increase the security of these assets. By only having the hash value stored in the RPS configuration file ensures that these assets are protected while at rest. Additionally, RPS can encrypt the static or randomly generated Remote Admin Password prior to sending this information to the database, protecting this asset while at rest in an unencrypted database.","title":"3 Utilize a Vault implementation to encrypt passwords"},{"location":"troubleshooting/","text":"Below is a list of some possible errors you may come across when activating or de-activating your devices along with some potential solutions that may help address the issue at hand. Error Message Possible Solutions \"Decrypting provisioning certificate failed\" Double check the password is correct on the certificate loaded into the \"domains\" on the UI \"Exception reading from device\" If MPS and RPS are running in Docker, check to ensure Vault has been unsealed. \"Unable to connect to Local Management Service (LMS). Please ensure LMS is running\" Check to ensure no application has bound to port 16992 \"Unable to launch MicroLMS.\" Check that Intel ME is present, MEI Driver installed and run this executable as administrator Check to ensure no application has bound to port 16992 \"Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Error while adding the certificates to AMT.\" Unplug the device, from both network and power, let it sit for a while. If that doesn't work, file a github issue Device xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx activation failed. Missing DNS Suffix. Run ./rpc --amtinfo all and ensure there is a DNS suffix. If it is blank, double check your router settings for DHCP. Alternatively, you can override the DNS suffix with --dns mycompany.com Error: amt password DOES NOT match stored version for Device 6c4243ba-334d-11ea-94b5-caba2a773d00 Ensure you have provided the --password flag for the --cmd/-c you are trying to execute, and that it is the password you used when provisioning the device. Unable to connect to websocket server. Please check url. After ensuring you can reach your server. Ensure that the certificate common name on the server matches the FQDN/IP of your host address.","title":"Troubleshooting"},{"location":"APIs/indexMPS/","text":"API and Command Reference \u00b6 This section is a reference to the MPS API methods available in Active Edge, and to some commands it provides. There are two types of method paths for the MPS Server: AMT path methods - Allow you to send device-specific calls for things such as power actions or audit logs. Utilize these methods by setting the path to amt in your API call. Admin path methods - Allow you to send calls for info for all devices or for MPS configuration information. Utilize these methods by setting the path to admin in your API call. Steps on how to create your own Rest API call can be found in the Construct a Rest API Call tutorial. How to Use the REST API \u00b6 Request URL \u00b6 The request URL is assembled using your MPS server's IP Address, the port, and the base path for the method you would like to run. The tables below explore what methods are accessible for each base path. Example url: https://localhost:3000/amt Base paths \u00b6 /amt/ /admin/ API Calls \u00b6 The sections below list methods for MPS. The MPS API includes Admin and AMT methods. Admin Methods \u00b6 Method Description/Usage AllDevices Lists all devices known to MPS, regardless of connected status ConnectedDevices Lists all devices currently connected to MPS Disconnect Disconnects the CIRA connection for a specified guid MEScript Downloads the cira_setup.mescript from MPS RootCertificate Download the MPS Root Certificate AMT Methods \u00b6 Note: These methods are 1:1 device-specific. Method Description/Usage AuditLog Returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid EventLog Return sensor and hardware event data GeneralSettings View general network settings GetAMTFeatures View what AMT out-of-band features are enabled/disabled HardwareInfo Retrieve hardware information such as processor or storage PowerAction Perform an OOB power action PowerCapabilities View what OOB power actions are available for that device PowerState Retrieve current state of AMT device, returns a number that maps to the PowerActions table SetAMTFeatures Enable/Disable AMT features such as KVM, SOL, and IDE-R Version Retrieve AMT version of device","title":"MPS Methods"},{"location":"APIs/indexMPS/#api-and-command-reference","text":"This section is a reference to the MPS API methods available in Active Edge, and to some commands it provides. There are two types of method paths for the MPS Server: AMT path methods - Allow you to send device-specific calls for things such as power actions or audit logs. Utilize these methods by setting the path to amt in your API call. Admin path methods - Allow you to send calls for info for all devices or for MPS configuration information. Utilize these methods by setting the path to admin in your API call. Steps on how to create your own Rest API call can be found in the Construct a Rest API Call tutorial.","title":"API and Command Reference"},{"location":"APIs/indexMPS/#how-to-use-the-rest-api","text":"","title":"How to Use the REST API"},{"location":"APIs/indexMPS/#request-url","text":"The request URL is assembled using your MPS server's IP Address, the port, and the base path for the method you would like to run. The tables below explore what methods are accessible for each base path. Example url: https://localhost:3000/amt","title":"Request URL"},{"location":"APIs/indexMPS/#base-paths","text":"/amt/ /admin/","title":"Base paths"},{"location":"APIs/indexMPS/#api-calls","text":"The sections below list methods for MPS. The MPS API includes Admin and AMT methods.","title":"API Calls"},{"location":"APIs/indexMPS/#admin-methods","text":"Method Description/Usage AllDevices Lists all devices known to MPS, regardless of connected status ConnectedDevices Lists all devices currently connected to MPS Disconnect Disconnects the CIRA connection for a specified guid MEScript Downloads the cira_setup.mescript from MPS RootCertificate Download the MPS Root Certificate","title":"Admin Methods"},{"location":"APIs/indexMPS/#amt-methods","text":"Note: These methods are 1:1 device-specific. Method Description/Usage AuditLog Returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid EventLog Return sensor and hardware event data GeneralSettings View general network settings GetAMTFeatures View what AMT out-of-band features are enabled/disabled HardwareInfo Retrieve hardware information such as processor or storage PowerAction Perform an OOB power action PowerCapabilities View what OOB power actions are available for that device PowerState Retrieve current state of AMT device, returns a number that maps to the PowerActions table SetAMTFeatures Enable/Disable AMT features such as KVM, SOL, and IDE-R Version Retrieve AMT version of device","title":"AMT Methods"},{"location":"APIs/indexRPS/","text":"API and Command Reference \u00b6 This section is a reference to the RPS API methods available in Active Edge, and to some commands it provides. RPS APIs allow you to get, create, and delete things such as CIRA Configs, Domains, and Profiles that are used in the remote configuration of Intel AMT devices. RPS API \u00b6 The following APIs are available in RPS: Method Description/Usage CIRA Configuration Creating, Editing, Deleting, and Retrieving a CIRA Configuration Intel AMT Domains Creating, Editing, Deleting, and Retrieving an Intel\u00ae AMT domain Intel AMT Profiles Creating, Editing, Deleting, and Retrieving an Intel\u00ae AMT profile Network Configuration Creating, Editing, Deleting, and Retrieving a Network Configuration","title":"RPS Methods"},{"location":"APIs/indexRPS/#api-and-command-reference","text":"This section is a reference to the RPS API methods available in Active Edge, and to some commands it provides. RPS APIs allow you to get, create, and delete things such as CIRA Configs, Domains, and Profiles that are used in the remote configuration of Intel AMT devices.","title":"API and Command Reference"},{"location":"APIs/indexRPS/#rps-api","text":"The following APIs are available in RPS: Method Description/Usage CIRA Configuration Creating, Editing, Deleting, and Retrieving a CIRA Configuration Intel AMT Domains Creating, Editing, Deleting, and Retrieving an Intel\u00ae AMT domain Intel AMT Profiles Creating, Editing, Deleting, and Retrieving an Intel\u00ae AMT profile Network Configuration Creating, Editing, Deleting, and Retrieving a Network Configuration","title":"RPS API"},{"location":"APIs/MPSmethods/alldevices/","text":"AllDevices \u00b6 This Admin method lists all devices known to MPS, regardless of connected status. Click here for supported input and output types. Example: Request Body \u00b6 Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"AllDevices\", \"payload\":{} } Example: Success ResponseBody \u00b6 [ { \"name\" : \"Win7-machine\" , \"mpsuser\" : \"standalone\" , \"amtuser\" : \"admin\" , \"host\" : \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"icon\" : 1 , \"conn\" : 1 }, { \"name\" : \"Ubuntu-machine\" , \"mpsuser\" : \"xenial\" , \"amtuser\" : \"admin\" , \"host\" : \"bf49cf00-9164-11e4-952b-b8aeed7ec594\" , \"icon\" : 1 , \"conn\" : 0 } ] Return to MPS Methods","title":"AllDevices"},{"location":"APIs/MPSmethods/alldevices/#alldevices","text":"This Admin method lists all devices known to MPS, regardless of connected status. Click here for supported input and output types.","title":"AllDevices"},{"location":"APIs/MPSmethods/alldevices/#example-request-body","text":"Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"AllDevices\", \"payload\":{} }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/alldevices/#example-success-responsebody","text":"[ { \"name\" : \"Win7-machine\" , \"mpsuser\" : \"standalone\" , \"amtuser\" : \"admin\" , \"host\" : \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"icon\" : 1 , \"conn\" : 1 }, { \"name\" : \"Ubuntu-machine\" , \"mpsuser\" : \"xenial\" , \"amtuser\" : \"admin\" , \"host\" : \"bf49cf00-9164-11e4-952b-b8aeed7ec594\" , \"icon\" : 1 , \"conn\" : 0 } ] Return to MPS Methods","title":"Example: Success ResponseBody"},{"location":"APIs/MPSmethods/auditlog/","text":"AuditLog \u00b6 An Admin method, AuditLog returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"AuditLog\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"logsPerPage\":10, \"page\":5, \"startDate\":\"2019-04-11\", \"endDate\":\"2019-04-18\" } } Example: Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ [ { \"auditAppID\" : 21 , \"eventID\" : 0 , \"initiatorType\" : 0 , \"auditApp\" : \"Network Time\" , \"event\" : \"Intel(R) ME Time Set\" , \"initiator\" : \"$$OsAdmin\" , \"time\" : \"2003-12-29T05:46:37.000Z\" , \"mcLocationType\" : 102 , \"netAddress\" : \" \\u0000 \\t127.0.0.1 \\u0004 Z-=\u00ef\u00bf\u00bd\" , \"ex\" :{ \"type\" : \"Buffer\" , \"data\" :[ ] }, \"exStr\" : \"Invalid Date\" }, { \"auditAppID\" : 21 , \"eventID\" : 0 , \"initiatorType\" : 0 , \"auditApp\" : \"Network Time\" , \"event\" : \"Intel(R) ME Time Set\" , \"initiator\" : \"$$OsAdmin\" , \"time\" : \"2017-12-21T17:30:39.000Z\" , \"mcLocationType\" : 189 , \"netAddress\" : \" \\u0000 \\t1\" , \"ex\" :{ \"type\" : \"Buffer\" , \"data\" :[ 55 , 46 , 48 , 46 , 48 , 46 , 49 , 4 , 90 , 59 , 239 , 191 , 189 , 62 ] }, \"exStr\" : \"5/3/1999, 11:24:30 PM\" } ] } } Return to MPS Methods","title":"AuditLog"},{"location":"APIs/MPSmethods/auditlog/#auditlog","text":"An Admin method, AuditLog returns a requested amount or time range of Intel\u00ae AMT Audit Log data for a specified guid. Click here for supported input and output types.","title":"AuditLog"},{"location":"APIs/MPSmethods/auditlog/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"AuditLog\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"logsPerPage\":10, \"page\":5, \"startDate\":\"2019-04-11\", \"endDate\":\"2019-04-18\" } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/auditlog/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ [ { \"auditAppID\" : 21 , \"eventID\" : 0 , \"initiatorType\" : 0 , \"auditApp\" : \"Network Time\" , \"event\" : \"Intel(R) ME Time Set\" , \"initiator\" : \"$$OsAdmin\" , \"time\" : \"2003-12-29T05:46:37.000Z\" , \"mcLocationType\" : 102 , \"netAddress\" : \" \\u0000 \\t127.0.0.1 \\u0004 Z-=\u00ef\u00bf\u00bd\" , \"ex\" :{ \"type\" : \"Buffer\" , \"data\" :[ ] }, \"exStr\" : \"Invalid Date\" }, { \"auditAppID\" : 21 , \"eventID\" : 0 , \"initiatorType\" : 0 , \"auditApp\" : \"Network Time\" , \"event\" : \"Intel(R) ME Time Set\" , \"initiator\" : \"$$OsAdmin\" , \"time\" : \"2017-12-21T17:30:39.000Z\" , \"mcLocationType\" : 189 , \"netAddress\" : \" \\u0000 \\t1\" , \"ex\" :{ \"type\" : \"Buffer\" , \"data\" :[ 55 , 46 , 48 , 46 , 48 , 46 , 49 , 4 , 90 , 59 , 239 , 191 , 189 , 62 ] }, \"exStr\" : \"5/3/1999, 11:24:30 PM\" } ] } } Return to MPS Methods","title":"Example: Success ResponseBody"},{"location":"APIs/MPSmethods/connecteddevices/","text":"Connected Devices \u00b6 The Admin method ConnectedDevices lists all devices currently connected to MPS. Click here for supported input and output types. Example: Request Body \u00b6 Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"ConnectedDevices\", \"payload\":{} } Example : Success ResponseBody \u00b6 [ { \"name\" : \"Win7-machine\" , \"mpsuser\" : \"standalone\" , \"amtuser\" : \"admin\" , \"host\" : \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"icon\" : 1 , \"conn\" : 1 } ] Return to MPS Methods","title":"Connected Devices"},{"location":"APIs/MPSmethods/connecteddevices/#connected-devices","text":"The Admin method ConnectedDevices lists all devices currently connected to MPS. Click here for supported input and output types.","title":"Connected Devices"},{"location":"APIs/MPSmethods/connecteddevices/#example-request-body","text":"Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"ConnectedDevices\", \"payload\":{} }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/connecteddevices/#example-success-responsebody","text":"[ { \"name\" : \"Win7-machine\" , \"mpsuser\" : \"standalone\" , \"amtuser\" : \"admin\" , \"host\" : \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"icon\" : 1 , \"conn\" : 1 } ] Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/disconnect/","text":"Disconnect \u00b6 Use this Admin method to disconnect a CIRA connection for a specified guid. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"Disconnect\", \"payload\":{ \"guid\" : \"038d0240-045c-05f4-7706-980700080009\" } } Example : Success ResponseBody \u00b6 { \"success\" : 200 , \"description\" : \"CIRA connection disconnected : 038d0240-045c-05f4-7706-980700080009\" } Return to MPS Methods","title":"Disconnect"},{"location":"APIs/MPSmethods/disconnect/#disconnect","text":"Use this Admin method to disconnect a CIRA connection for a specified guid. Click here for supported input and output types.","title":"Disconnect"},{"location":"APIs/MPSmethods/disconnect/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"Disconnect\", \"payload\":{ \"guid\" : \"038d0240-045c-05f4-7706-980700080009\" } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/disconnect/#example-success-responsebody","text":"{ \"success\" : 200 , \"description\" : \"CIRA connection disconnected : 038d0240-045c-05f4-7706-980700080009\" } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/eventlog/","text":"EventLog \u00b6 This AMT method returns sensor and hardware event data for a specific guid. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"EventLog\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"logsPerPage\":10, \"page\":5, \"startDate\":\"2019-04-11\", \"endDate\":\"2019-04-18\" } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ [ { \"deviceAddress\" : 255 , \"eventSensorType\" : 15 , \"eventType\" : 111 , \"eventOffset\" : 2 , \"eventSourceType\" : 104 , \"eventSeverity\" : 1 , \"sensorNumber\" : 255 , \"entity\" : 11 , \"entityInstance\" : 0 , \"eventData\" :[ 64 , 8 , 0 , 0 , 0 , 0 , 0 , 0 ], \"time\" : \"2019-04-11T17:57:40.000Z\" , \"entityStr\" : \"Add in card\" , \"desc\" : \"Option ROM initialization\" }, { \"deviceAddress\" : 255 , \"eventSensorType\" : 15 , \"eventType\" : 111 , \"eventOffset\" : 2 , \"eventSourceType\" : 104 , \"eventSeverity\" : 1 , \"sensorNumber\" : 255 , \"entity\" : 34 , \"entityInstance\" : 0 , \"eventData\" :[ 64 , 6 , 0 , 0 , 0 , 0 , 0 , 0 ], \"time\" : \"2019-04-11T17:57:39.000Z\" , \"entityStr\" : \"BIOS\" , \"desc\" : \"USB resource configuration\" } ] } } Return to MPS Methods","title":"EventLog"},{"location":"APIs/MPSmethods/eventlog/#eventlog","text":"This AMT method returns sensor and hardware event data for a specific guid. Click here for supported input and output types.","title":"EventLog"},{"location":"APIs/MPSmethods/eventlog/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"EventLog\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"logsPerPage\":10, \"page\":5, \"startDate\":\"2019-04-11\", \"endDate\":\"2019-04-18\" } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/eventlog/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ [ { \"deviceAddress\" : 255 , \"eventSensorType\" : 15 , \"eventType\" : 111 , \"eventOffset\" : 2 , \"eventSourceType\" : 104 , \"eventSeverity\" : 1 , \"sensorNumber\" : 255 , \"entity\" : 11 , \"entityInstance\" : 0 , \"eventData\" :[ 64 , 8 , 0 , 0 , 0 , 0 , 0 , 0 ], \"time\" : \"2019-04-11T17:57:40.000Z\" , \"entityStr\" : \"Add in card\" , \"desc\" : \"Option ROM initialization\" }, { \"deviceAddress\" : 255 , \"eventSensorType\" : 15 , \"eventType\" : 111 , \"eventOffset\" : 2 , \"eventSourceType\" : 104 , \"eventSeverity\" : 1 , \"sensorNumber\" : 255 , \"entity\" : 34 , \"entityInstance\" : 0 , \"eventData\" :[ 64 , 6 , 0 , 0 , 0 , 0 , 0 , 0 ], \"time\" : \"2019-04-11T17:57:39.000Z\" , \"entityStr\" : \"BIOS\" , \"desc\" : \"USB resource configuration\" } ] } } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/generalsettings/","text":"GeneralSettings \u00b6 This AMT method returns the general network settings for the specified guid. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"GeneralSettings\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" : { \"amtNetworkEnabled\" : 1 , \"ddnsPeriodicUpdateInterval\" : 1440 , \"ddnsTTL\" : 900 , \"ddnsUpdateByDHCPServerEnabled\" : true , \"ddnsUpdateEnabled\" : false , \"dhcpv6ConfigurationTimeout\" : 0 , \"digestRealm\" : \"Digest:A4070000000000000000000000000000\" , \"elementName\" : \"Intel(r) AMT: General Settings\" , \"hostName\" : \"Madhavi\" , \"hostOSFQDN\" : \"DESKTOP-1A99FM4\" , \"idleWakeTimeout\" : 65535 , \"instanceID\" : \"Intel(r) AMT: General Settings\" , \"networkInterfaceEnabled\" : true , \"pingResponseEnabled\" : true , \"powerSource\" : 0 , \"preferredAddressFamily\" : 0 , \"presenceNotificationInterval\" : 0 , \"privacyLevel\" : 0 , \"rmcpPingResponseEnabled\" : true , \"sharedFQDN\" : true , \"wsmanOnlyMode\" : false } } Return to MPS Methods","title":"GeneralSettings"},{"location":"APIs/MPSmethods/generalsettings/#generalsettings","text":"This AMT method returns the general network settings for the specified guid. Click here for supported input and output types.","title":"GeneralSettings"},{"location":"APIs/MPSmethods/generalsettings/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"GeneralSettings\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/generalsettings/#example-success-responsebody","text":"'200' : { \"ResponseBody\" : { \"amtNetworkEnabled\" : 1 , \"ddnsPeriodicUpdateInterval\" : 1440 , \"ddnsTTL\" : 900 , \"ddnsUpdateByDHCPServerEnabled\" : true , \"ddnsUpdateEnabled\" : false , \"dhcpv6ConfigurationTimeout\" : 0 , \"digestRealm\" : \"Digest:A4070000000000000000000000000000\" , \"elementName\" : \"Intel(r) AMT: General Settings\" , \"hostName\" : \"Madhavi\" , \"hostOSFQDN\" : \"DESKTOP-1A99FM4\" , \"idleWakeTimeout\" : 65535 , \"instanceID\" : \"Intel(r) AMT: General Settings\" , \"networkInterfaceEnabled\" : true , \"pingResponseEnabled\" : true , \"powerSource\" : 0 , \"preferredAddressFamily\" : 0 , \"presenceNotificationInterval\" : 0 , \"privacyLevel\" : 0 , \"rmcpPingResponseEnabled\" : true , \"sharedFQDN\" : true , \"wsmanOnlyMode\" : false } } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/getamtfeatures/","text":"GetAMTFeatures \u00b6 This AMT method returns the enabled/disabled settings for AMT out-of-band features. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"GetAMTFeatures\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ \"userConsent\" : \"all\" , \"redirection\" : true , \"KVM\" : true , \"SOL\" : false , \"IDER\" : false } } Return to MPS Methods","title":"GetAMTFeatures"},{"location":"APIs/MPSmethods/getamtfeatures/#getamtfeatures","text":"This AMT method returns the enabled/disabled settings for AMT out-of-band features. Click here for supported input and output types.","title":"GetAMTFeatures"},{"location":"APIs/MPSmethods/getamtfeatures/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"GetAMTFeatures\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/getamtfeatures/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ \"userConsent\" : \"all\" , \"redirection\" : true , \"KVM\" : true , \"SOL\" : false , \"IDER\" : false } } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/hardwareinfo/","text":"HadwareInformation \u00b6 This AMT method returns hardware information such as processor, storage capacity, etc. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"HardwareInformation\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" : { \"CIM_ComputerSystemPackage\" : { \"response\" : { \"antecedent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Chassis\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_Chassis\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"CIM_Chassis\" , \"@name\" : \"Tag\" } ] } } }, \"dependent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"RreferenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_ComputerSystem\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"ManagedSystem\" , \"@name\" : \"Name\" } ] } } }, \"platformGUID\" : \"1095AC4BA6042143BAE2D45DDF07B684\" }, \"status\" : 200 }, \"CIM_SystemPackaging\" : { \"responses\" : [ { \"antecedent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Chassis\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_Chassis\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"CIM_Chassis\" , \"@name\" : \"Tag\" } ] } } }, \"dependent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_ComputerSystem\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"ManagedSystem\" , \"@name\" : \"Name\" } ] } } }, \"platformGUID\" : \"1095AC4BA6042143BAE2D45DDF07B684\" } ], \"status\" : 200 }, \"CIM_Chassis\" : { \"response\" : { \"chassisPackageType\" : 0 , \"creationClassName\" : \"CIM_Chassis\" , \"elementName\" : \"Managed System Chassis\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNHE\" , \"operationalStatus\" : 0 , \"packageType\" : 3 , \"serialNumber\" : \"DW1646647500075\" , \"tag\" : \"CIM_Chassis\" , \"version\" : \"J57828-503\" }, \"status\" : 200 }, \"CIM_Chip\" : { \"responses\" : [ { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Chip\" , \"elementName\" : \"Managed System Processor Chip\" , \"manufacturer\" : \"Intel(R) Corporation\" , \"operationalStatus\" : 0 , \"tag\" : \"CPU 0\" , \"version\" : \"Intel(R) Core(TM) i5-7300U CPU @ 2.60GHz\" }, { \"bankLabel\" : \"BANK 0\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300C5\" , \"speed\" : 0 , \"tag\" : 9876543210 }, { \"bankLabel\" : \"BANK 2\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300BD\" , \"speed\" : 0 , \"tag\" : \"9876543210 (#2)\" } ], \"status\" : 200 }, \"CIM_Card\" : { \"response\" : { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Card\" , \"elementName\" : \"Managed System Base Board\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNB\" , \"operationalStatus\" : 0 , \"packageType\" : 9 , \"serialNumber\" : \"BTDN7490016E\" , \"tag\" : \"CIM_Card\" , \"version\" : \"J57626-503\" }, \"status\" : 200 }, \"CIM_BIOSElement\" : { \"response\" : { \"elementName\" : \"Primary BIOS\" , \"manufacturer\" : \"Intel Corp.\" , \"name\" : \"Primary BIOS\" , \"operationalStatus\" : 0 , \"primaryBIOS\" : true , \"releaseDate\" : { \"datetime\" : \"2018-03-15T00:00:00Z\" }, \"softwareElementID\" : \"DNKBLi5v.86A.0040.2018.0315.1451\" , \"softwareElementState\" : 2 , \"targetOperatingSystem\" : 66 , \"version\" : \"DNKBLi5v.86A.0040.2018.0315.1451\" }, \"status\" : 200 }, \"CIM_Processor\" : { \"responses\" : [ { \"cpuStatus\" : 1 , \"creationClassName\" : \"CIM_Processor\" , \"currentClockSpeed\" : 2500 , \"deviceID\" : \"CPU 0\" , \"elementName\" : \"Managed System CPU\" , \"enabledState\" : 2 , \"externalBusClockSpeed\" : 100 , \"family\" : 205 , \"healthState\" : 0 , \"maxClockSpeed\" : 8300 , \"operationalStatus\" : 0 , \"requestedState\" : 12 , \"role\" : \"Central\" , \"stepping\" : 9 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"ManagedSystem\" , \"upgradeMethod\" : 2 } ], \"status\" : 200 }, \"CIM_PhysicalMemory\" : { \"responses\" : [ { \"bankLabel\" : \"BANK 0\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300C5\" , \"speed\" : 0 , \"tag\" : 9876543210 }, { \"bankLabel\" : \"BANK 2\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300BD\" , \"speed\" : 0 , \"tag\" : \"9876543210 (#2)\" } ], \"status\" : 200 }, \"CIM_MediaAccessDevice\" : { \"responses\" : [ { \"capabilities\" : [ 4 , 10 ], \"creationClassName\" : \"CIM_MediaAccessDevice\" , \"deviceID\" : \"MEDIA DEV 0\" , \"elementName\" : \"Managed System Media Access Device\" , \"enabledDefault\" : 2 , \"enabledState\" : 0 , \"maxMediaSize\" : 250059350 , \"operationalStatus\" : 0 , \"requestedState\" : 12 , \"security\" : 2 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"ManagedSystem\" } ], \"status\" : 200 }, \"CIM_PhysicalPackage\" : { \"responses\" : [ { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Card\" , \"elementName\" : \"Managed System Base Board\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNB\" , \"operationalStatus\" : 0 , \"packageType\" : 9 , \"serialNumber\" : \"BTDN7490016E\" , \"tag\" : \"CIM_Card\" , \"version\" : \"J57626-503\" }, { \"creationClassName\" : \"CIM_PhysicalPackage\" , \"elementName\" : \"Managed System Storage Media Package\" , \"model\" : \"Samsung SSD 850 EVO M.2 250GB \" , \"operationalStatus\" : 0 , \"packageType\" : 15 , \"serialNumber\" : \"S33CNX0JC36654D \" , \"tag\" : \"Storage Media Package 0\" }, { \"chassisPackageType\" : 0 , \"creationClassName\" : \"CIM_Chassis\" , \"elementName\" : \"Managed System Chassis\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNHE\" , \"operationalStatus\" : 0 , \"packageType\" : 3 , \"serialNumber\" : \"DW1646647500075\" , \"tag\" : \"CIM_Chassis\" , \"version\" : \"J57828-503\" } ], \"status\" : 200 } } } Return to MPS Methods","title":"HadwareInformation"},{"location":"APIs/MPSmethods/hardwareinfo/#hadwareinformation","text":"This AMT method returns hardware information such as processor, storage capacity, etc. Click here for supported input and output types.","title":"HadwareInformation"},{"location":"APIs/MPSmethods/hardwareinfo/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"HardwareInformation\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/hardwareinfo/#example-success-responsebody","text":"'200' : { \"ResponseBody\" : { \"CIM_ComputerSystemPackage\" : { \"response\" : { \"antecedent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Chassis\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_Chassis\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"CIM_Chassis\" , \"@name\" : \"Tag\" } ] } } }, \"dependent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"RreferenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_ComputerSystem\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"ManagedSystem\" , \"@name\" : \"Name\" } ] } } }, \"platformGUID\" : \"1095AC4BA6042143BAE2D45DDF07B684\" }, \"status\" : 200 }, \"CIM_SystemPackaging\" : { \"responses\" : [ { \"antecedent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Chassis\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_Chassis\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"CIM_Chassis\" , \"@name\" : \"Tag\" } ] } } }, \"dependent\" : { \"address\" : \"http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous\" , \"referenceParameters\" : { \"resourceURI\" : \"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem\" , \"selectorSet\" : { \"selector\" : [ { \"value\" : \"CIM_ComputerSystem\" , \"@name\" : \"CreationClassName\" }, { \"value\" : \"ManagedSystem\" , \"@name\" : \"Name\" } ] } } }, \"platformGUID\" : \"1095AC4BA6042143BAE2D45DDF07B684\" } ], \"status\" : 200 }, \"CIM_Chassis\" : { \"response\" : { \"chassisPackageType\" : 0 , \"creationClassName\" : \"CIM_Chassis\" , \"elementName\" : \"Managed System Chassis\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNHE\" , \"operationalStatus\" : 0 , \"packageType\" : 3 , \"serialNumber\" : \"DW1646647500075\" , \"tag\" : \"CIM_Chassis\" , \"version\" : \"J57828-503\" }, \"status\" : 200 }, \"CIM_Chip\" : { \"responses\" : [ { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Chip\" , \"elementName\" : \"Managed System Processor Chip\" , \"manufacturer\" : \"Intel(R) Corporation\" , \"operationalStatus\" : 0 , \"tag\" : \"CPU 0\" , \"version\" : \"Intel(R) Core(TM) i5-7300U CPU @ 2.60GHz\" }, { \"bankLabel\" : \"BANK 0\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300C5\" , \"speed\" : 0 , \"tag\" : 9876543210 }, { \"bankLabel\" : \"BANK 2\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300BD\" , \"speed\" : 0 , \"tag\" : \"9876543210 (#2)\" } ], \"status\" : 200 }, \"CIM_Card\" : { \"response\" : { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Card\" , \"elementName\" : \"Managed System Base Board\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNB\" , \"operationalStatus\" : 0 , \"packageType\" : 9 , \"serialNumber\" : \"BTDN7490016E\" , \"tag\" : \"CIM_Card\" , \"version\" : \"J57626-503\" }, \"status\" : 200 }, \"CIM_BIOSElement\" : { \"response\" : { \"elementName\" : \"Primary BIOS\" , \"manufacturer\" : \"Intel Corp.\" , \"name\" : \"Primary BIOS\" , \"operationalStatus\" : 0 , \"primaryBIOS\" : true , \"releaseDate\" : { \"datetime\" : \"2018-03-15T00:00:00Z\" }, \"softwareElementID\" : \"DNKBLi5v.86A.0040.2018.0315.1451\" , \"softwareElementState\" : 2 , \"targetOperatingSystem\" : 66 , \"version\" : \"DNKBLi5v.86A.0040.2018.0315.1451\" }, \"status\" : 200 }, \"CIM_Processor\" : { \"responses\" : [ { \"cpuStatus\" : 1 , \"creationClassName\" : \"CIM_Processor\" , \"currentClockSpeed\" : 2500 , \"deviceID\" : \"CPU 0\" , \"elementName\" : \"Managed System CPU\" , \"enabledState\" : 2 , \"externalBusClockSpeed\" : 100 , \"family\" : 205 , \"healthState\" : 0 , \"maxClockSpeed\" : 8300 , \"operationalStatus\" : 0 , \"requestedState\" : 12 , \"role\" : \"Central\" , \"stepping\" : 9 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"ManagedSystem\" , \"upgradeMethod\" : 2 } ], \"status\" : 200 }, \"CIM_PhysicalMemory\" : { \"responses\" : [ { \"bankLabel\" : \"BANK 0\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300C5\" , \"speed\" : 0 , \"tag\" : 9876543210 }, { \"bankLabel\" : \"BANK 2\" , \"capacity\" : 4294967296 , \"creationClassName\" : \"CIM_PhysicalMemory\" , \"elementName\" : \"Managed System Memory Chip\" , \"formFactor\" : 13 , \"manufacturer\" : \"04EF\" , \"memoryType\" : 26 , \"partNumber\" : \"TEAMGROUP-SD4-2133 \" , \"serialNumber\" : \"020300BD\" , \"speed\" : 0 , \"tag\" : \"9876543210 (#2)\" } ], \"status\" : 200 }, \"CIM_MediaAccessDevice\" : { \"responses\" : [ { \"capabilities\" : [ 4 , 10 ], \"creationClassName\" : \"CIM_MediaAccessDevice\" , \"deviceID\" : \"MEDIA DEV 0\" , \"elementName\" : \"Managed System Media Access Device\" , \"enabledDefault\" : 2 , \"enabledState\" : 0 , \"maxMediaSize\" : 250059350 , \"operationalStatus\" : 0 , \"requestedState\" : 12 , \"security\" : 2 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"ManagedSystem\" } ], \"status\" : 200 }, \"CIM_PhysicalPackage\" : { \"responses\" : [ { \"canBeFRUed\" : true , \"creationClassName\" : \"CIM_Card\" , \"elementName\" : \"Managed System Base Board\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNB\" , \"operationalStatus\" : 0 , \"packageType\" : 9 , \"serialNumber\" : \"BTDN7490016E\" , \"tag\" : \"CIM_Card\" , \"version\" : \"J57626-503\" }, { \"creationClassName\" : \"CIM_PhysicalPackage\" , \"elementName\" : \"Managed System Storage Media Package\" , \"model\" : \"Samsung SSD 850 EVO M.2 250GB \" , \"operationalStatus\" : 0 , \"packageType\" : 15 , \"serialNumber\" : \"S33CNX0JC36654D \" , \"tag\" : \"Storage Media Package 0\" }, { \"chassisPackageType\" : 0 , \"creationClassName\" : \"CIM_Chassis\" , \"elementName\" : \"Managed System Chassis\" , \"manufacturer\" : \"Intel Corporation\" , \"model\" : \"NUC7i5DNHE\" , \"operationalStatus\" : 0 , \"packageType\" : 3 , \"serialNumber\" : \"DW1646647500075\" , \"tag\" : \"CIM_Chassis\" , \"version\" : \"J57828-503\" } ], \"status\" : 200 } } } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/mescript/","text":"MEScript \u00b6 This Admin method downloads the cira_setup.mescript from MPS. Click here for supported input and output types. Example: Request Body \u00b6 Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"MEScript\", \"payload\":{} } ResponseBody \u00b6 Downloads ME Script file. Sample JavaScript code : $.ajax({ url : '/admin' , method : 'POST' , data : JSON.stringify(postdata), contentType : \"application/json\" , success : function (data) { var blob = new Blob([data], {type : \"application/octet-stream\" } ); var url = window.URL.createObjectURL(blob); var a = document.createElement('a'); a.setAttribute('hidden', ''); a.setAttribute('href', url); a.setAttribute('download', fileName); document.body.appendChild(a); a.click(); document.body.removeChild(a); window.URL.revokeObjectURL(url); }, error : function(error){ console.log(error); } Return to MPS Methods","title":"MEScript"},{"location":"APIs/MPSmethods/mescript/#mescript","text":"This Admin method downloads the cira_setup.mescript from MPS. Click here for supported input and output types.","title":"MEScript"},{"location":"APIs/MPSmethods/mescript/#example-request-body","text":"Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"MEScript\", \"payload\":{} }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/mescript/#responsebody","text":"Downloads ME Script file. Sample JavaScript code : $.ajax({ url : '/admin' , method : 'POST' , data : JSON.stringify(postdata), contentType : \"application/json\" , success : function (data) { var blob = new Blob([data], {type : \"application/octet-stream\" } ); var url = window.URL.createObjectURL(blob); var a = document.createElement('a'); a.setAttribute('hidden', ''); a.setAttribute('href', url); a.setAttribute('download', fileName); document.body.appendChild(a); a.click(); document.body.removeChild(a); window.URL.revokeObjectURL(url); }, error : function(error){ console.log(error); } Return to MPS Methods","title":"ResponseBody"},{"location":"APIs/MPSmethods/poweraction/","text":"PowerAction \u00b6 This AMT method lets you perform an out-of-band power action. Actions are specified by number. Use the PowerCapabilities method to return the actions availabl for a specific device. Possible actions are listed in the following table: Action # Resulting Action 2 Power up/on 4 Sleep 5 Power cycle 7 Hibernate 8 Power down/off 10 Reset 12 Soft power down/off 14 Soft reset 100 Power up to BIOS settings 101 Reset to BIOS settings 104 Reset to secure erase 200 Reset to IDE-R floppy disc 201 Power on to IDE-R floppy disc 202 Reset to IDE-R CD-ROM 203 Power on to IDE-R CD-ROM 400 Reset to PXE 401 Power on to PXE Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerAction\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"action\":2 } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ \"returnValue\" : 0 , \"returnValueStr\" : \"SUCCESS\" } Return to MPS Methods","title":"PowerAction"},{"location":"APIs/MPSmethods/poweraction/#poweraction","text":"This AMT method lets you perform an out-of-band power action. Actions are specified by number. Use the PowerCapabilities method to return the actions availabl for a specific device. Possible actions are listed in the following table: Action # Resulting Action 2 Power up/on 4 Sleep 5 Power cycle 7 Hibernate 8 Power down/off 10 Reset 12 Soft power down/off 14 Soft reset 100 Power up to BIOS settings 101 Reset to BIOS settings 104 Reset to secure erase 200 Reset to IDE-R floppy disc 201 Power on to IDE-R floppy disc 202 Reset to IDE-R CD-ROM 203 Power on to IDE-R CD-ROM 400 Reset to PXE 401 Power on to PXE","title":"PowerAction"},{"location":"APIs/MPSmethods/poweraction/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerAction\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"action\":2 } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/poweraction/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ \"returnValue\" : 0 , \"returnValueStr\" : \"SUCCESS\" } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/powercapabilities/","text":"PowerCapabilities \u00b6 This AMT method returns a list of out-of-band power actions are available for the specified device. You can invoke these actions with the PowerAction method. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerCapabilities\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" : { \"powerUp\" : 2 , \"powerCycle\" : 5 , \"powerDown\" : 8 , \"reset\" : 10 , \"softOff\" : 12 , \"softReset\" : 14 , \"sleep\" : 4 , \"hibernate\" : 7 , \"powerUpToBIOS\" : 100 , \"resetToBIOS\" : 101 , \"resetToSecureErase\" : 104 , \"resetToIDE-RFloppy\" : 200 , \"powerOnToIDE-RFloppy\" : 201 , \"resetToIDE-RCDROM\" : 202 , \"powerOnToIDE-RCDROM\" : 203 , \"resetToPXE\" : 400 , \"powerOnToPXE\" : 401 } Return to MPS Methods","title":"PowerCapabilities"},{"location":"APIs/MPSmethods/powercapabilities/#powercapabilities","text":"This AMT method returns a list of out-of-band power actions are available for the specified device. You can invoke these actions with the PowerAction method. Click here for supported input and output types.","title":"PowerCapabilities"},{"location":"APIs/MPSmethods/powercapabilities/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerCapabilities\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/powercapabilities/#example-success-responsebody","text":"'200' : { \"ResponseBody\" : { \"powerUp\" : 2 , \"powerCycle\" : 5 , \"powerDown\" : 8 , \"reset\" : 10 , \"softOff\" : 12 , \"softReset\" : 14 , \"sleep\" : 4 , \"hibernate\" : 7 , \"powerUpToBIOS\" : 100 , \"resetToBIOS\" : 101 , \"resetToSecureErase\" : 104 , \"resetToIDE-RFloppy\" : 200 , \"powerOnToIDE-RFloppy\" : 201 , \"resetToIDE-RCDROM\" : 202 , \"powerOnToIDE-RCDROM\" : 203 , \"resetToPXE\" : 400 , \"powerOnToPXE\" : 401 } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/powerstate/","text":"PowerState \u00b6 This AMT method retrieves the current state of the Intel\u00ae AMT device, and returns a number that that maps to PowerActions table. Click here for supported input and output types. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerState\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ \"powerState\" : 2 } Return to MPS Methods","title":"PowerState"},{"location":"APIs/MPSmethods/powerstate/#powerstate","text":"This AMT method retrieves the current state of the Intel\u00ae AMT device, and returns a number that that maps to PowerActions table. Click here for supported input and output types.","title":"PowerState"},{"location":"APIs/MPSmethods/powerstate/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"PowerState\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\" //Replace with an AMT Device's GUID } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/powerstate/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ \"powerState\" : 2 } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/rootcertificate/","text":"RootCertificate \u00b6 This Admin method downloads the MPS Root Certificate. Click here for supported input and output types. Example: Request Body \u00b6 Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"MPSRootCertificate\", \"payload\":{} } ResponseBody \u00b6 Downloads MPS root certificate. Return to MPS Methods","title":"RootCertificate"},{"location":"APIs/MPSmethods/rootcertificate/#rootcertificate","text":"This Admin method downloads the MPS Root Certificate. Click here for supported input and output types.","title":"RootCertificate"},{"location":"APIs/MPSmethods/rootcertificate/#example-request-body","text":"Note: The following code block is an example of what would be the data sent as part of the POST request. //admin method { \"method\":\"MPSRootCertificate\", \"payload\":{} }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/rootcertificate/#responsebody","text":"Downloads MPS root certificate. Return to MPS Methods","title":"ResponseBody"},{"location":"APIs/MPSmethods/setamtfeatures/","text":"SetAMTFeatures \u00b6 Use this AMT method to enable or disable Intel\u00ae AMT features such as KVM, SOL, and IDE-R. Example: Request Body \u00b6 Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"SetAMTFeatures\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"userConsent\":\"all\" \"enableSOL\" : false, \"enableIDER\" : false, \"enableKVM\" : true } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" : \"Updated\" } Return to MPS Methods","title":"SetAMTFeatures"},{"location":"APIs/MPSmethods/setamtfeatures/#setamtfeatures","text":"Use this AMT method to enable or disable Intel\u00ae AMT features such as KVM, SOL, and IDE-R.","title":"SetAMTFeatures"},{"location":"APIs/MPSmethods/setamtfeatures/#example-request-body","text":"Important Note: More information on obtaining an AMT device's GUID can be found here . Note: The following code block is an example of what would be the data sent as part of the POST request. //amt method { \"method\":\"SetAMTFeatures\", \"payload\":{ \"guid\":\"038d0240-045c-05f4-7706-980700080009\", //Replace with an AMT Device's GUID \"userConsent\":\"all\" \"enableSOL\" : false, \"enableIDER\" : false, \"enableKVM\" : true } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/setamtfeatures/#example-success-responsebody","text":"'200' : { \"ResponseBody\" : \"Updated\" } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/MPSmethods/types/","text":"Types \u00b6 Request body \u00b6 requestBody { method : string; payload : any; } Response error body \u00b6 responseErrorBody { status: number; error: string; } All Devices \u00b6 interface devices { name : string; mpsuser : string; mpspass : string; amtuser : string; amtpass : string; host : string; icon : number; conn : number; } Audit log \u00b6 auditLog { auditAppID : number; eventID : number; initiatorType : number; auditApp : string; event : string; initiator : string; time : Date; mcLocationType : number; netAddress : string; ex : { type : string; data : number [] ; } ; exStr : string; } Event log \u00b6 eventLog { deviceAddress : number; eventSensorType : number; eventType : number; eventOffset : number; eventSourceType : number; eventSeverity : number; sensorNumber : number; entity : number; entityInstance : number; eventData : number[]; time : Date; entityStr : string; desc : string; } General settings \u00b6 generalSettings { amtNetworkEnabled : number; ddnsPeriodicUpdateInterval : number; ddnsTTL : number; ddnsUpdateByDHCPServerEnabled : boolean; ddnsUpdateEnabled : boolean; dhcpv6ConfigurationTimeout : number; digestRealm : string; elementName : string; hostName : string; hostOSFQDN : string; idleWakeTimeout : number; instanceID : string; networkInterfaceEnabled : boolean; pingResponseEnabled : boolean; powerSource : number; preferredAddressFamily : number; presenceNotificationInterval : number; privacyLevel : number; rmcpPingResponseEnabled : boolean; sharedFQDN : boolean; wsmanOnlyMode : boolean; } Hardware information \u00b6 module hardwareDetails { selector { value : string; @name : string; } selectorSet { selector : selector[]; } referenceParameters { resourceURI : string; selectorSet : selectorSet; } antecedent { address : string; referenceParameters : referenceParameters; } dependent { address : string; referenceParameters : referenceParameters; } response { antecedent : antecedent; dependent : dependent; platformGUID : string; } cimComputerSystemPackage { response : response; status : number; } cimSystemPackagingResponses { antecedent : antecedent; dependent : dependent; platformGUID : string; } cimSystemPackaging { responses : cimSystemPackagingResponses[]; status : number; } cimChassisResponse { chassisPackageType : number; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; } cimChassis { response : cimChassisResponse; status : number; } cimChipRespons { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; operationalStatus : number; tag : any; version : string; bankLabel : string; capacity? : number; formFactor? : number; memoryType? : number; partNumber : string; serialNumber : string; speed? : number; } cimChip { responses : cimChipRespons[]; status : number; } cimCardResponse { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; } cimCard { response : cimCardResponse; status : number; } cimBIOSElementResponse { elementName : string; manufacturer : string; name : string; operationalStatus : number; primaryBIOS : boolean; releaseDate : { datetime : Date; } ; softwareElementID : string; softwareElementState : number; targetOperatingSystem : number; version : string; } cimBIOSElement { response : cimBIOSElementResponse; status : number; } cimProcessorResponses { cpuStatus : number; creationClassName : string; currentClockSpeed : number; deviceID : string; elementName : string; enabledState : number; externalBusClockSpeed : number; family : number; healthState : number; maxClockSpeed : number; operationalStatus : number; requestedState : number; role : string; stepping : number; systemCreationClassName : string; systemName : string; upgradeMethod : number; } cimProcessor { responses : cimProcessorResponses[]; status : number; } cimPhysicalMemoryResponses { bankLabel : string; capacity : any; creationClassName : string; elementName : string; formFactor : number; manufacturer : string; memoryType : number; partNumber : string; serialNumber : string; speed : number; tag : any; } cimPhysicalMemory { responses : cimPhysicalMemoryResponses[]; status : number; } cimMediaAccessDeviceResponses { capabilities : number[]; creationClassName : string; deviceID : string; elementName : string; enabledDefault : number; enabledState : number; maxMediaSize : number; operationalStatus : number; requestedState : number; security : number; systemCreationClassName : string; systemName : string; } cimMediaAccessDevice { responses : cimMediaAccessDeviceResponses[]; status : number; } cimPhysicalPackageResponses { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; chassisPackageType? : number; } cimPhysicalPackage { responses : cimPhysicalPackageResponses[]; status : number; } hardwareinfo { CIM_ComputerSystemPackage : cimComputerSystemPackage; CIM_SystemPackaging : cimSystemPackaging; CIM_Chassis : cimChassis; CIM_Chip : cimChip; CIM_Card : cimCard; CIM_BIOSElement : cimBIOSElement; CIM_Processor : cimProcessor; CIM_PhysicalMemory : cimPhysicalMemory; CIM_MediaAccessDevice : cimMediaAccessDevice; CIM_PhysicalPackage : cimPhysicalPackage; } } Power action \u00b6 powerAction { returnValue : number; returnValueStr : string; } Power capabilities \u00b6 powerCapabilities { powerUp : number; powerCycle : number; powerDown : number; reset : number; softOff : number; softReset : number; sleep : number; hibernate : number; powerUpToBIOS : number; resetToBIOS : number; resetToSecureErase : number; resetToIDE-RFloppy : number; powerOnToIDE-RFloppy : number; resetToIDE-RCDROM : number; powerOnToIDE-RCDROM : number; resetToPXE : number; powerOnToPXE : number; } Power state \u00b6 powerState { powerState : number; } Version \u00b6 module versionInfo { cimSoftwareIdentityResponses { instanceID : string; isEntity : boolean; versionString : any; } cimSoftwareIdentity { responses : cimSoftwareIdentityResponses[]; status : number; } amtSetupAndConfigurationServiceResponse { creationClassName : string; elementName : string; enabledState : number; name : string; passwordModel : number; provisioningMode : number; provisioningServerOTP : string; provisioningState : number; requestedState : number; systemCreationClassName : string; systemName : string; zeroTouchConfigurationEnabled : boolean; } amtSetupAndConfigurationService { response : amtSetupAndConfigurationServiceResponse; status : number; } version { CIM_SoftwareIdentity : cimSoftwareIdentity; AMT_SetupAndConfigurationService : amtSetupAndConfigurationServiceResponse; } } Get AMT Features \u00b6 { userConsent\" : string , redirection : boolean , KVM : boolean , SOL : boolean , IDER : boolean } Return to MPS Methods","title":"Types"},{"location":"APIs/MPSmethods/types/#types","text":"","title":"Types"},{"location":"APIs/MPSmethods/types/#request-body","text":"requestBody { method : string; payload : any; }","title":"Request body"},{"location":"APIs/MPSmethods/types/#response-error-body","text":"responseErrorBody { status: number; error: string; }","title":"Response error body"},{"location":"APIs/MPSmethods/types/#all-devices","text":"interface devices { name : string; mpsuser : string; mpspass : string; amtuser : string; amtpass : string; host : string; icon : number; conn : number; }","title":"All Devices"},{"location":"APIs/MPSmethods/types/#audit-log","text":"auditLog { auditAppID : number; eventID : number; initiatorType : number; auditApp : string; event : string; initiator : string; time : Date; mcLocationType : number; netAddress : string; ex : { type : string; data : number [] ; } ; exStr : string; }","title":"Audit log"},{"location":"APIs/MPSmethods/types/#event-log","text":"eventLog { deviceAddress : number; eventSensorType : number; eventType : number; eventOffset : number; eventSourceType : number; eventSeverity : number; sensorNumber : number; entity : number; entityInstance : number; eventData : number[]; time : Date; entityStr : string; desc : string; }","title":"Event log"},{"location":"APIs/MPSmethods/types/#general-settings","text":"generalSettings { amtNetworkEnabled : number; ddnsPeriodicUpdateInterval : number; ddnsTTL : number; ddnsUpdateByDHCPServerEnabled : boolean; ddnsUpdateEnabled : boolean; dhcpv6ConfigurationTimeout : number; digestRealm : string; elementName : string; hostName : string; hostOSFQDN : string; idleWakeTimeout : number; instanceID : string; networkInterfaceEnabled : boolean; pingResponseEnabled : boolean; powerSource : number; preferredAddressFamily : number; presenceNotificationInterval : number; privacyLevel : number; rmcpPingResponseEnabled : boolean; sharedFQDN : boolean; wsmanOnlyMode : boolean; }","title":"General settings"},{"location":"APIs/MPSmethods/types/#hardware-information","text":"module hardwareDetails { selector { value : string; @name : string; } selectorSet { selector : selector[]; } referenceParameters { resourceURI : string; selectorSet : selectorSet; } antecedent { address : string; referenceParameters : referenceParameters; } dependent { address : string; referenceParameters : referenceParameters; } response { antecedent : antecedent; dependent : dependent; platformGUID : string; } cimComputerSystemPackage { response : response; status : number; } cimSystemPackagingResponses { antecedent : antecedent; dependent : dependent; platformGUID : string; } cimSystemPackaging { responses : cimSystemPackagingResponses[]; status : number; } cimChassisResponse { chassisPackageType : number; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; } cimChassis { response : cimChassisResponse; status : number; } cimChipRespons { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; operationalStatus : number; tag : any; version : string; bankLabel : string; capacity? : number; formFactor? : number; memoryType? : number; partNumber : string; serialNumber : string; speed? : number; } cimChip { responses : cimChipRespons[]; status : number; } cimCardResponse { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; } cimCard { response : cimCardResponse; status : number; } cimBIOSElementResponse { elementName : string; manufacturer : string; name : string; operationalStatus : number; primaryBIOS : boolean; releaseDate : { datetime : Date; } ; softwareElementID : string; softwareElementState : number; targetOperatingSystem : number; version : string; } cimBIOSElement { response : cimBIOSElementResponse; status : number; } cimProcessorResponses { cpuStatus : number; creationClassName : string; currentClockSpeed : number; deviceID : string; elementName : string; enabledState : number; externalBusClockSpeed : number; family : number; healthState : number; maxClockSpeed : number; operationalStatus : number; requestedState : number; role : string; stepping : number; systemCreationClassName : string; systemName : string; upgradeMethod : number; } cimProcessor { responses : cimProcessorResponses[]; status : number; } cimPhysicalMemoryResponses { bankLabel : string; capacity : any; creationClassName : string; elementName : string; formFactor : number; manufacturer : string; memoryType : number; partNumber : string; serialNumber : string; speed : number; tag : any; } cimPhysicalMemory { responses : cimPhysicalMemoryResponses[]; status : number; } cimMediaAccessDeviceResponses { capabilities : number[]; creationClassName : string; deviceID : string; elementName : string; enabledDefault : number; enabledState : number; maxMediaSize : number; operationalStatus : number; requestedState : number; security : number; systemCreationClassName : string; systemName : string; } cimMediaAccessDevice { responses : cimMediaAccessDeviceResponses[]; status : number; } cimPhysicalPackageResponses { canBeFRUed : boolean; creationClassName : string; elementName : string; manufacturer : string; model : string; operationalStatus : number; packageType : number; serialNumber : string; tag : string; version : string; chassisPackageType? : number; } cimPhysicalPackage { responses : cimPhysicalPackageResponses[]; status : number; } hardwareinfo { CIM_ComputerSystemPackage : cimComputerSystemPackage; CIM_SystemPackaging : cimSystemPackaging; CIM_Chassis : cimChassis; CIM_Chip : cimChip; CIM_Card : cimCard; CIM_BIOSElement : cimBIOSElement; CIM_Processor : cimProcessor; CIM_PhysicalMemory : cimPhysicalMemory; CIM_MediaAccessDevice : cimMediaAccessDevice; CIM_PhysicalPackage : cimPhysicalPackage; } }","title":"Hardware information"},{"location":"APIs/MPSmethods/types/#power-action","text":"powerAction { returnValue : number; returnValueStr : string; }","title":"Power action"},{"location":"APIs/MPSmethods/types/#power-capabilities","text":"powerCapabilities { powerUp : number; powerCycle : number; powerDown : number; reset : number; softOff : number; softReset : number; sleep : number; hibernate : number; powerUpToBIOS : number; resetToBIOS : number; resetToSecureErase : number; resetToIDE-RFloppy : number; powerOnToIDE-RFloppy : number; resetToIDE-RCDROM : number; powerOnToIDE-RCDROM : number; resetToPXE : number; powerOnToPXE : number; }","title":"Power capabilities"},{"location":"APIs/MPSmethods/types/#power-state","text":"powerState { powerState : number; }","title":"Power state"},{"location":"APIs/MPSmethods/types/#version","text":"module versionInfo { cimSoftwareIdentityResponses { instanceID : string; isEntity : boolean; versionString : any; } cimSoftwareIdentity { responses : cimSoftwareIdentityResponses[]; status : number; } amtSetupAndConfigurationServiceResponse { creationClassName : string; elementName : string; enabledState : number; name : string; passwordModel : number; provisioningMode : number; provisioningServerOTP : string; provisioningState : number; requestedState : number; systemCreationClassName : string; systemName : string; zeroTouchConfigurationEnabled : boolean; } amtSetupAndConfigurationService { response : amtSetupAndConfigurationServiceResponse; status : number; } version { CIM_SoftwareIdentity : cimSoftwareIdentity; AMT_SetupAndConfigurationService : amtSetupAndConfigurationServiceResponse; } }","title":"Version"},{"location":"APIs/MPSmethods/types/#get-amt-features","text":"{ userConsent\" : string , redirection : boolean , KVM : boolean , SOL : boolean , IDER : boolean } Return to MPS Methods","title":"Get AMT Features"},{"location":"APIs/MPSmethods/version/","text":"AMTVersion \u00b6 This AMT method retrieves the Intel\u00ae AMT version running on the specified device. Click here for supported input and output types. Example: Request Body \u00b6 Note: The following code block is an example of what would be the data sent as part of the POST request. { \"apiKey\" : \"string\" , \"method\" : \"Version\" , \"payload\" :{ \"guid\" : \"038d0240-045c-05f4-7706-980700080009\" } } Example : Success ResponseBody \u00b6 '200' : { \"ResponseBody\" :{ \"CIM_SoftwareIdentity\" : { \"responses\" : [ { \"instanceID\" : \"Flash\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Netstack\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"AMTApps\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"AMT\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Sku\" , \"isEntity\" : true , \"versionString\" : 16392 }, { \"instanceID\" : \"VendorID\" , \"isEntity\" : true , \"versionString\" : 8086 }, { \"instanceID\" : \"Build Number\" , \"isEntity\" : true , \"versionString\" : 3425 }, { \"instanceID\" : \"Recovery Version\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Recovery Build Num\" , \"isEntity\" : true , \"versionString\" : 3425 }, { \"instanceID\" : \"Legacy Mode\" , \"isEntity\" : true , \"versionString\" : \"False\" }, { \"instanceID\" : \"AMT FW Core Version\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" } ], \"status\" : 200 }, \"AMT_SetupAndConfigurationService\" : { \"response\" : { \"creationClassName\" : \"AMT_SetupAndConfigurationService\" , \"elementName\" : \"Intel(r) AMT Setup and Configuration Service\" , \"enabledState\" : 5 , \"name\" : \"Intel(r) AMT Setup and Configuration Service\" , \"passwordModel\" : 1 , \"provisioningMode\" : 1 , \"provisioningServerOTP\" : \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\" , \"provisioningState\" : 2 , \"requestedState\" : 12 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"Intel(r) AMT\" , \"zeroTouchConfigurationEnabled\" : true }, \"status\" : 200 } } Return to MPS Methods","title":"AMTVersion"},{"location":"APIs/MPSmethods/version/#amtversion","text":"This AMT method retrieves the Intel\u00ae AMT version running on the specified device. Click here for supported input and output types.","title":"AMTVersion"},{"location":"APIs/MPSmethods/version/#example-request-body","text":"Note: The following code block is an example of what would be the data sent as part of the POST request. { \"apiKey\" : \"string\" , \"method\" : \"Version\" , \"payload\" :{ \"guid\" : \"038d0240-045c-05f4-7706-980700080009\" } }","title":"Example: Request Body"},{"location":"APIs/MPSmethods/version/#example-success-responsebody","text":"'200' : { \"ResponseBody\" :{ \"CIM_SoftwareIdentity\" : { \"responses\" : [ { \"instanceID\" : \"Flash\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Netstack\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"AMTApps\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"AMT\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Sku\" , \"isEntity\" : true , \"versionString\" : 16392 }, { \"instanceID\" : \"VendorID\" , \"isEntity\" : true , \"versionString\" : 8086 }, { \"instanceID\" : \"Build Number\" , \"isEntity\" : true , \"versionString\" : 3425 }, { \"instanceID\" : \"Recovery Version\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" }, { \"instanceID\" : \"Recovery Build Num\" , \"isEntity\" : true , \"versionString\" : 3425 }, { \"instanceID\" : \"Legacy Mode\" , \"isEntity\" : true , \"versionString\" : \"False\" }, { \"instanceID\" : \"AMT FW Core Version\" , \"isEntity\" : true , \"versionString\" : \"11.8.50\" } ], \"status\" : 200 }, \"AMT_SetupAndConfigurationService\" : { \"response\" : { \"creationClassName\" : \"AMT_SetupAndConfigurationService\" , \"elementName\" : \"Intel(r) AMT Setup and Configuration Service\" , \"enabledState\" : 5 , \"name\" : \"Intel(r) AMT Setup and Configuration Service\" , \"passwordModel\" : 1 , \"provisioningMode\" : 1 , \"provisioningServerOTP\" : \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\" , \"provisioningState\" : 2 , \"requestedState\" : 12 , \"systemCreationClassName\" : \"CIM_ComputerSystem\" , \"systemName\" : \"Intel(r) AMT\" , \"zeroTouchConfigurationEnabled\" : true }, \"status\" : 200 } } Return to MPS Methods","title":"Example : Success ResponseBody"},{"location":"APIs/RPSmethods/ciraconfig/","text":"Creating a CIRA Configuration \u00b6 Endpoint: /api/v1/ciraconfigs/create Developer mode (Vault and DB disabled) \u00b6 In developer mode, all profiles and configurations are written to the file private/data.json. Prod mode (With Vault and DB enabled) \u00b6 In production mode, all profiles and CIRA configurations are written to the database, and secrets are stored in Vault. The inputs below for both CIRA Config and AMT Profile creation will work in either Developer or Prod mode. Create a CIRA Configuration \u00b6 proxyDetails is an optional field. { \"payload\" : { \"configName\" : \"config1\" , \"mpsServerAddress\" : \"localhost\" , \"mpsPort\" : 4433 , \"username\" : \"admin\" , \"password\" : \"P@ssw0rd\" , \"commonName\" : \"localhost\" , \"serverAddressFormat\" : 201 , \"mpsRootCertificate\" : \"\" , \"proxyDetails\" : \"\" , \"authMethod\" : 2 } } Output: Success CIRA Config config1 successfully inserted Failure CIRA Config insertion failed for config1. CIRA Config already exists. Get all CIRA configurations \u00b6 Endpoint: /api/v1/ciraconfigs/ Method Type: GET Headers: X-RPS-API-Key Sample Response: [ { \"ConfigName\" : \"config1\" , \"MPSServerAddress\" : \"13.64.233.163\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"13.64.233.163\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"null\" , \"ProxyDetails\" : \"null\" }, { \"ConfigName\" : \"config2\" , \"MPSServerAddress\" : \"localhost\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"localhost\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"\" , \"ProxyDetails\" : \"\" } ] Get a CIRA configuration \u00b6 Endpoint: /api/v1/ciraconfigs/{ciraconfigname} Method Type: GET Headers: X-RPS-API-Key Sample Response: { \"ConfigName\" : \"config1\" , \"MPSServerAddress\" : \"localhost\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"localhost\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"\" , \"ProxyDetails\" : \"\" } Edit a CIRA Configuration \u00b6 ONLY proxyDetails is optional. { \"payload\" : { \"configName\" : \"config1\" , \"mpsServerAddress\" : \"localhost\" , \"mpsPort\" : 4434 , \"username\" : \"admin\" , \"password\" : \"P@ssw0rd\" , \"commonName\" : \"localhost\" , \"serverAddressFormat\" : 201 , \"mpsRootCertificate\" : \"\" , \"proxyDetails\" : \"\" , \"authMethod\" : 2 } } Output: Success CIRA Config config1 successfully inserted Failure CIRA Config config11 not found Delete a CIRA configuration \u00b6 Endpoint: /api/v1/ciraconfigs/{ciraconfigname} Method Type: DELETE Headers: X-RPS-API-Key Success CIRA Config config1 successfully deleted Failure Deletion failed for CIRA Config: config1. Profile associated with this Config. Return to RPS Methods","title":"Creating a CIRA Configuration"},{"location":"APIs/RPSmethods/ciraconfig/#creating-a-cira-configuration","text":"Endpoint: /api/v1/ciraconfigs/create","title":"Creating a CIRA Configuration"},{"location":"APIs/RPSmethods/ciraconfig/#developer-mode-vault-and-db-disabled","text":"In developer mode, all profiles and configurations are written to the file private/data.json.","title":"Developer mode (Vault and DB disabled)"},{"location":"APIs/RPSmethods/ciraconfig/#prod-mode-with-vault-and-db-enabled","text":"In production mode, all profiles and CIRA configurations are written to the database, and secrets are stored in Vault. The inputs below for both CIRA Config and AMT Profile creation will work in either Developer or Prod mode.","title":"Prod mode (With Vault and DB enabled)"},{"location":"APIs/RPSmethods/ciraconfig/#create-a-cira-configuration","text":"proxyDetails is an optional field. { \"payload\" : { \"configName\" : \"config1\" , \"mpsServerAddress\" : \"localhost\" , \"mpsPort\" : 4433 , \"username\" : \"admin\" , \"password\" : \"P@ssw0rd\" , \"commonName\" : \"localhost\" , \"serverAddressFormat\" : 201 , \"mpsRootCertificate\" : \"\" , \"proxyDetails\" : \"\" , \"authMethod\" : 2 } } Output: Success CIRA Config config1 successfully inserted Failure CIRA Config insertion failed for config1. CIRA Config already exists.","title":"Create a CIRA Configuration"},{"location":"APIs/RPSmethods/ciraconfig/#get-all-cira-configurations","text":"Endpoint: /api/v1/ciraconfigs/ Method Type: GET Headers: X-RPS-API-Key Sample Response: [ { \"ConfigName\" : \"config1\" , \"MPSServerAddress\" : \"13.64.233.163\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"13.64.233.163\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"null\" , \"ProxyDetails\" : \"null\" }, { \"ConfigName\" : \"config2\" , \"MPSServerAddress\" : \"localhost\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"localhost\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"\" , \"ProxyDetails\" : \"\" } ]","title":"Get all CIRA configurations"},{"location":"APIs/RPSmethods/ciraconfig/#get-a-cira-configuration","text":"Endpoint: /api/v1/ciraconfigs/{ciraconfigname} Method Type: GET Headers: X-RPS-API-Key Sample Response: { \"ConfigName\" : \"config1\" , \"MPSServerAddress\" : \"localhost\" , \"MPSPort\" : 4433 , \"Username\" : \"admin\" , \"Password\" : null , \"CommonName\" : \"localhost\" , \"ServerAddressFormat\" : 201 , \"AuthMethod\" : 2 , \"MPSRootCertificate\" : \"\" , \"ProxyDetails\" : \"\" }","title":"Get a CIRA configuration"},{"location":"APIs/RPSmethods/ciraconfig/#edit-a-cira-configuration","text":"ONLY proxyDetails is optional. { \"payload\" : { \"configName\" : \"config1\" , \"mpsServerAddress\" : \"localhost\" , \"mpsPort\" : 4434 , \"username\" : \"admin\" , \"password\" : \"P@ssw0rd\" , \"commonName\" : \"localhost\" , \"serverAddressFormat\" : 201 , \"mpsRootCertificate\" : \"\" , \"proxyDetails\" : \"\" , \"authMethod\" : 2 } } Output: Success CIRA Config config1 successfully inserted Failure CIRA Config config11 not found","title":"Edit a CIRA Configuration"},{"location":"APIs/RPSmethods/ciraconfig/#delete-a-cira-configuration","text":"Endpoint: /api/v1/ciraconfigs/{ciraconfigname} Method Type: DELETE Headers: X-RPS-API-Key Success CIRA Config config1 successfully deleted Failure Deletion failed for CIRA Config: config1. Profile associated with this Config. Return to RPS Methods","title":"Delete a CIRA configuration"},{"location":"APIs/RPSmethods/domains/","text":"Intel AMT Domains \u00b6 Create A Domain \u00b6 Endpoint: * /api/v1/admin/domains/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"d1.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , //Can this be a directory path for the api call or has to be flat text like DX1? \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"[P@ssw0rd]\" } } Example Input: { \"payload\" : { \"Name\" : \"amtDomain\" , \"DomainSuffix\" : \"amtDomain.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , //Can this be a directory path for the api call or has to be flat text like DX1? \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"P@ssw0rd\" } } ???+ success: Domain amtDomain successfully inserted Failure Duplicate Domain. Domain already exists. Get a Domain \u00b6 Endpoint: * /api/v1/admin/domains/domain1 Method Type: GET Headers: X-RPS-API-Key input domain1 provided in the URL Example output: Success { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"vprodemo.com\" , \"ProvisioningCert\" : null , \"ProvisioningCertStorageFormat\" : \"string\" , \"ProvisioningCertPassword\" : null } Failure Domain not found Get ALL Domains \u00b6 Endpoint: * /api/v1/admin/domains/ Method Type: GET Headers: X-RPS-API-Key input provided in the URL Example output: Success [ { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"vprodemo.com\" , \"ProvisioningCert\" : null , \"ProvisioningCertStorageFormat\" : \"string\" , \"ProvisioningCertPassword\" : null } ] Failure Domains not found Edit A Domain \u00b6 Endpoint: * /api/v1/admin/domains/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"d1.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"[P@ssw0rd]\" } } Example Input: { \"payload\" : { \"Name\" : \"amtDomain\" , \"DomainSuffix\" : \"amtDomain.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"P@ssw0rd\" } } Success Domain amtDomain successfully updated Failure Domain domain1 not found Delete a Domain \u00b6 Endpoint: * /api/v1/admin/domains/domain1 Method Type: DELETE Headers: X-RPS-API-Key Example Input: Success Domain domain1 successfully deleted Failure Domain not found. Return to RPS Methods","title":"Intel AMT Domains"},{"location":"APIs/RPSmethods/domains/#intel-amt-domains","text":"","title":"Intel AMT Domains"},{"location":"APIs/RPSmethods/domains/#create-a-domain","text":"Endpoint: * /api/v1/admin/domains/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"d1.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , //Can this be a directory path for the api call or has to be flat text like DX1? \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"[P@ssw0rd]\" } } Example Input: { \"payload\" : { \"Name\" : \"amtDomain\" , \"DomainSuffix\" : \"amtDomain.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , //Can this be a directory path for the api call or has to be flat text like DX1? \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"P@ssw0rd\" } } ???+ success: Domain amtDomain successfully inserted Failure Duplicate Domain. Domain already exists.","title":"Create A Domain"},{"location":"APIs/RPSmethods/domains/#get-a-domain","text":"Endpoint: * /api/v1/admin/domains/domain1 Method Type: GET Headers: X-RPS-API-Key input domain1 provided in the URL Example output: Success { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"vprodemo.com\" , \"ProvisioningCert\" : null , \"ProvisioningCertStorageFormat\" : \"string\" , \"ProvisioningCertPassword\" : null } Failure Domain not found","title":"Get a Domain"},{"location":"APIs/RPSmethods/domains/#get-all-domains","text":"Endpoint: * /api/v1/admin/domains/ Method Type: GET Headers: X-RPS-API-Key input provided in the URL Example output: Success [ { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"vprodemo.com\" , \"ProvisioningCert\" : null , \"ProvisioningCertStorageFormat\" : \"string\" , \"ProvisioningCertPassword\" : null } ] Failure Domains not found","title":"Get ALL Domains"},{"location":"APIs/RPSmethods/domains/#edit-a-domain","text":"Endpoint: * /api/v1/admin/domains/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"Name\" : \"domain1\" , \"DomainSuffix\" : \"d1.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"[P@ssw0rd]\" } } Example Input: { \"payload\" : { \"Name\" : \"amtDomain\" , \"DomainSuffix\" : \"amtDomain.com\" , \"ProvisioningCert\" : \"[Your_ProvisioningCert_Text]\" , \"ProvisioningCertStorageFormat\" : \"raw\" , \"ProvisioningCertPassword\" : \"P@ssw0rd\" } } Success Domain amtDomain successfully updated Failure Domain domain1 not found","title":"Edit A Domain"},{"location":"APIs/RPSmethods/domains/#delete-a-domain","text":"Endpoint: * /api/v1/admin/domains/domain1 Method Type: DELETE Headers: X-RPS-API-Key Example Input: Success Domain domain1 successfully deleted Failure Domain not found. Return to RPS Methods","title":"Delete a Domain"},{"location":"APIs/RPSmethods/networkconfig/","text":"Network Configuration \u00b6 Create a Network Configuration \u00b6 Endpoint: * /api/v1/admin/networkconfigs/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[network-profile-name]\" , \"dhcpEnabled\" : \"false\" } } Example Input: { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"false\" } } Success NETWORK Config profile1 successfully inserted Failure NETWORK Config insertion failed for profile1. NETWORK Config already exists. Get a Network Configuration \u00b6 Endpoint: * /api/v1/admin/networkconfigs/{testnetworkconfig} Method Type: GET Headers: X-RPS-API-Key Example Input: N/A (test profile to retrieve provided in URL as query parameter) Success { \"ProfileName\" : \"profile1\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true } Failure NETWORK Config testProfile1 not found Get All Network Configuration \u00b6 Endpoint: * /api/v1/admin/networkconfigs/ Method Type: GET Headers: X-RPS-API-Key NA Example Input: NA (no query parameter in the URL retrieves all profiles) Success [ { \"ProfileName\" : \"profile1\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true } ] Failure No NETWORK Configs found. Edit a Profile \u00b6 Endpoint: * /api/v1/admin/networkconfigs/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"[false]\" } } Example Input: { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"true\" } } Success UPDATE Successful for NETWORK Config: profile1 Failure NETWORK Config profile11 not found Delete a Network Configuration \u00b6 Endpoint: * /api/v1/admin/networkconfigs/profile1 Method Type: DELETE Headers: X-RPS-API-Key NA Example Input: NA (Network Configuration to delete provided as query parameter in url 'profile1') Success NETWORK Config profile1 successfully deleted Failure NETWORK Config profile11 not found Return to RPS Methods","title":"Network Configuration"},{"location":"APIs/RPSmethods/networkconfig/#network-configuration","text":"","title":"Network Configuration"},{"location":"APIs/RPSmethods/networkconfig/#create-a-network-configuration","text":"Endpoint: * /api/v1/admin/networkconfigs/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[network-profile-name]\" , \"dhcpEnabled\" : \"false\" } } Example Input: { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"false\" } } Success NETWORK Config profile1 successfully inserted Failure NETWORK Config insertion failed for profile1. NETWORK Config already exists.","title":"Create a Network Configuration"},{"location":"APIs/RPSmethods/networkconfig/#get-a-network-configuration","text":"Endpoint: * /api/v1/admin/networkconfigs/{testnetworkconfig} Method Type: GET Headers: X-RPS-API-Key Example Input: N/A (test profile to retrieve provided in URL as query parameter) Success { \"ProfileName\" : \"profile1\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true } Failure NETWORK Config testProfile1 not found","title":"Get a Network Configuration"},{"location":"APIs/RPSmethods/networkconfig/#get-all-network-configuration","text":"Endpoint: * /api/v1/admin/networkconfigs/ Method Type: GET Headers: X-RPS-API-Key NA Example Input: NA (no query parameter in the URL retrieves all profiles) Success [ { \"ProfileName\" : \"profile1\" , \"DHCPEnabled\" : false , \"StaticIPShared\" : true , \"IPSyncEnabled\" : true } ] Failure No NETWORK Configs found.","title":"Get All Network Configuration"},{"location":"APIs/RPSmethods/networkconfig/#edit-a-profile","text":"Endpoint: * /api/v1/admin/networkconfigs/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"[false]\" } } Example Input: { \"payload\" : { \"profileName\" : \"profile1\" , \"dhcpEnabled\" : \"true\" } } Success UPDATE Successful for NETWORK Config: profile1 Failure NETWORK Config profile11 not found","title":"Edit a Profile"},{"location":"APIs/RPSmethods/networkconfig/#delete-a-network-configuration","text":"Endpoint: * /api/v1/admin/networkconfigs/profile1 Method Type: DELETE Headers: X-RPS-API-Key NA Example Input: NA (Network Configuration to delete provided as query parameter in url 'profile1') Success NETWORK Config profile1 successfully deleted Failure NETWORK Config profile11 not found Return to RPS Methods","title":"Delete a Network Configuration"},{"location":"APIs/RPSmethods/profiles/","text":"Intel AMT Profiles \u00b6 Create a Profile \u00b6 Endpoint: * /api/v1/admin/profiles/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[amt-profile-name]\" , \"amtPassword\" : \"[strong-AMT-password]\" , \"generateRandomPassword\" : \"false\" , \"passwordLength\" : 8 , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"[acmactivate/ccmactivate]\" } } Example Input: { \"payload\" : { \"profileName\" : \"testProfile1\" , \"amtPassword\" : \"STRONGPASSWORD\" , \"generateRandomPassword\" : false , \"passwordLength\" : null , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"ccmactivate\" } } Success Profile testProfile1 successfully inserted Failure Profile insertion failed for testProfile1. Profile already exists. Failure Referenced CIRA Config testconfig58 doesn't exist. Get a Profile \u00b6 Endpoint: * /api/v1/admin/profiles/{testprofile} Method Type: GET Headers: X-RPS-API-Key Example Input: N/A (test profile to retrieve provided in URL as query parameter) Success { \"ProfileName\" : \"testProfile1\" , \"AMTPassword\" : null , \"GenerateRandomPassword\" : false , \"RandomPasswordLength\" : null , \"ConfigurationScript\" : null , \"Activation\" : \"ccmactivate\" , \"CIRAConfigName\" : \"testconfig1\" } Failure Profile testProfile1 not found Get All Profiles \u00b6 Endpoint: * /api/v1/admin/profiles/ Method Type: GET Headers: X-RPS-API-Key NA Example Input: NA (no query parameter in the URL retrieves all profiles) Success [ { \"ProfileName\" : \"testProfile1\" , \"AMTPassword\" : null , \"GenerateRandomPassword\" : false , \"RandomPasswordLength\" : null , \"ConfigurationScript\" : null , \"Activation\" : \"ccmactivate\" , \"CIRAConfigName\" : \"testconfig1\" } ] Failure No profiles found. Edit a Profile \u00b6 Endpoint: * /api/v1/admin/profiles/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[amt-profile-name]\" , \"amtPassword\" : \"[strong-AMT-password]\" , \"generateRandomPassword\" : \"false\" , \"passwordLength\" : 8 , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"[acmactivate/ccmactivate]\" } } Example Input: { \"payload\" : { \"profileName\" : \"testProfile1\" , \"amtPassword\" : \"STRONGPASSWORD\" , \"generateRandomPassword\" : false , \"passwordLength\" : null , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"ccmactivate\" } } Success Profile testProfile1 successfully updated. Failure Referenced CIRA Config testconfig58 not found. Failure Profile testProfile11 not found Delete a Profile \u00b6 Endpoint: * /api/v1/admin/profiles/profile1 Method Type: DELETE Headers: X-RPS-API-Key NA Example Input: NA (profile to delete provided as query parameter in url 'profile1') Success Profile testProfile1 successfully deleted Failure Profile not found. Return to RPS Methods","title":"Intel AMT Profiles"},{"location":"APIs/RPSmethods/profiles/#intel-amt-profiles","text":"","title":"Intel AMT Profiles"},{"location":"APIs/RPSmethods/profiles/#create-a-profile","text":"Endpoint: * /api/v1/admin/profiles/create Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[amt-profile-name]\" , \"amtPassword\" : \"[strong-AMT-password]\" , \"generateRandomPassword\" : \"false\" , \"passwordLength\" : 8 , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"[acmactivate/ccmactivate]\" } } Example Input: { \"payload\" : { \"profileName\" : \"testProfile1\" , \"amtPassword\" : \"STRONGPASSWORD\" , \"generateRandomPassword\" : false , \"passwordLength\" : null , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"ccmactivate\" } } Success Profile testProfile1 successfully inserted Failure Profile insertion failed for testProfile1. Profile already exists. Failure Referenced CIRA Config testconfig58 doesn't exist.","title":"Create a Profile"},{"location":"APIs/RPSmethods/profiles/#get-a-profile","text":"Endpoint: * /api/v1/admin/profiles/{testprofile} Method Type: GET Headers: X-RPS-API-Key Example Input: N/A (test profile to retrieve provided in URL as query parameter) Success { \"ProfileName\" : \"testProfile1\" , \"AMTPassword\" : null , \"GenerateRandomPassword\" : false , \"RandomPasswordLength\" : null , \"ConfigurationScript\" : null , \"Activation\" : \"ccmactivate\" , \"CIRAConfigName\" : \"testconfig1\" } Failure Profile testProfile1 not found","title":"Get a Profile"},{"location":"APIs/RPSmethods/profiles/#get-all-profiles","text":"Endpoint: * /api/v1/admin/profiles/ Method Type: GET Headers: X-RPS-API-Key NA Example Input: NA (no query parameter in the URL retrieves all profiles) Success [ { \"ProfileName\" : \"testProfile1\" , \"AMTPassword\" : null , \"GenerateRandomPassword\" : false , \"RandomPasswordLength\" : null , \"ConfigurationScript\" : null , \"Activation\" : \"ccmactivate\" , \"CIRAConfigName\" : \"testconfig1\" } ] Failure No profiles found.","title":"Get All Profiles"},{"location":"APIs/RPSmethods/profiles/#edit-a-profile","text":"Endpoint: * /api/v1/admin/profiles/edit Method Type: POST Headers: X-RPS-API-Key { \"payload\" : { \"profileName\" : \"[amt-profile-name]\" , \"amtPassword\" : \"[strong-AMT-password]\" , \"generateRandomPassword\" : \"false\" , \"passwordLength\" : 8 , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"[acmactivate/ccmactivate]\" } } Example Input: { \"payload\" : { \"profileName\" : \"testProfile1\" , \"amtPassword\" : \"STRONGPASSWORD\" , \"generateRandomPassword\" : false , \"passwordLength\" : null , \"ciraConfigName\" : \"testconfig\" , \"activation\" : \"ccmactivate\" } } Success Profile testProfile1 successfully updated. Failure Referenced CIRA Config testconfig58 not found. Failure Profile testProfile11 not found","title":"Edit a Profile"},{"location":"APIs/RPSmethods/profiles/#delete-a-profile","text":"Endpoint: * /api/v1/admin/profiles/profile1 Method Type: DELETE Headers: X-RPS-API-Key NA Example Input: NA (profile to delete provided as query parameter in url 'profile1') Success Profile testProfile1 successfully deleted Failure Profile not found. Return to RPS Methods","title":"Delete a Profile"},{"location":"Docker/dockerCloud/","text":"Build Docker* Containers for MPS and RPS and Deploy to the Cloud \u00b6 Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the services as Docker* images to the cloud. What You'll Do \u00b6 This tutorial explains the steps to deploy Management Presence Server (MPS) and Remote Provisioning Server (RPS) as Docker images to the cloud using Microsoft Azure : Create a Microsoft Azure subscription. Create a Docker Hub account. Supply it with a Docker ID which will be used later. Login to the accounts. Build and deploy to the cloud. What You'll Need \u00b6 Hardware A development box At least one Intel\u00ae AMT device Software Microsoft Azure Subscription and Login Microsoft Azure Configuration Details Create a subscription for Microsoft Azure. Download Microsoft Azure Command Line Interface (CLI) . Test the Microsoft Azure CLI login . Docker Hub Account Docker Hub Account Configuration Details Creating an account on Docker Hub requires the creation of a unique Docker ID consisting of 4 to 30 lowercase letters and digits. This ID becomes the user namespace for hosted services. The password and Docker ID will be used in the deployment instructions. A Docker Hub account enables user access to Docker Hub repositories, forums, support and more. See detailed instructions for creating an account here . Docker Desktop on Windows Docker Configuration Details The Docker for Windows installer defaults to enabling and running all the required settings necessary for this tutorial. After successful installation, the Docker icon (whale), appears on the task bar. To troubleshoot the installation, see the troubleshooting guide . Build Docker Images \u00b6 Login to Microsoft Azure with the Azure CLI using the az command. Type the command in a Windows Command Prompt or Azure PowerShell. az login This command will invoke the default browser, which displays a login screen. Login to the Docker hub account with the Docker ID and password. [KD: Please place pix here.] docker login --username [your Docker ID] --password [your Docker Hub Password] Build MPS \u00b6 Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Navigate to the MPS folder and build the Docker image. Execute a build and push for MPS. The docker push command with the -t or --tag option enables the naming and tagging of a build: docker push -t [docker-id][name:tag] cd parent directory\\mps docker build . -t f30911230045\\mps-microservice:v1 docker push f30911230045\\mps-microservice:v1 Build RPS \u00b6 Navigate to the RPS folder and build the Docker image. Execute a build and push for RPS. cd ..\\rps docker build . -t f30911230032\\rps-microservice:v1 docker push f30911230032\\rps-microservice:v1 Deploy \u00b6 After building the new MPS and RPS images, navigate to mps\\scripts\\docker-compose folder and use xcopy to copy the .env.template file to .env. The environment file .env.template contains the MPS and RPS environment variables to pass to the Docker engine. cd mps\\scripts\\docker-compose xcopy /Y .env.template .env NOTE: Preserve the .env.template file. This file is very important to maintain. Always copy to a new file. Set the image-related environment variables within the .env file: MPS_IMAGE=[name:tag from the build step] RPS_IMAGE=[name:tag from the build step] MPS_IMAGE=mps-microservice:v1 RPS_IMAGE=rps-microservice:v2 Set the proper proxy values if behind a proxy. set HTTP_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTPS_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTP_PROXY=http://10.3.4.52:8080 set HTTPS_PROXY=http://10.3.4.52:8080 NOTE: If using a private Docker hub, set the password variable. DOCKER_LOGIN_PASSWORD=[your-docker-login-password Run the oact-stack-azure-vm.bat file. This file: Installs the Docker on the Microsoft Azure VM Runs the docker-compose up command. Copies the .env-template file to .env. oact-stack-azure-vm.bat [your-solution-name] [region (e.g.,: westus)] [MPS-IMAGE] [RPS-IMAGE] cd scripts\\docker-compose oact-stack-azure-vm.bat vprodemo westus","title":"Docker Images on the Cloud"},{"location":"Docker/dockerCloud/#build-docker-containers-for-mps-and-rps-and-deploy-to-the-cloud","text":"Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the services as Docker* images to the cloud.","title":"Build Docker* Containers for MPS and RPS and Deploy to the Cloud"},{"location":"Docker/dockerCloud/#what-youll-do","text":"This tutorial explains the steps to deploy Management Presence Server (MPS) and Remote Provisioning Server (RPS) as Docker images to the cloud using Microsoft Azure : Create a Microsoft Azure subscription. Create a Docker Hub account. Supply it with a Docker ID which will be used later. Login to the accounts. Build and deploy to the cloud.","title":"What You'll Do"},{"location":"Docker/dockerCloud/#what-youll-need","text":"Hardware A development box At least one Intel\u00ae AMT device Software Microsoft Azure Subscription and Login Microsoft Azure Configuration Details Create a subscription for Microsoft Azure. Download Microsoft Azure Command Line Interface (CLI) . Test the Microsoft Azure CLI login . Docker Hub Account Docker Hub Account Configuration Details Creating an account on Docker Hub requires the creation of a unique Docker ID consisting of 4 to 30 lowercase letters and digits. This ID becomes the user namespace for hosted services. The password and Docker ID will be used in the deployment instructions. A Docker Hub account enables user access to Docker Hub repositories, forums, support and more. See detailed instructions for creating an account here . Docker Desktop on Windows Docker Configuration Details The Docker for Windows installer defaults to enabling and running all the required settings necessary for this tutorial. After successful installation, the Docker icon (whale), appears on the task bar. To troubleshoot the installation, see the troubleshooting guide .","title":"What You'll Need"},{"location":"Docker/dockerCloud/#build-docker-images","text":"Login to Microsoft Azure with the Azure CLI using the az command. Type the command in a Windows Command Prompt or Azure PowerShell. az login This command will invoke the default browser, which displays a login screen. Login to the Docker hub account with the Docker ID and password. [KD: Please place pix here.] docker login --username [your Docker ID] --password [your Docker Hub Password]","title":"Build Docker Images"},{"location":"Docker/dockerCloud/#build-mps","text":"Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Navigate to the MPS folder and build the Docker image. Execute a build and push for MPS. The docker push command with the -t or --tag option enables the naming and tagging of a build: docker push -t [docker-id][name:tag] cd parent directory\\mps docker build . -t f30911230045\\mps-microservice:v1 docker push f30911230045\\mps-microservice:v1","title":"Build MPS"},{"location":"Docker/dockerCloud/#build-rps","text":"Navigate to the RPS folder and build the Docker image. Execute a build and push for RPS. cd ..\\rps docker build . -t f30911230032\\rps-microservice:v1 docker push f30911230032\\rps-microservice:v1","title":"Build RPS"},{"location":"Docker/dockerCloud/#deploy","text":"After building the new MPS and RPS images, navigate to mps\\scripts\\docker-compose folder and use xcopy to copy the .env.template file to .env. The environment file .env.template contains the MPS and RPS environment variables to pass to the Docker engine. cd mps\\scripts\\docker-compose xcopy /Y .env.template .env NOTE: Preserve the .env.template file. This file is very important to maintain. Always copy to a new file. Set the image-related environment variables within the .env file: MPS_IMAGE=[name:tag from the build step] RPS_IMAGE=[name:tag from the build step] MPS_IMAGE=mps-microservice:v1 RPS_IMAGE=rps-microservice:v2 Set the proper proxy values if behind a proxy. set HTTP_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTPS_PROXY=http://[your-proxy-server]:[your-proxy-server-port] set HTTP_PROXY=http://10.3.4.52:8080 set HTTPS_PROXY=http://10.3.4.52:8080 NOTE: If using a private Docker hub, set the password variable. DOCKER_LOGIN_PASSWORD=[your-docker-login-password Run the oact-stack-azure-vm.bat file. This file: Installs the Docker on the Microsoft Azure VM Runs the docker-compose up command. Copies the .env-template file to .env. oact-stack-azure-vm.bat [your-solution-name] [region (e.g.,: westus)] [MPS-IMAGE] [RPS-IMAGE] cd scripts\\docker-compose oact-stack-azure-vm.bat vprodemo westus","title":"Deploy"},{"location":"Docker/dockerLocal/","text":"Build and Deploy Docker* Images for MPS and RPS Locally \u00b6 Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the services as Docker* images, standardized packages containing an application's source code, libraries, environment, and dependencies. A Docker container is the instantiation of a Docker image as a virtualized unit that separates the application from the environment. Docker* containers start and run reliably, securely, and portably inside different environments, eliminating some of the usual problems that occur with software deployment on varying platforms. Get more information about Docker images and containers at Docker resources. What You'll Do \u00b6 This section describes how to deploy MPS and RPS as Docker* images on the development system: Clone the repositories. Build the images. Set the environment variables. Run the tool docker-compose tool on a sample configuration file to define and enable a multi-container environment. Clone the MPS and RPS Repositories \u00b6 Navigate to a directory of your choice for development. Clone MPS \u00b6 1. Clone the MPS repository. git clone https://github.com/open-amt-cloud-toolkit/mps.git 2. Checkout the ActivEdge branch. cd mps git checkout ActivEdge Clone RPS \u00b6 1.Clone the RPS repository to the same parent directory as MPS. git clone https://github.com/open-amt-cloud-toolkit/rps.git After the git clone commands complete, the parent directory will contain an MPS and RPS folder. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps 2. Checkout the ActivEdge branch. cd rps git checkout ActivEdge Build the Docker Images \u00b6 Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build . -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Note: Building a fresh Docker image may take several minutes. Build MPS \u00b6 1. Navigate to MPS folder and build the Docker image. cd ../mps docker build . -t mps:v1 Note: On completion, a security warning is normal during local setup with the default values for developer testing environments. Build RPS \u00b6 2. Navigate to the RPS folder and build the Docker image. cd .. cd rps docker build . -t rps:v1 Set the Environment Variables \u00b6 3. After building the new MPS and RPS images, navigate to the mps\\scripts\\docker-compose folder and copy the .env.template file to .env. cd .. cd mps/scripts/docker-compose Windows Command: copy .env.template .env Linux Command: cp .env.template .env Note: Preserve the .env.template file. This file is very important to maintain. Always copy to a new file. 4. Open the .env file in a text editor. Set the image-related environment variables within the .env file. Change the following fields: Field Change to RPS_IMAGE rps:v1 MPS_IMAGE mps:v1 MPS_COMMON_NAME Your development system's IP address Note: Forgot the name and tag from the build? The docker images command lists repository names, tags, image IDs, and sizes. docker images Run docker-compose \u00b6 The environment file .env now contains the MPS and RPS environment variables to pass to the Docker engine. 1. Navigate to the the mps/scripts/docker-compose directory. 2. Run the docker-compose up command, which starts the containers. approximately 2-3 minutes to start the containers. docker-compose up 3. Important : While the docker-compose up command is running, you may see a pop-up ask for permission for Docker Desktop Filesharing. You must select Share It for the docker-compose up command to execute successfully. If the pop-up expires, docker-compose up will fail. You must run docker-compose down and then rerun docker-compose up to successfully start the containers. Successful Output: Next up \u00b6 Login to RPS","title":"Build Docker* Images"},{"location":"Docker/dockerLocal/#build-and-deploy-docker-images-for-mps-and-rps-locally","text":"Management Presence Server (MPS) and Remote Provisioning Server (RPS) provide support for deploying the services as Docker* images, standardized packages containing an application's source code, libraries, environment, and dependencies. A Docker container is the instantiation of a Docker image as a virtualized unit that separates the application from the environment. Docker* containers start and run reliably, securely, and portably inside different environments, eliminating some of the usual problems that occur with software deployment on varying platforms. Get more information about Docker images and containers at Docker resources.","title":"Build and Deploy Docker* Images for MPS and RPS Locally"},{"location":"Docker/dockerLocal/#what-youll-do","text":"This section describes how to deploy MPS and RPS as Docker* images on the development system: Clone the repositories. Build the images. Set the environment variables. Run the tool docker-compose tool on a sample configuration file to define and enable a multi-container environment.","title":"What You'll Do"},{"location":"Docker/dockerLocal/#clone-the-mps-and-rps-repositories","text":"Navigate to a directory of your choice for development.","title":"Clone the MPS and RPS Repositories"},{"location":"Docker/dockerLocal/#clone-mps","text":"1. Clone the MPS repository. git clone https://github.com/open-amt-cloud-toolkit/mps.git 2. Checkout the ActivEdge branch. cd mps git checkout ActivEdge","title":"Clone MPS"},{"location":"Docker/dockerLocal/#clone-rps","text":"1.Clone the RPS repository to the same parent directory as MPS. git clone https://github.com/open-amt-cloud-toolkit/rps.git After the git clone commands complete, the parent directory will contain an MPS and RPS folder. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps 2. Checkout the ActivEdge branch. cd rps git checkout ActivEdge","title":"Clone RPS"},{"location":"Docker/dockerLocal/#build-the-docker-images","text":"Build the MPS and RPS Docker images from their respective directories with the build -t command, giving the image a name and tag: docker build . -t [name:tag] Create a name and tag with lowercase letters, digits, and separators (i.e., underscores, periods, and dashes). Do not end a name or tag with a separator. Tags contain up to 128 characters. Note: Building a fresh Docker image may take several minutes.","title":"Build the Docker Images"},{"location":"Docker/dockerLocal/#build-mps","text":"1. Navigate to MPS folder and build the Docker image. cd ../mps docker build . -t mps:v1 Note: On completion, a security warning is normal during local setup with the default values for developer testing environments.","title":"Build MPS"},{"location":"Docker/dockerLocal/#build-rps","text":"2. Navigate to the RPS folder and build the Docker image. cd .. cd rps docker build . -t rps:v1","title":"Build RPS"},{"location":"Docker/dockerLocal/#set-the-environment-variables","text":"3. After building the new MPS and RPS images, navigate to the mps\\scripts\\docker-compose folder and copy the .env.template file to .env. cd .. cd mps/scripts/docker-compose Windows Command: copy .env.template .env Linux Command: cp .env.template .env Note: Preserve the .env.template file. This file is very important to maintain. Always copy to a new file. 4. Open the .env file in a text editor. Set the image-related environment variables within the .env file. Change the following fields: Field Change to RPS_IMAGE rps:v1 MPS_IMAGE mps:v1 MPS_COMMON_NAME Your development system's IP address Note: Forgot the name and tag from the build? The docker images command lists repository names, tags, image IDs, and sizes. docker images","title":"Set the Environment Variables"},{"location":"Docker/dockerLocal/#run-docker-compose","text":"The environment file .env now contains the MPS and RPS environment variables to pass to the Docker engine. 1. Navigate to the the mps/scripts/docker-compose directory. 2. Run the docker-compose up command, which starts the containers. approximately 2-3 minutes to start the containers. docker-compose up 3. Important : While the docker-compose up command is running, you may see a pop-up ask for permission for Docker Desktop Filesharing. You must select Share It for the docker-compose up command to execute successfully. If the pop-up expires, docker-compose up will fail. You must run docker-compose down and then rerun docker-compose up to successfully start the containers. Successful Output:","title":"Run docker-compose"},{"location":"Docker/dockerLocal/#next-up","text":"Login to RPS","title":"Next up"},{"location":"Docker/overview/","text":"Build and Deploy Microservices with Local Docker* Images \u00b6 Overview \u00b6 This section outlines the setup of the Active Edge's microservices and client application. Take this path to install MPS and RPS as Docker images that will function as services on a local system or the cloud as in Figure 1. Figure 1: Microservices deployed as Docker images What You'll Need \u00b6 Hardware At minimum, to install and use Active Edge, a network configuration must include: A development system At least one Intel\u00ae vPro device A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network. Software The development system hosts Management Presence Server (MPS) and Remote Provisioning Server (RPS) and requires the following software: Docker* Desktop for Windows or Linux Docker Configuration Details: The Docker for Windows installer defaults to enable all the requiredsettings for this tutorial. After successful installation, the Docker icon (whale), will appear on thetask bar. To troubleshoot the installation, see the troubleshooting guide . Chrome* Browser git If using a Windows-based Development System, also requires: Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional What You'll Do \u00b6 Follow the steps in these sections sequentially to deploy Docker* images on a local development system: Build and Deploy Docker* Images Locally Configure RPS Build RPC on Managed Device Manage Device Run instructions in these sections can use Microsoft Windows or Linux environments. The terminal may be A) the Windows Command Prompt in Administrator mode or B) the Linux* shell/terminal. Estimated completion time: 15 minutes Next up \u00b6 Build Docker* Images","title":"Overview"},{"location":"Docker/overview/#build-and-deploy-microservices-with-local-docker-images","text":"","title":"Build and Deploy Microservices with Local Docker* Images"},{"location":"Docker/overview/#overview","text":"This section outlines the setup of the Active Edge's microservices and client application. Take this path to install MPS and RPS as Docker images that will function as services on a local system or the cloud as in Figure 1. Figure 1: Microservices deployed as Docker images","title":"Overview"},{"location":"Docker/overview/#what-youll-need","text":"Hardware At minimum, to install and use Active Edge, a network configuration must include: A development system At least one Intel\u00ae vPro device A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network. Software The development system hosts Management Presence Server (MPS) and Remote Provisioning Server (RPS) and requires the following software: Docker* Desktop for Windows or Linux Docker Configuration Details: The Docker for Windows installer defaults to enable all the requiredsettings for this tutorial. After successful installation, the Docker icon (whale), will appear on thetask bar. To troubleshoot the installation, see the troubleshooting guide . Chrome* Browser git If using a Windows-based Development System, also requires: Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional","title":"What You'll Need"},{"location":"Docker/overview/#what-youll-do","text":"Follow the steps in these sections sequentially to deploy Docker* images on a local development system: Build and Deploy Docker* Images Locally Configure RPS Build RPC on Managed Device Manage Device Run instructions in these sections can use Microsoft Windows or Linux environments. The terminal may be A) the Windows Command Prompt in Administrator mode or B) the Linux* shell/terminal. Estimated completion time: 15 minutes","title":"What You'll Do"},{"location":"Docker/overview/#next-up","text":"Build Docker* Images","title":"Next up"},{"location":"General/buildRPC/","text":"Estimated completion time: 30 minutes on Windows 10 devices (20-25 minutes are required installation time estimates) 15 minutes on Linux devices Remote Provisioning Client \u00b6 The Remote Provisioning Client (RPC) communicates with the Manageability Engine Interface (MEI) and RPS interfaces. The MEI uses the ME Driver to talk to Intel AMT. By running RPC, we will activate Intel AMT into Client Control Mode (CCM), or ACM based on the created profile, as well as configure the CIRA connection of the AMT device to the MPS. After successfully running, the AMT device will be ready to be managed remotely using the web interface! Production Environment In a production environment, RPC can be deployed with an in-band manageability agent to distribute it to the fleet of AMT devices. The in-band manageability agent can invoke RPC to run and activate the AMT devices. Clone the Repository \u00b6 On your development system, navigate to a directory of your choice to clone and build RPC. Clone the RPC repository. git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/rpc.git && cd rpc Install Prerequisites \u00b6 Windows Open 'x64 Native Tools Command Prompt for VS 20XX' as Administrator on your development system. This is NOT a regular Windows Command Prompt. This specific tool is used for compiling the RPC executable. Build VCPKG In the rpc directory, clone the Vcpkg repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .01 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command: bootstrap-vcpkg.bat Set up user-wide integration in order to allow Vcpkg to work with Visual Studio. vcpkg integrate install Build CPPRestSDK Make sure you are still in the ../vcpkg directory. Install the C++ REST SDK package using Vcpkg. C++ REST SDK is a library for cloud-based client-server communication with modern API design. Find out more about it here . Note This will take 15\u201325 minutes, depending on download speeds. vcpkg install cpprestsdk:x64-windows-static 3. Navigate back to the ./rpc directory cd .. Linux To install the required dependencies; enter the following command: sudo apt install git cmake build-essential libboost-system-dev libboost-thread-dev libboost-random-dev libboost-regex-dev libboost-filesystem-dev libssl-dev zlib1g-dev Build RPC \u00b6 Create a new directory called build within the ./rpc directory and change to it. mkdir build && cd build Run the following commands to build RPC. Windows Generate the CMake config cmake .. -DVCPKG_TARGET_TRIPLET = x64-windows-static -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake Build the RPC executable cmake --build . --config Debug Change to Debug directory cd Debug Save the rpc.exe file to a flash drive or other means to transfer to the managed device. Linux cmake -DCMAKE_BUILD_TYPE = Debug .. cmake --build . Save the new 'rpc' file in the Build directory to a flash drive or other means to transfer to the managed device. Run RPC to Activate and Connect the AMT Device \u00b6 Using a Flash Drive or other method, transfer the Debug folder to the managed device. On the managed device, run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [Development-IP-Address] with the development system's IP address, where the MPS and RPS servers are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[Development-IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ Development-IP-Address ] :8080 -c \"-t activate --profile [profile-name]\" Example Success Output: Production Environment In a production environment, an in-band agent would invoke this command with the parameters rather than a manual command. Troubleshooting The rpc.exe generates this message: Unable to get activation info. Try again later or check AMT configuration. Verify that the x64 Native Tools Command Prompt for VS 20XX is running in Administrator mode on the managed device. Note If you do not remember your created profile's name, you can navigate to the Profiles tab on the web server hosted at https://[Development-IP-Address]:3000 Default login credentials: Field Value Username standalone Password G@ppm0ym Next up \u00b6 After successfully building RPC activating the managed device, continue to MPS Device Management. Continue here: MPS Device Management","title":"Build & Run RPC (manual)"},{"location":"General/buildRPC/#remote-provisioning-client","text":"The Remote Provisioning Client (RPC) communicates with the Manageability Engine Interface (MEI) and RPS interfaces. The MEI uses the ME Driver to talk to Intel AMT. By running RPC, we will activate Intel AMT into Client Control Mode (CCM), or ACM based on the created profile, as well as configure the CIRA connection of the AMT device to the MPS. After successfully running, the AMT device will be ready to be managed remotely using the web interface! Production Environment In a production environment, RPC can be deployed with an in-band manageability agent to distribute it to the fleet of AMT devices. The in-band manageability agent can invoke RPC to run and activate the AMT devices.","title":"Remote Provisioning Client"},{"location":"General/buildRPC/#clone-the-repository","text":"On your development system, navigate to a directory of your choice to clone and build RPC. Clone the RPC repository. git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/rpc.git && cd rpc","title":"Clone the Repository"},{"location":"General/buildRPC/#install-prerequisites","text":"Windows Open 'x64 Native Tools Command Prompt for VS 20XX' as Administrator on your development system. This is NOT a regular Windows Command Prompt. This specific tool is used for compiling the RPC executable. Build VCPKG In the rpc directory, clone the Vcpkg repository. Vcpkg is a C/C++ Library Manager for Windows that was created by Microsoft. Find out more about it here . git clone --branch 2020 .01 https://github.com/microsoft/vcpkg.git && cd vcpkg Build vcpkg.exe using the following command: bootstrap-vcpkg.bat Set up user-wide integration in order to allow Vcpkg to work with Visual Studio. vcpkg integrate install Build CPPRestSDK Make sure you are still in the ../vcpkg directory. Install the C++ REST SDK package using Vcpkg. C++ REST SDK is a library for cloud-based client-server communication with modern API design. Find out more about it here . Note This will take 15\u201325 minutes, depending on download speeds. vcpkg install cpprestsdk:x64-windows-static 3. Navigate back to the ./rpc directory cd .. Linux To install the required dependencies; enter the following command: sudo apt install git cmake build-essential libboost-system-dev libboost-thread-dev libboost-random-dev libboost-regex-dev libboost-filesystem-dev libssl-dev zlib1g-dev","title":"Install Prerequisites"},{"location":"General/buildRPC/#build-rpc","text":"Create a new directory called build within the ./rpc directory and change to it. mkdir build && cd build Run the following commands to build RPC. Windows Generate the CMake config cmake .. -DVCPKG_TARGET_TRIPLET = x64-windows-static -DCMAKE_TOOLCHAIN_FILE = ../vcpkg/scripts/buildsystems/vcpkg.cmake Build the RPC executable cmake --build . --config Debug Change to Debug directory cd Debug Save the rpc.exe file to a flash drive or other means to transfer to the managed device. Linux cmake -DCMAKE_BUILD_TYPE = Debug .. cmake --build . Save the new 'rpc' file in the Build directory to a flash drive or other means to transfer to the managed device.","title":"Build RPC"},{"location":"General/buildRPC/#run-rpc-to-activate-and-connect-the-amt-device","text":"Using a Flash Drive or other method, transfer the Debug folder to the managed device. On the managed device, run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [Development-IP-Address] with the development system's IP address, where the MPS and RPS servers are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[Development-IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ Development-IP-Address ] :8080 -c \"-t activate --profile [profile-name]\" Example Success Output: Production Environment In a production environment, an in-band agent would invoke this command with the parameters rather than a manual command. Troubleshooting The rpc.exe generates this message: Unable to get activation info. Try again later or check AMT configuration. Verify that the x64 Native Tools Command Prompt for VS 20XX is running in Administrator mode on the managed device. Note If you do not remember your created profile's name, you can navigate to the Profiles tab on the web server hosted at https://[Development-IP-Address]:3000 Default login credentials: Field Value Username standalone Password G@ppm0ym","title":"Run RPC to Activate and Connect the AMT Device"},{"location":"General/buildRPC/#next-up","text":"After successfully building RPC activating the managed device, continue to MPS Device Management. Continue here: MPS Device Management","title":"Next up"},{"location":"General/buildRPC_GithubActions/","text":"Build RPC \u00b6 We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Read more about GitHub Actions here First you'll want to create a fork of the repository. Fork rpc on github Click on \"Actions\" and Select \"Build RPC (Native)\" Workflow Click \"Run Workflow\", select branch \"master\", and click \"Run Workflow\" Grab a coffee, as the build for Windows will take roughly 30 minutes and the build for linux will take roughly 5 minutes. Once complete, click the completed job, and download the appropriate RPC for your OS under the \"Artifacts\" section. Run RPC to Activate and Connect the AMT Device \u00b6 Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [IP-Address] with the IP address of the server where the MPS and RPS services are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ IP-Address ] :8080 -c \"-t activate --profile [profile-name]\"","title":"Build & Run RPC (GitHub Actions)"},{"location":"General/buildRPC_GithubActions/#build-rpc","text":"We leverage GitHub Actions as a means to build RPC automatically leveraging Github's CI/CD Infrastructure. This avoids having to deal with the challenges of getting your build environment just right on your local machine and allows you to get up and running much faster. However, if you wish to do this locally, please follow the instructions here . Read more about GitHub Actions here First you'll want to create a fork of the repository. Fork rpc on github Click on \"Actions\" and Select \"Build RPC (Native)\" Workflow Click \"Run Workflow\", select branch \"master\", and click \"Run Workflow\" Grab a coffee, as the build for Windows will take roughly 30 minutes and the build for linux will take roughly 5 minutes. Once complete, click the completed job, and download the appropriate RPC for your OS under the \"Artifacts\" section.","title":"Build RPC"},{"location":"General/buildRPC_GithubActions/#run-rpc-to-activate-and-connect-the-amt-device","text":"Run RPC with the following command to activate and configure Intel\u00ae AMT. It will take 1-2 minutes to finish provisioning the device. Replace [IP-Address] with the IP address of the server where the MPS and RPS services are running Replace [profile-name] with your created profile from the Web Server. Windows rpc.exe -u wss://[IP-Address]:8080 -c \"-t activate --profile [profile-name]\" Linux sudo ./rpc -u wss:// [ IP-Address ] :8080 -c \"-t activate --profile [profile-name]\"","title":"Run RPC to Activate and Connect the AMT Device"},{"location":"General/createCIRAConfig/","text":"Client Initiated Remote Access (CIRA) enables a CIRA-capable edge device to initiate and establish a persistent connection to the MPS server rather than the MPS server initiating contact with the edge device. This enables access to edge devices that might be harder to reach behind a firewall or a firewall process, such as network address translation (NAT). A CIRA Configuration provides the Remote Provisioning Client (RPC) the required information to establish the edge device's CIRA connection to the MPS Server during the activation process. Select the CIRA Configs tab from the left-hand menu. In the top-right corner, click New. Specify a Config Name of your choice. Select IPV4, and provide your developement system's IP Address. Set Port to the default, 4433. Set User Name and Password to the following: Field Value User Name standalone Password G@ppm0ym Provide your developement system's IP address as the Common Name to generate the self-signed certificate by the MPS server. Leave Mps root certificate format to the default, Auto Load. Click Load under MPS Root Certificate. Click Create. Example Example CIRA Config: Next up \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: Create a Profile in Client Control Mode (CCM): This mode offers nearly all manageability features. However, it does not currently support Keyboard, Video, Mouse Control. For other features, such as Serial-Over-LAN or Storage Redirection (IDE-R, USB-R), user consent is required . Create a Profile in Admin Control Mode (ACM): ACM mode supports the same CCM features in addition to Keyboard, Video, Mouse (KVM) or Redirection without user consent . This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.","title":"Create a CIRA Config"},{"location":"General/createCIRAConfig/#next-up","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Profiles also distinguish between activating in: Create a Profile in Client Control Mode (CCM): This mode offers nearly all manageability features. However, it does not currently support Keyboard, Video, Mouse Control. For other features, such as Serial-Over-LAN or Storage Redirection (IDE-R, USB-R), user consent is required . Create a Profile in Admin Control Mode (ACM): ACM mode supports the same CCM features in addition to Keyboard, Video, Mouse (KVM) or Redirection without user consent . This means it is not necessary to have a person on-site to remote in and manage an edge device. In most IoT use cases, edge devices such as digital signage or kiosks may not be easily accessible or have available employees nearby. ACM mode proves immensely helpful in these scenarios.","title":"Next up"},{"location":"General/createProfileACM/","text":"Intel AMT\u00ae devices are capable of being activated into two modes: Admin Control Mode: In this mode, there are no limitations to Intel AMT functionality. This reflects the higher level of trust associated with these setup methods. Client Control Mode: This mode limits some of Intel AMT functionality, reflecting the lower level of trust. Features requiring User Consent: Keyboard, Video, Mouse (KVM) Control IDE-Redirection for sharing and mounting images remotely What You'll Need \u00b6 Provisioning Certificate By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in Admin Control Mode (ACM). This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Set the Domain Suffix Ways to set the domain suffix of the AMT device: Manually on the AMT device through MEBX, find instructions on how to do it here Set DHCP Option 15 to DNS Suffix within the Router settings Create a Profile \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Specify a Profile Name of your choice. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Select the name of the CIRA Config you created previously from the drop-down menu. Under Activation, select 'Admin Control Mode' from the dropdown menu. Click Create. Create a Domain \u00b6 In addition to creating a CIRA Config and a Profile. A Domain must be created to activate a device into Admin Control Mode. Intel AMT checks the network domain suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. Select the Domains tab from the left-hand menu. In the top-right corner, click New. Specify a Domain Name of your choice. Provide your Domain Suffix. This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. Click Browse and select your purchased Provisioning Certificate. This certificate must contain the private key. Provide the Password of the Provisioning Certificate used to encrypt the .pfx file. Click Create. Example Example Domain: After successfully creating the domain, continue with the activation process by building and running the Remote Provisioning Client (RPC). Next Up \u00b6 Build RPC on a Managed Device","title":"Create a Profile with ACM"},{"location":"General/createProfileACM/#what-youll-need","text":"Provisioning Certificate By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in Admin Control Mode (ACM). This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Set the Domain Suffix Ways to set the domain suffix of the AMT device: Manually on the AMT device through MEBX, find instructions on how to do it here Set DHCP Option 15 to DNS Suffix within the Router settings","title":"What You'll Need"},{"location":"General/createProfileACM/#create-a-profile","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Specify a Profile Name of your choice. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Select the name of the CIRA Config you created previously from the drop-down menu. Under Activation, select 'Admin Control Mode' from the dropdown menu. Click Create.","title":"Create a Profile"},{"location":"General/createProfileACM/#create-a-domain","text":"In addition to creating a CIRA Config and a Profile. A Domain must be created to activate a device into Admin Control Mode. Intel AMT checks the network domain suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. Select the Domains tab from the left-hand menu. In the top-right corner, click New. Specify a Domain Name of your choice. Provide your Domain Suffix. This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. Click Browse and select your purchased Provisioning Certificate. This certificate must contain the private key. Provide the Password of the Provisioning Certificate used to encrypt the .pfx file. Click Create. Example Example Domain: After successfully creating the domain, continue with the activation process by building and running the Remote Provisioning Client (RPC).","title":"Create a Domain"},{"location":"General/createProfileACM/#next-up","text":"Build RPC on a Managed Device","title":"Next Up"},{"location":"General/createProfileCCM/","text":"Create a Profile \u00b6 Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Specify a Profile Name of your choice. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Select the name of the CIRA Config you created previously from the drop-down menu. Under Activation, select 'Client Control Mode' from the dropdown menu. Click Create. Example Example Profile: Next up \u00b6 Build RPC","title":"Create a Profile with CCM"},{"location":"General/createProfileCCM/#create-a-profile","text":"Select the Profiles tab from the menu on the left. Under the Profiles tab, click New in the top-right corner to create a profile. Specify a Profile Name of your choice. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. Provide a strong AMT Password. Important This password must meet standard, strong password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character Select the name of the CIRA Config you created previously from the drop-down menu. Under Activation, select 'Client Control Mode' from the dropdown menu. Click Create. Example Example Profile:","title":"Create a Profile"},{"location":"General/createProfileCCM/#next-up","text":"Build RPC","title":"Next up"},{"location":"General/loginToRPS/","text":"Log in to the Web Server \u00b6 Open Chrome* browser and navigate to the web server using your development system's IP address on port 3000. https://[Development-IP-Address]:3000 Important You must use an IP Address to connect to the web server. Using localhost will not work. Because we are using self-signed certificates, we will be prompted by a warning screen. Click Advanced, then Proceed to continue to connect to the webserver. Log in to the web portal with the credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym Select Remote Provisioning Server on the web portal. Next up \u00b6 Create a CIRA Config","title":"Login to RPS"},{"location":"General/loginToRPS/#log-in-to-the-web-server","text":"Open Chrome* browser and navigate to the web server using your development system's IP address on port 3000. https://[Development-IP-Address]:3000 Important You must use an IP Address to connect to the web server. Using localhost will not work. Because we are using self-signed certificates, we will be prompted by a warning screen. Click Advanced, then Proceed to continue to connect to the webserver. Log in to the web portal with the credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym Select Remote Provisioning Server on the web portal.","title":"Log in to the Web Server"},{"location":"General/loginToRPS/#next-up","text":"Create a CIRA Config","title":"Next up"},{"location":"General/manageDevice/","text":"Estimated completion time: 5 minutes Manage the Intel\u00ae AMT Device using MPS \u00b6 1. On your development system, browse to the web server using the development system's IP Address. Example URL: https://[Development-IP-Address]:3000 2. Log in with the default credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym 3. After logging in, click on Management Presence Server. If already logged in, click the Home icon in the top left corner. 4. Click the devices tab from the menu on the left, or click Connected in the default homepage. Note: If the activated device is not listed or if it is listed as unconnected, unplug and then plug back in the power of the AMT device. After succesfully restarting the device, refresh the WebUI to see if the Status changes to Connected and turns green. 5. Select the checkbox by the connected device you want to manage. 6. Select an action to perform from the options on the right. Note: Since the device was activated in Client Control Mode(CCM), the KVM feature will not function in this current release. To use KVM, follow the ACM Activation Tutorial to see how to configure a device into Admin Control Mode. Note: Activated in Admin Control Mode already? Try out the Keyboard, Video, Mouse (KVM) feature to remotely view and control the AMT device. Issue a Reset to BIOS command and be able to view and make live changes to BIOS settings. Next steps \u00b6 After successfully deploying the Active Edge microservices and client, explore other tools and topics in the Active Edge architecture: REST API Calls \u00b6 Use the REST API tutorial to construct an Admin method API call to connected devices using node.js. Then modify the template to create other MPS REST API calls. Get Started with REST API Calls UI Toolkit \u00b6 Explore the Active Edge reference implementation console by adding manageability features with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit Security \u00b6 Learn how to use Active Edge architecture to secure assets. Topics include credentials, allowlisting, best known security methods, and more. Learn More about Security and Hardening","title":"MPS Device Management"},{"location":"General/manageDevice/#manage-the-intel-amt-device-using-mps","text":"1. On your development system, browse to the web server using the development system's IP Address. Example URL: https://[Development-IP-Address]:3000 2. Log in with the default credentials below. Default credentials: Field Value Username standalone Password G@ppm0ym 3. After logging in, click on Management Presence Server. If already logged in, click the Home icon in the top left corner. 4. Click the devices tab from the menu on the left, or click Connected in the default homepage. Note: If the activated device is not listed or if it is listed as unconnected, unplug and then plug back in the power of the AMT device. After succesfully restarting the device, refresh the WebUI to see if the Status changes to Connected and turns green. 5. Select the checkbox by the connected device you want to manage. 6. Select an action to perform from the options on the right. Note: Since the device was activated in Client Control Mode(CCM), the KVM feature will not function in this current release. To use KVM, follow the ACM Activation Tutorial to see how to configure a device into Admin Control Mode. Note: Activated in Admin Control Mode already? Try out the Keyboard, Video, Mouse (KVM) feature to remotely view and control the AMT device. Issue a Reset to BIOS command and be able to view and make live changes to BIOS settings.","title":"Manage the Intel&reg; AMT Device using MPS"},{"location":"General/manageDevice/#next-steps","text":"After successfully deploying the Active Edge microservices and client, explore other tools and topics in the Active Edge architecture:","title":"Next steps"},{"location":"General/manageDevice/#rest-api-calls","text":"Use the REST API tutorial to construct an Admin method API call to connected devices using node.js. Then modify the template to create other MPS REST API calls. Get Started with REST API Calls","title":"REST API Calls"},{"location":"General/manageDevice/#ui-toolkit","text":"Explore the Active Edge reference implementation console by adding manageability features with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"UI Toolkit"},{"location":"General/manageDevice/#security","text":"Learn how to use Active Edge architecture to secure assets. Topics include credentials, allowlisting, best known security methods, and more. Learn More about Security and Hardening","title":"Security"},{"location":"Local/installMPS/","text":"The Management Presence Server (MPS) is a cloud-agnostic microservice that enables platforms featuring Intel\u00ae AMT to be managed over the internet. This section details how to set up the MPS on a development system. Figure 1 illustrates where MPS fits into the overall microservice architecture. Figure 1: Deploy Management Presence Server (MPS) on a development system. Clone the Repository \u00b6 To clone a repository: Open a Command Prompt or Terminal and navigate to a directory of your choice for development. Clone the MPS repository and navigate to it with the following commands: git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/mps.git && cd mps Modify MPS Configuration File \u00b6 To modify the MPS configuration file: Open the .mpsrc file, within the mps directory, using a text editor of your choice to configure settings, such as Notepad on Windows or Text Editor on Linux . Configure the following settings: Field Change to Description use_allowlist false A value of false disables the allowlist functionaliy. For information about allowlist, see the allowlist tutorial common_name Development system's IP address. Note: For this guide, you cannot use localhost because the managed device would be unable to reach the MPS and RPS servers. For this guide, the address will be used in a self-signed certificate. It may be an IP address or FQDN in real world deployment. Save and close the file. Example Example .mpsrc file: { \"use_allowlist\" : false , \"common_name\" : \"192.168.0.8\" , \"port\" : 4433 , \"username\" : \"standalone\" , \"pass\" : \"G@ppm0ym\" , \"use_global_mps_credentials\" : true , \"country\" : \"US\" , \"company\" : \"NoCorp\" , \"debug\" : true , \"listen_any\" : true , \"https\" : true , \"tls_offload\" : false , \"web_port\" : 3000 , \"generate_certificates\" : true , \"logger_off\" : false , \"web_admin_user\" : \"standalone\" , \"web_admin_password\" : \"G@ppm0ym\" , \"vault_address\" : \"http://localhost:8200\" , \"vault_token\" : \"myroot\" , \"use_vault\" : true , \"secrets_path\" : \"secret/data/\" , \"cert_format\" : \"file\" , \"data_path\" : \"../private/data.json\" , \"cert_path\" : \"../private\" , \"mpsxapikey\" : \"APIKEYFORMPS123!\" , \"mps_tls_config\" : { \"key\" : \"../private/mpsserver-cert-private.key\" , \"cert\" : \"../private/mpsserver-cert-public.crt\" , \"requestCert\" : true , \"rejectUnauthorized\" : false , \"minVersion\" : \"TLSv1\" , \"ciphers\" : null , \"secureOptions\" : [ \"SSL_OP_NO_SSLv2\" , \"SSL_OP_NO_SSLv3\" ] }, \"web_tls_config\" : { \"key\" : \"../private/mpsserver-cert-private.key\" , \"cert\" : \"../private/mpsserver-cert-public.crt\" , \"ca\" : [ \"../private/root-cert-public.crt\" ], \"secureOptions\" : [ \"SSL_OP_NO_SSLv2\" , \"SSL_OP_NO_SSLv3\" , \"SSL_OP_NO_COMPRESSION\" , \"SSL_OP_CIPHER_SERVER_PREFERENCE\" , \"SSL_OP_NO_TLSv1\" , \"SSL_OP_NO_TLSv11\" ] } } Configure the WebUI \u00b6 To configure the WebUI: Navigate to the src directory in .\\mps\\webui\\src\\ cd webui/src Open the app.config.js file using a text editor to configure IP Address settings. Replace the localhost for both rpsServerIP and serverIP with your development system's IP Address. Save and close the file. Example const validExtensions = [ '.png' , '.jpeg' , '.jpg' , '.svg' ]; const port = process . env . REACT_APP_MPS_WEB_PORT ? process . env . REACT_APP_MPS_WEB_PORT : 3000 ; const rpsPort = process . env . REACT_APP_RPS_WEB_PORT ? process . env . REACT_APP_RPS_WEB_PORT : 8081 ; const rpsServerIP = process . env . REACT_APP_RPS_SERVER ? process . env . REACT_APP_RPS_SERVER : '192.168.0.8' ; const serverIP = process . env . REACT_APP_MPS_SERVER ? process . env . REACT_APP_MPS_SERVER : '192.168.0.8' ; const mpsAPIKey = process . env . REACT_APP_MPSXAPIKEY ? process . env . REACT_APP_MPSXAPIKEY : 'APIKEYFORMPS123!' ; const rpsAPIKey = process . env . REACT_APP_RPSXAPIKEY ? process . env . REACT_APP_RPSXAPIKEY : 'APIKEYFORRPS123!' const Config = { ... }; Navigate back to the ./mps root directory. Run the install commands to install all required dependencies. npm install Start the MPS Server \u00b6 To start the MPS server: Run the the following command: npm run dev Figure 2 demonstrates successful deployment. The web server runs on port 3000 by default, and the MPS Server listens on port 4433. It will take approximately 2\u20133 minutes to start. Note The development system's IP Address will be used to connect to the web server. Figure 2: MPS reports successful deployment. Note Because the generateCertificates field is set to true in the .mpsrc file, certificates will be generated and stored in the ../mps/private directory.","title":"Install MPS Locally"},{"location":"Local/installMPS/#clone-the-repository","text":"To clone a repository: Open a Command Prompt or Terminal and navigate to a directory of your choice for development. Clone the MPS repository and navigate to it with the following commands: git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/mps.git && cd mps","title":"Clone the Repository"},{"location":"Local/installMPS/#modify-mps-configuration-file","text":"To modify the MPS configuration file: Open the .mpsrc file, within the mps directory, using a text editor of your choice to configure settings, such as Notepad on Windows or Text Editor on Linux . Configure the following settings: Field Change to Description use_allowlist false A value of false disables the allowlist functionaliy. For information about allowlist, see the allowlist tutorial common_name Development system's IP address. Note: For this guide, you cannot use localhost because the managed device would be unable to reach the MPS and RPS servers. For this guide, the address will be used in a self-signed certificate. It may be an IP address or FQDN in real world deployment. Save and close the file. Example Example .mpsrc file: { \"use_allowlist\" : false , \"common_name\" : \"192.168.0.8\" , \"port\" : 4433 , \"username\" : \"standalone\" , \"pass\" : \"G@ppm0ym\" , \"use_global_mps_credentials\" : true , \"country\" : \"US\" , \"company\" : \"NoCorp\" , \"debug\" : true , \"listen_any\" : true , \"https\" : true , \"tls_offload\" : false , \"web_port\" : 3000 , \"generate_certificates\" : true , \"logger_off\" : false , \"web_admin_user\" : \"standalone\" , \"web_admin_password\" : \"G@ppm0ym\" , \"vault_address\" : \"http://localhost:8200\" , \"vault_token\" : \"myroot\" , \"use_vault\" : true , \"secrets_path\" : \"secret/data/\" , \"cert_format\" : \"file\" , \"data_path\" : \"../private/data.json\" , \"cert_path\" : \"../private\" , \"mpsxapikey\" : \"APIKEYFORMPS123!\" , \"mps_tls_config\" : { \"key\" : \"../private/mpsserver-cert-private.key\" , \"cert\" : \"../private/mpsserver-cert-public.crt\" , \"requestCert\" : true , \"rejectUnauthorized\" : false , \"minVersion\" : \"TLSv1\" , \"ciphers\" : null , \"secureOptions\" : [ \"SSL_OP_NO_SSLv2\" , \"SSL_OP_NO_SSLv3\" ] }, \"web_tls_config\" : { \"key\" : \"../private/mpsserver-cert-private.key\" , \"cert\" : \"../private/mpsserver-cert-public.crt\" , \"ca\" : [ \"../private/root-cert-public.crt\" ], \"secureOptions\" : [ \"SSL_OP_NO_SSLv2\" , \"SSL_OP_NO_SSLv3\" , \"SSL_OP_NO_COMPRESSION\" , \"SSL_OP_CIPHER_SERVER_PREFERENCE\" , \"SSL_OP_NO_TLSv1\" , \"SSL_OP_NO_TLSv11\" ] } }","title":"Modify MPS Configuration File"},{"location":"Local/installMPS/#configure-the-webui","text":"To configure the WebUI: Navigate to the src directory in .\\mps\\webui\\src\\ cd webui/src Open the app.config.js file using a text editor to configure IP Address settings. Replace the localhost for both rpsServerIP and serverIP with your development system's IP Address. Save and close the file. Example const validExtensions = [ '.png' , '.jpeg' , '.jpg' , '.svg' ]; const port = process . env . REACT_APP_MPS_WEB_PORT ? process . env . REACT_APP_MPS_WEB_PORT : 3000 ; const rpsPort = process . env . REACT_APP_RPS_WEB_PORT ? process . env . REACT_APP_RPS_WEB_PORT : 8081 ; const rpsServerIP = process . env . REACT_APP_RPS_SERVER ? process . env . REACT_APP_RPS_SERVER : '192.168.0.8' ; const serverIP = process . env . REACT_APP_MPS_SERVER ? process . env . REACT_APP_MPS_SERVER : '192.168.0.8' ; const mpsAPIKey = process . env . REACT_APP_MPSXAPIKEY ? process . env . REACT_APP_MPSXAPIKEY : 'APIKEYFORMPS123!' ; const rpsAPIKey = process . env . REACT_APP_RPSXAPIKEY ? process . env . REACT_APP_RPSXAPIKEY : 'APIKEYFORRPS123!' const Config = { ... }; Navigate back to the ./mps root directory. Run the install commands to install all required dependencies. npm install","title":"Configure the WebUI"},{"location":"Local/installMPS/#start-the-mps-server","text":"To start the MPS server: Run the the following command: npm run dev Figure 2 demonstrates successful deployment. The web server runs on port 3000 by default, and the MPS Server listens on port 4433. It will take approximately 2\u20133 minutes to start. Note The development system's IP Address will be used to connect to the web server. Figure 2: MPS reports successful deployment. Note Because the generateCertificates field is set to true in the .mpsrc file, certificates will be generated and stored in the ../mps/private directory.","title":"Start the MPS Server"},{"location":"Local/installRPS/","text":"The Remote Provisioning Service (RPS) is a microservice based on Node.js*. The RPS works with the Remote Provisioning Client (RPC) to activate Intel\u00ae AMT platforms using a pre-defined profile. Figure 1 illustrates where RPS fits into the overall microservice architecture. Figure 1: Deploy Remote Provisioning Server (RPS) on a development system. Clone the Repository \u00b6 To clone the repository: Open a new Command Prompt or a Terminal. The MPS server will continue to run in your previous Command Prompt or Terminal. Clone the RPS repository to the same parent directory where the mps directory is located. git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/rps.git && cd rps Warning Do not nest a microservice directory inside another microservice directory. The source code contains relative paths. The correct directory structure appears below, where parent is the your installation directory. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps Start the RPS Server \u00b6 To start the RPS: In the rps directory, run the install command to install all required dependencies. npm install Then, start the server. By default, the RPS web port is 8080. npm run dev Note Warning messages are okay and expected for optional dependencies. Example Output: Figure 2: RPS reports successful deployment. Next up \u00b6 Login to RPS","title":"Install RPS Locally"},{"location":"Local/installRPS/#clone-the-repository","text":"To clone the repository: Open a new Command Prompt or a Terminal. The MPS server will continue to run in your previous Command Prompt or Terminal. Clone the RPS repository to the same parent directory where the mps directory is located. git clone --branch ActivEdge https://github.com/open-amt-cloud-toolkit/rps.git && cd rps Warning Do not nest a microservice directory inside another microservice directory. The source code contains relative paths. The correct directory structure appears below, where parent is the your installation directory. \ud83d\udce6parent \u2523 \ud83d\udcc2mps \u2517 \ud83d\udcc2rps","title":"Clone the Repository"},{"location":"Local/installRPS/#start-the-rps-server","text":"To start the RPS: In the rps directory, run the install command to install all required dependencies. npm install Then, start the server. By default, the RPS web port is 8080. npm run dev Note Warning messages are okay and expected for optional dependencies. Example Output: Figure 2: RPS reports successful deployment.","title":"Start the RPS Server"},{"location":"Local/installRPS/#next-up","text":"Login to RPS","title":"Next up"},{"location":"Local/overview/","text":"Build and Deploy Microservices Locally \u00b6 This section contains the instructions for deploying Active Edge's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system. These Hello World deployment instructions detail how to install the microservices manually. Figure 1: Deploy microservices on a local development system. What You'll Need \u00b6 Hardware \u00b6 Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel\u00ae vPro device to manage A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network. Development System Software \u00b6 Before MPS and RPS installation, install the following software: Chrome* Browser git Node.js* LTS 12.x.x or newer Intel\u00ae vPro Managed Device Software \u00b6 Before Remote Provisioning Client (RPC) installation, install the following software: git Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional Note Running Microsoft* Visual Studio on a managed device to build the RPC is for demo purposes. This is not typical for production environments. What You'll Do \u00b6 To complete a Hello World microservice deployment: Install MPS Locally Install RPS Locally Login and Configure RPS Build RPC Manage Device To connect the managed device: Build and Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes Next up \u00b6 Install MPS Locally","title":"Overview"},{"location":"Local/overview/#build-and-deploy-microservices-locally","text":"This section contains the instructions for deploying Active Edge's Management Presence Server (MPS) and Remote Provisioning Server (RPS) on a local development system. These Hello World deployment instructions detail how to install the microservices manually. Figure 1: Deploy microservices on a local development system.","title":"Build and Deploy Microservices Locally"},{"location":"Local/overview/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Local/overview/#hardware","text":"Configure a network that includes: A development system running Windows\u00ae 10 or Ubuntu* 18.04 or newer At least one Intel\u00ae vPro device to manage A flash drive or equivalent means to transfer files between Both systems must use a wired (i.e., cable) connection on the same network.","title":"Hardware"},{"location":"Local/overview/#development-system-software","text":"Before MPS and RPS installation, install the following software: Chrome* Browser git Node.js* LTS 12.x.x or newer","title":"Development System Software"},{"location":"Local/overview/#intel-vpro-managed-device-software","text":"Before Remote Provisioning Client (RPC) installation, install the following software: git Microsoft Visual Studio* : 2019 or newer version of Visual Studio Community/Professional Note Running Microsoft* Visual Studio on a managed device to build the RPC is for demo purposes. This is not typical for production environments.","title":"Intel\u00ae vPro Managed Device Software"},{"location":"Local/overview/#what-youll-do","text":"To complete a Hello World microservice deployment: Install MPS Locally Install RPS Locally Login and Configure RPS Build RPC Manage Device To connect the managed device: Build and Run RPC on a Managed Device Manage the Device with MPS These sections include instructions for Windows and Linux environments. Run instructions in a terminal window, the Windows Command Prompt in Administrator mode or the Linux shell/terminal. Estimated completion time: 15 minutes","title":"What You'll Do"},{"location":"Local/overview/#next-up","text":"Install MPS Locally","title":"Next up"},{"location":"Topics/guids/","text":"GUIDs in Intel\u00ae AMT \u00b6 Each Intel\u00ae AMT device has a Global Unique Identifier (GUID) assigned to it by default. This GUID will be used as the reference to each device record. Typically, device GUIDs are required to perform power actions and other device-specific manageability features. There are a number of ways to obtain the GUID on the Intel\u00ae AMT device: WebUI of Active Edge ConnectedDevices API Method Via WebUI \u00b6 1. Login to your Management Presence Server through the WebUI. 2. Navigate to the Devices tab. 3. Your AMT device's GUID is listed in the 2nd column. Via API Method \u00b6 A device's GUID can also be found via the AllDevices or ConnectedDevices MPS methods. Users can follow the Construct a Rest API Call tutorial on constructing and running the ConnectedDevices method as an example. Example ConnectedDevices Output: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"GUIDs in Intel AMT"},{"location":"Topics/guids/#guids-in-intel-amt","text":"Each Intel\u00ae AMT device has a Global Unique Identifier (GUID) assigned to it by default. This GUID will be used as the reference to each device record. Typically, device GUIDs are required to perform power actions and other device-specific manageability features. There are a number of ways to obtain the GUID on the Intel\u00ae AMT device: WebUI of Active Edge ConnectedDevices API Method","title":"GUIDs in Intel&reg; AMT"},{"location":"Topics/guids/#via-webui","text":"1. Login to your Management Presence Server through the WebUI. 2. Navigate to the Devices tab. 3. Your AMT device's GUID is listed in the 2nd column.","title":"Via WebUI"},{"location":"Topics/guids/#via-api-method","text":"A device's GUID can also be found via the AllDevices or ConnectedDevices MPS methods. Users can follow the Construct a Rest API Call tutorial on constructing and running the ConnectedDevices method as an example. Example ConnectedDevices Output: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"Via API Method"},{"location":"Topics/mebx/","text":"Manageability Engine BIOS Extensions (MEBX) \u00b6 Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually. Set a DNS Suffix through MEBX \u00b6 If DHCP option15 is not set, the following needs to be set manually through MEBX if you want to re-activate the device remotely at a later time. 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen Note If it is the first time entering MEBX and the device has not been provisioned previously, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Remote Setup and Configuration\u2019 5. Select \u2018TLS PKI\u2019 6. Select \u2018PKI DNS Suffix\u2019 7. Provide a DNS suffix name and press enter 8. Press Esc three times to reach the main menu 9. Select \u2018MEBX Exit\u2019, and then press 'y' to confirm the exit Unprovision an AMT Device Through MEBX \u00b6 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen Note If it is the first time entering MEBX, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Intel AMT configuration\u2019 5. Select \u2018Unconfigure Network access\u2019 6. Select \u2018Full unprovision\u2019, and then press 'y' to continue 7. It takes 30 seconds to a minute to unprovision the device. While it is unprovisioning, the up/down arrow keys will not work.","title":"Manually Configure and Unprovision"},{"location":"Topics/mebx/#manageability-engine-bios-extensions-mebx","text":"Intel MEBX allows for configuration of the Intel Manageability Engine (ME) platform. Through this interface, you can provision AMT and customize a variety of settings manually.","title":"Manageability Engine BIOS Extensions (MEBX)"},{"location":"Topics/mebx/#set-a-dns-suffix-through-mebx","text":"If DHCP option15 is not set, the following needs to be set manually through MEBX if you want to re-activate the device remotely at a later time. 1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen Note If it is the first time entering MEBX and the device has not been provisioned previously, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Remote Setup and Configuration\u2019 5. Select \u2018TLS PKI\u2019 6. Select \u2018PKI DNS Suffix\u2019 7. Provide a DNS suffix name and press enter 8. Press Esc three times to reach the main menu 9. Select \u2018MEBX Exit\u2019, and then press 'y' to confirm the exit","title":"Set a DNS Suffix through MEBX"},{"location":"Topics/mebx/#unprovision-an-amt-device-through-mebx","text":"1. Restart or power on the device 2. While the device is booting up, press Ctrl+P to reach the MEBX login screen Note If it is the first time entering MEBX, the defaut password is admin . It will prompt you to create a new password. 4. Select \u2018Intel AMT configuration\u2019 5. Select \u2018Unconfigure Network access\u2019 6. Select \u2018Full unprovision\u2019, and then press 'y' to continue 7. It takes 30 seconds to a minute to unprovision the device. While it is unprovisioning, the up/down arrow keys will not work.","title":"Unprovision an AMT Device Through MEBX"},{"location":"Topics/misc/","text":"Miscellaneous Temporary Content \u00b6 Create Certs and Build Images \u00b6 Comment: Intro here... Clone the Repository \u00b6 Go to XXX-URL-HERE-XXX and use your GitHub credentials to download a .zip file of the branch. After downloading, unzip the files to your local folder. NOTE/COMMENT: *The following is for internal testing use for those with impcloud access. It must be modified to the released branch when code is public. https://github.com/open-amt-cloud-toolkit/mps.git cd mps git checkout add-helm-support-changes2 Note If you see authentication failure with git clone, make sure your git credetnials works correctly using browser. You can connect to your github account with ssh keys using these instructions: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh Create Static IPs and Certificates \u00b6 Open Command Prompt as an Administrator. Change directory to the ..\\scripts\\kubernetes folder within the MPS repository that was downloaded and unzipped. cd [path-to-MPS_MicroService-repo-folder]\\scripts\\kubernetes In this directory, run the following .bat script to create the required IPs and Certificates for MPS and RPS. Provide a new password of your choice for your private keys and save and/or remember it. createipsandcerts.bat [resource-group-name] [aks-cluster-name] [your-private-keys-password] Copy and save the outputted MPS Static IP Address, RPS Static IP Address, and Node Resource Group from the script. Sample output: C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"MPS IP ADDRESS\" 13. 87.225.246 C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"RPS IP ADDRESS\" 13. 87.226.61 C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"Node Resource Group\" MC_matt-rg_matt-aks_westus Creating kubectl secrets with name \"mpscerts\" and keys rootCA_mps.key rootCA_mps.crt mps_cert. key mps_cert.crt secret/mpscerts created Creating kubectl secrets with name \"rpscerts\" and keys rootCA_rps.key rootCA_rps.crt rps_cert. key rps_cert.crt secret/rpscerts created At this point, all of your cert key names are stored in your Kubernetes secret store. When building the stack, we will pull them down.","title":"Static and Dynamic IPs"},{"location":"Topics/misc/#miscellaneous-temporary-content","text":"","title":"Miscellaneous Temporary Content"},{"location":"Topics/misc/#create-certs-and-build-images","text":"Comment: Intro here...","title":"Create Certs and Build Images"},{"location":"Topics/misc/#clone-the-repository","text":"Go to XXX-URL-HERE-XXX and use your GitHub credentials to download a .zip file of the branch. After downloading, unzip the files to your local folder. NOTE/COMMENT: *The following is for internal testing use for those with impcloud access. It must be modified to the released branch when code is public. https://github.com/open-amt-cloud-toolkit/mps.git cd mps git checkout add-helm-support-changes2 Note If you see authentication failure with git clone, make sure your git credetnials works correctly using browser. You can connect to your github account with ssh keys using these instructions: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh","title":"Clone the Repository"},{"location":"Topics/misc/#create-static-ips-and-certificates","text":"Open Command Prompt as an Administrator. Change directory to the ..\\scripts\\kubernetes folder within the MPS repository that was downloaded and unzipped. cd [path-to-MPS_MicroService-repo-folder]\\scripts\\kubernetes In this directory, run the following .bat script to create the required IPs and Certificates for MPS and RPS. Provide a new password of your choice for your private keys and save and/or remember it. createipsandcerts.bat [resource-group-name] [aks-cluster-name] [your-private-keys-password] Copy and save the outputted MPS Static IP Address, RPS Static IP Address, and Node Resource Group from the script. Sample output: C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"MPS IP ADDRESS\" 13. 87.225.246 C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"RPS IP ADDRESS\" 13. 87.226.61 C:\\quickstart\\MPS_MicroService-add-helm-support-changes2\\scripts\\kubernetes>\"Node Resource Group\" MC_matt-rg_matt-aks_westus Creating kubectl secrets with name \"mpscerts\" and keys rootCA_mps.key rootCA_mps.crt mps_cert. key mps_cert.crt secret/mpscerts created Creating kubectl secrets with name \"rpscerts\" and keys rootCA_rps.key rootCA_rps.crt rps_cert. key rps_cert.crt secret/rpscerts created At this point, all of your cert key names are stored in your Kubernetes secret store. When building the stack, we will pull them down.","title":"Create Static IPs and Certificates"},{"location":"Topics/proxies/","text":"Proxies \u00b6 MPS \u00b6 RPS \u00b6 RPC \u00b6","title":"Proxies"},{"location":"Topics/proxies/#proxies","text":"","title":"Proxies"},{"location":"Topics/proxies/#mps","text":"","title":"MPS"},{"location":"Topics/proxies/#rps","text":"","title":"RPS"},{"location":"Topics/proxies/#rpc","text":"","title":"RPC"},{"location":"Tutorials/acmActivation/","text":"Intel AMT\u00ae devices are capable of being activated into two modes: Client Control Mode: This mode limits some of Intel AMT functionality, reflecting the lower level of trust. Features requiring User Consent: Keyboard, Video, Mouse (KVM) Control IDE-Redirection for sharing and mounting images remotely Admin Control Mode: In this mode, there are no limitations to Intel AMT functionality. This reflects the higher level of trust associated with these setup methods. What You'll Need \u00b6 Provisioning Certificate By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in Admin Control Mode (ACM). This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Set the Domain Suffix Ways to set the domain suffix of the AMT device: Manually on the AMT device through MEBX, find instructions on how to do it here Set DHCP Option 15 to DNS Suffix within the Router settings Important Note: This tutorial assumes both the MPS and RPS servers were successfully set up and running. If not, please refer to Get Started with Local Microservices to begin. Create a Profile \u00b6 Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. 1. Select the Profiles tab from the menu on the left. 2. Under the Profiles tab, click New in the top-right corner to create a profile. 3. Specify a Profile Name of your choice. 4. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. 5. Provide a strong AMT Password. Note: This password must meet standard, 'strong' password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character 6. Select the name of the CIRA Config you created previously from the drop-down menu. 7. Under Activation, select 'Admin Control Mode' from the dropdown menu. Note: If you'd prefer to activate the device into Admin Control Mode (ACM), click here . 8. Click Create. Create a Domain \u00b6 In addition to creating a CIRA Config and a Profile. A Domain must be created to activate a device into Admin Control Mode. Intel AMT checks the network domain suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. 1. Select the Domains tab from the left-hand menu. 2. In the top-right corner, click New. 3. Specify a Domain Name of your choice. 4. Provide your Domain Suffix. This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. 5. Click Browse and select your purchased Provisioning Certificate. This certificate must contain the private key. 6. Provide the Password of the Provisioning Certificate used to encrypt the .pfx file. 7. Click Create. Example Domain: After successfully creating the domain, continue with the activation process by building and running the Remote Provisioning Client (RPC). Next Up \u00b6 Build RPC on a Managed Device","title":"acmActivation"},{"location":"Tutorials/acmActivation/#what-youll-need","text":"Provisioning Certificate By purchasing a certificate, you'll be able to remotely activate an Intel AMT device in Admin Control Mode (ACM). This feature enables you to disable User Consent. Provisioning Certificates are available from four different Certificate Authorities: Comodo DigiCert Entrust GoDaddy Set the Domain Suffix Ways to set the domain suffix of the AMT device: Manually on the AMT device through MEBX, find instructions on how to do it here Set DHCP Option 15 to DNS Suffix within the Router settings Important Note: This tutorial assumes both the MPS and RPS servers were successfully set up and running. If not, please refer to Get Started with Local Microservices to begin.","title":"What You'll Need"},{"location":"Tutorials/acmActivation/#create-a-profile","text":"Profiles provide configuration information to the AMT Firmware during the activation process with the Remote Provisioning Client (RPC). Production Environment In a production environment, devices are typically activated in ACM mode. ACM mode enables KVM access to devices without user consent. In most IoT use cases, edge devices such as digital signage or kiosks may not have immediate access to it or employees nearby. ACM mode proves immensely helpful in these scenarios. 1. Select the Profiles tab from the menu on the left. 2. Under the Profiles tab, click New in the top-right corner to create a profile. 3. Specify a Profile Name of your choice. 4. Uncheck Generate Random Password. Production Environment In a production environment, you typically generate a random password for each AMT device to create a stronger, more secure AMT environment. 5. Provide a strong AMT Password. Note: This password must meet standard, 'strong' password requirements: 8 to 32 characters One uppercase, one lowercase, one numerical digit, one special character 6. Select the name of the CIRA Config you created previously from the drop-down menu. 7. Under Activation, select 'Admin Control Mode' from the dropdown menu. Note: If you'd prefer to activate the device into Admin Control Mode (ACM), click here . 8. Click Create.","title":"Create a Profile"},{"location":"Tutorials/acmActivation/#create-a-domain","text":"In addition to creating a CIRA Config and a Profile. A Domain must be created to activate a device into Admin Control Mode. Intel AMT checks the network domain suffix against the provisioning certificate as a security check. During provisioning, the trusted certificate chain is injected into the AMT firmware. AMT verifies that the certificate chain is complete and is signed by a trusted certificate authority. 1. Select the Domains tab from the left-hand menu. 2. In the top-right corner, click New. 3. Specify a Domain Name of your choice. 4. Provide your Domain Suffix. This is the actual DNS Suffix of the network domain that is set in DHCP Option 15 or manually on the AMT device through MEBX. 5. Click Browse and select your purchased Provisioning Certificate. This certificate must contain the private key. 6. Provide the Password of the Provisioning Certificate used to encrypt the .pfx file. 7. Click Create. Example Domain: After successfully creating the domain, continue with the activation process by building and running the Remote Provisioning Client (RPC).","title":"Create a Domain"},{"location":"Tutorials/acmActivation/#next-up","text":"Build RPC on a Managed Device","title":"Next Up"},{"location":"Tutorials/addDatabase/","text":"RPS has the option to output device configuration information to a database so that other software components with access to this database can lookup and use the AMT credentials stored there. Since there are many database options available, RPS takes a flexible approach that allows a developer to implement a simple module in RPS that will allow RPS to then send data to the database implementation of choice. The following example uses MongoDB as the example database, but the same concepts could be used for other database implementations. Create a file called AmtDeviceMongoDbRepository.ts in the \\RPS_MicroServer\\src\\repositories folder This module will need to implement the MongoDB types from mongodb and ILogger, AMTDeviceDTO, and IAMTDeviceWriter from RPS. Below is an example of how this could be implemented: // we imported all types from mongodb driver, to use in code import { MongoClient , Client , Collection , InsertOneWriteOpResult } from 'mongodb' ; import { ILogger } from '../interfaces/ILogger' ; import { AMTDeviceDTO } from './dto/AmtDeviceDTO' ; import { IAMTDeviceWriter } from './interfaces/IAMTDeviceWriter' ; // that class only can be extended export class AmtDeviceMongoDbRepository implements IAMTDeviceWriter { private collection : Collection ; private client : Client ; private connectionString : string ; private databaseName : string ; private collectionName : string ; private logger : ILogger ; constructor ( logger : ILogger , connectionString : string , databaseName : string , collectionName : string ) { this . connectionString = connectionString ; this . databaseName = databaseName ; this . collectionName = collectionName ; this . logger = logger ; } async connect () { let connection = await MongoClient . connect ( this . connectionString , { useNewUrlParser : true }); let database = connection . db ( this . databaseName ); this . collection = database . collection ( this . collectionName ); } disconnect () { if ( this . client ) { this . client . disconnect (); } } public async insert ( device : AMTDeviceDTO ) : Promise < boolean > { try { if ( ! this . collection ) { await this . connect (); } let result : InsertOneWriteOpResult = await this . collection . insertOne ( device ); return !! result . result . ok ; } catch ( error ) { this . logger . error ( `exception inserting record: ${ JSON . stringify ( error ) } ` ); return false ; } } } Edit the file index.ts in \\RPS_MicroServer\\src\\ and import the implementation of database module. For example: import { AmtDeviceMongoDbRepository } from './repositories/AmtDeviceMongoDbRepository' ; Edit the file index.ts in \\RPS_MicroServer\\src\\ and set the amtDeviceWriter object to an instance of the repository (under configurator.isAMTDeviceWriterEnabled() located in line 35). For example: amtDeviceWriter = new AmtDeviceMongoDbRepository ( Logger ( \"AmtDeviceMongoDbRepository\" ), configurator . DbConfig . connectionString , configurator . DbConfig . databaseName configurator . DbConfig . collectionName ); Edit the file package.json and add \"mongodb\": \"^3.3.12\" under dev dependencies. Edit app.config.dev.json database info DbConfig: Configure the Database \u00b6 The DbConfig section configures how RPS connects to a database, which we're not doing for this exercise. Set DbEnabled to false , if it isn't already. Option Description DbEnabled Set to true to enable database integration. To use GenerateRandomPassword for an Intel\u00ae AMT profile, DbEnabled must be set to true. connectionString Specifies how RPS should connect to the database. If DbEnabled is set to true , this is required. databaseName Specifies the name of the database that RPS should use. If DbEnabled is set to true , this is required. collectionName Specifies the collection in the database that RPS should use. If DbEnabled is set to true , this is required.","title":"Add a Database"},{"location":"Tutorials/addDatabase/#dbconfig-configure-the-database","text":"The DbConfig section configures how RPS connects to a database, which we're not doing for this exercise. Set DbEnabled to false , if it isn't already. Option Description DbEnabled Set to true to enable database integration. To use GenerateRandomPassword for an Intel\u00ae AMT profile, DbEnabled must be set to true. connectionString Specifies how RPS should connect to the database. If DbEnabled is set to true , this is required. databaseName Specifies the name of the database that RPS should use. If DbEnabled is set to true , this is required. collectionName Specifies the collection in the database that RPS should use. If DbEnabled is set to true , this is required.","title":"DbConfig: Configure the Database"},{"location":"Tutorials/addVault/","text":"Install Vault \u00b6 Create a folder in a directory of your choice, and browse to it using a Command Prompt or terminal window (as Administrator, if on Windows). Clone the following Vault-helm repository and install it. git clone https://github.com/hashicorp/vault-helm.git cd vault-helm git checkout v0.2.1 helm install vault . Periodically, check the status of the vault pod until it is in the Running state. Copy and save the Vault Pod's name. Usually, the Vault pod is named 'vault-0'. The Vault Pod's name is shown in the first column of the kubectl get pods command. kubectl get pods An example of the pod status is below: NAME READY STATUS RESTARTS AGE vault-0 0/1 Running 0 114s Initialize the vault using the following command: kubectl exec -it [vault-pod-name] -- vault operator init -n 1 -t 1 On completion, the output will display the Unseal Key and Initial Root Token. Copy and save both values for future use. These values will be used to unseal and enable the Vault as well as create the necessary secrets. Unseal Key 1: MG+pLyiasq11B/o7hEbctkrTIpGaVDqja3SWJzSLgs0= Initial Root Token: s.Wvxni2SudRB0R91fLOaGFS6h Vault initialized with 1 key shares and a key threshold of 1. Please securely distribute the key shares printed above. When the Vault is re-sealed, restarted, or stopped, you must supply at least 1 of these keys to unseal it before it can start servicing requests. Unseal Vault \u00b6 Unseal the Vault using your Unseal Key 1 in your Command Prompt or terminal window. kubectl exec -it [vault-pod-name] -- vault operator unseal [unseal-key-1-from-init-command] Example Output: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.2.4 Cluster Name vault-cluster-9a51d062 Cluster ID 3a25afe3-ad48-e8bf-1afa-c924f046c746 HA Enabled false Enable Vault at a Path \u00b6 For this example, we are going to use a key/value secrets engine. Enable it using the following commands: Log in to Vault using your initial root token from initializing Vault in Step 3.i.5 kubectl exec -it [vault-pod-name] -- vault login [your-initial-root-token] Then, enable the 'kv' secrets engine. kubectl exec -it [vault-pod-name] -- vault secrets enable -version=2 kv","title":"Add Vault Storage"},{"location":"Tutorials/addVault/#install-vault","text":"Create a folder in a directory of your choice, and browse to it using a Command Prompt or terminal window (as Administrator, if on Windows). Clone the following Vault-helm repository and install it. git clone https://github.com/hashicorp/vault-helm.git cd vault-helm git checkout v0.2.1 helm install vault . Periodically, check the status of the vault pod until it is in the Running state. Copy and save the Vault Pod's name. Usually, the Vault pod is named 'vault-0'. The Vault Pod's name is shown in the first column of the kubectl get pods command. kubectl get pods An example of the pod status is below: NAME READY STATUS RESTARTS AGE vault-0 0/1 Running 0 114s Initialize the vault using the following command: kubectl exec -it [vault-pod-name] -- vault operator init -n 1 -t 1 On completion, the output will display the Unseal Key and Initial Root Token. Copy and save both values for future use. These values will be used to unseal and enable the Vault as well as create the necessary secrets. Unseal Key 1: MG+pLyiasq11B/o7hEbctkrTIpGaVDqja3SWJzSLgs0= Initial Root Token: s.Wvxni2SudRB0R91fLOaGFS6h Vault initialized with 1 key shares and a key threshold of 1. Please securely distribute the key shares printed above. When the Vault is re-sealed, restarted, or stopped, you must supply at least 1 of these keys to unseal it before it can start servicing requests.","title":"Install Vault"},{"location":"Tutorials/addVault/#unseal-vault","text":"Unseal the Vault using your Unseal Key 1 in your Command Prompt or terminal window. kubectl exec -it [vault-pod-name] -- vault operator unseal [unseal-key-1-from-init-command] Example Output: Key Value --- ----- Seal Type shamir Initialized true Sealed false Total Shares 1 Threshold 1 Version 1.2.4 Cluster Name vault-cluster-9a51d062 Cluster ID 3a25afe3-ad48-e8bf-1afa-c924f046c746 HA Enabled false","title":"Unseal Vault"},{"location":"Tutorials/addVault/#enable-vault-at-a-path","text":"For this example, we are going to use a key/value secrets engine. Enable it using the following commands: Log in to Vault using your initial root token from initializing Vault in Step 3.i.5 kubectl exec -it [vault-pod-name] -- vault login [your-initial-root-token] Then, enable the 'kv' secrets engine. kubectl exec -it [vault-pod-name] -- vault secrets enable -version=2 kv","title":"Enable Vault at a Path"},{"location":"Tutorials/allowlist/","text":"Add/Modify guids.json \u00b6 If use_allowlist is set to true in the config.json file, add a guids.json file in the private directory to allowlist those Intel\u00ae AMT GUIDs that are allowed to connect to MPS. Use guids.json.example as a reference to create the guids.json and populate it with guids to allowlist. This file is used to simulate allowlisting based on Intel\u00ae AMT GUIDs. For information on how to obtain GUIDs, see GUIDs in Intel\u00ae AMT . Navigate to the ~/MPS/private directory. cd ~/MPS/private Create the guids.json file. copy guids.json.example guids.json Open the guids.json file. Edit this file to include the GUIDs of your AMT devices. You can find specific GUIDs using MeshCmd on the AMT device. Example guids.json file: [ \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"12345678-9abc-def1-2345-123456789000\" ]","title":"Use an Allowlist"},{"location":"Tutorials/allowlist/#addmodify-guidsjson","text":"If use_allowlist is set to true in the config.json file, add a guids.json file in the private directory to allowlist those Intel\u00ae AMT GUIDs that are allowed to connect to MPS. Use guids.json.example as a reference to create the guids.json and populate it with guids to allowlist. This file is used to simulate allowlisting based on Intel\u00ae AMT GUIDs. For information on how to obtain GUIDs, see GUIDs in Intel\u00ae AMT . Navigate to the ~/MPS/private directory. cd ~/MPS/private Create the guids.json file. copy guids.json.example guids.json Open the guids.json file. Edit this file to include the GUIDs of your AMT devices. You can find specific GUIDs using MeshCmd on the AMT device. Example guids.json file: [ \"8dad96cb-c3db-11e6-9c43-bc0000d20000\" , \"12345678-9abc-def1-2345-123456789000\" ]","title":"Add/Modify guids.json"},{"location":"Tutorials/apiTutorial/","text":"This tutorial demonstrates how to construct an Admin method API call for ConnectedDevices using Node.js. The ConnectedDevices method will retrieve information about connected devices, including device GUIDs. Figure 1: Admin Method API Call for Connected Devices Note: Successfully deploy the Management Presence Server (MPS) and Remote Provisioning Server (RPS) and connect an Intel\u00ae vPro device to MPS before constructing the API call. Start here to install microservices locally or here to install microservices locally with Docker*. Modify the tutorial template to implement other MPS REST APIs by changing these values: method payload path View all available MPS methods here . What You'll Need \u00b6 Hardware A minimum network configuration must include: A Development system with Windows\u00ae 10 or Ubuntu 18.04 or newer An Activated and Configured Intel\u00ae vPro device as the managed device Software on the Development System MPS RPS Node.js LTS 12.x.x or newer Visual Studio Code or any other IDE What You'll Do \u00b6 The following sections describe how to: Construct an Admin API Call to MPS for connected devices View Device GUIDs Construct an Admin Method API Call for Connected Devices \u00b6 1. Navigate to a file directory of your choice. 2. Create and open a new JavaScript file with a name of your choice. In this guide we will refer to it as SampleAPI.js*. 3. Copy and paste the example code below. 4. Replace MPS-Server-IP-Address with the IP Address of your development system or MPS server. Note: The ConnectedDevices method uses the admin path. MPS methods use either admin or amt as the path. View the difference and all MPS methods here . Security Information By running MPS in Dev Mode, authentication is disabled for testing and demonstration purposes. In production, the MPS certificate needs to be signed by a Certificate Authority. Also, an API Key value must be given in the headers of the API request. Example Example SampleAPI.js file: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end () Execute the REST API \u00b6 1. Open a Command Prompt or Terminal to execute the call. 2. Navigate to the directory you saved the SampleAPI.js file. 3. Run the code snippet using node. node SampleAPI.js Example Response: Important This is one way to retrieve a device's GUID in the host field. For amt path methods (i.e. Power Actions, Audit Logs, etc), the device GUID is required as part of the POST data. Save this value if you want to try other MPS methods. Other ways to retrieve a GUID can be found here . Example Example Command Prompt Output: response : [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" } ] Example JSON Pretty Print: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }] Construct Other MPS Methods \u00b6 To adapt the above code snippet to work with a different MPS method of your choice, follow the below steps. Select a method from the MPS API Documentation Update the method field in postData with the name of the method. Copy and paste the payload if the method requires it. If necessary, replace the guid field inside the payload with the AMT device's GUID. Update the path field to either /admin or /amt Save and run the Javascript file. Example Highlighted fields should be updated: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end () Other Methods \u00b6 The sample Node code snippet can be adapted for other MPS and RPS methods. To learn more, see: MPS Methods to manage a device . RPS Methods for server configuration and provisioning . Explore the UI Toolkit \u00b6 In addition to REST API calls, Active Edge provides a reference implementation console. Add manageability features to the console with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"Construct a REST API Call"},{"location":"Tutorials/apiTutorial/#what-youll-need","text":"Hardware A minimum network configuration must include: A Development system with Windows\u00ae 10 or Ubuntu 18.04 or newer An Activated and Configured Intel\u00ae vPro device as the managed device Software on the Development System MPS RPS Node.js LTS 12.x.x or newer Visual Studio Code or any other IDE","title":"What You'll Need"},{"location":"Tutorials/apiTutorial/#what-youll-do","text":"The following sections describe how to: Construct an Admin API Call to MPS for connected devices View Device GUIDs","title":"What You'll Do"},{"location":"Tutorials/apiTutorial/#construct-an-admin-method-api-call-for-connected-devices","text":"1. Navigate to a file directory of your choice. 2. Create and open a new JavaScript file with a name of your choice. In this guide we will refer to it as SampleAPI.js*. 3. Copy and paste the example code below. 4. Replace MPS-Server-IP-Address with the IP Address of your development system or MPS server. Note: The ConnectedDevices method uses the admin path. MPS methods use either admin or amt as the path. View the difference and all MPS methods here . Security Information By running MPS in Dev Mode, authentication is disabled for testing and demonstration purposes. In production, the MPS certificate needs to be signed by a Certificate Authority. Also, an API Key value must be given in the headers of the API request. Example Example SampleAPI.js file: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end ()","title":"Construct an Admin Method API Call for Connected Devices"},{"location":"Tutorials/apiTutorial/#execute-the-rest-api","text":"1. Open a Command Prompt or Terminal to execute the call. 2. Navigate to the directory you saved the SampleAPI.js file. 3. Run the code snippet using node. node SampleAPI.js Example Response: Important This is one way to retrieve a device's GUID in the host field. For amt path methods (i.e. Power Actions, Audit Logs, etc), the device GUID is required as part of the POST data. Save this value if you want to try other MPS methods. Other ways to retrieve a GUID can be found here . Example Example Command Prompt Output: response : [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" } ] Example JSON Pretty Print: [{ \"host\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" , \"amtuser\" : \"admin\" , \"mpsuser\" : \"standalone\" , \"icon\" : 1 , \"conn\" : 1 , \"name\" : \"d12428be-9fa1-4226-9784-54b2038beab6\" }]","title":"Execute the REST API"},{"location":"Tutorials/apiTutorial/#construct-other-mps-methods","text":"To adapt the above code snippet to work with a different MPS method of your choice, follow the below steps. Select a method from the MPS API Documentation Update the method field in postData with the name of the method. Copy and paste the payload if the method requires it. If necessary, replace the guid field inside the payload with the AMT device's GUID. Update the path field to either /admin or /amt Save and run the Javascript file. Example Highlighted fields should be updated: const https = require ( 'https' ) process . env [ 'NODE_TLS_REJECT_UNAUTHORIZED' ] = 0 //For testing with self-signed certs, remove for production let postData = { 'method' : 'ConnectedDevices' , //Retrieve all Devices Connected to MPS 'payload' : { //Some methods such as PowerAction require a payload. //This one does not as it just retrieves data of all connected devices. } } const options = { hostname : 'MPS-Server-IP-Address' , //Your Development System's IP or MPS Server IP port : '3000' , path : '/admin' , //Supports admin and amt paths. See MPS API Docs for which to use for other different methods. method : 'POST' , headers : { 'Content-Type' : 'application/json' , 'X-MPS-API-KEY' : 'APIKEYFORMPS123!' } } const req = https . request ( options , ( res ) => { res . setEncoding ( 'utf8' ) res . on ( 'data' , ( chunk ) => { console . log ( chunk ) }) res . on ( 'end' , () => { console . log ( 'No more data in response.' ) }) }) req . on ( 'error' , ( e ) => { console . error ( `problem with request: ${ e . message } ` ) }) // Write data to request body req . write ( JSON . stringify ( postData )) req . end ()","title":"Construct Other MPS Methods"},{"location":"Tutorials/apiTutorial/#other-methods","text":"The sample Node code snippet can be adapted for other MPS and RPS methods. To learn more, see: MPS Methods to manage a device . RPS Methods for server configuration and provisioning .","title":"Other Methods"},{"location":"Tutorials/apiTutorial/#explore-the-ui-toolkit","text":"In addition to REST API calls, Active Edge provides a reference implementation console. Add manageability features to the console with prebuilt React components, such as Keyboard, Video, and Mouse (KVM). Get Started with the UI Toolkit","title":"Explore the UI Toolkit"},{"location":"Tutorials/uitoolkit/","text":"Add MPS UI Toolkit Controls to a WebUI \u00b6 The UI Toolkit allows developers to add manageability features to a console with prebuilt React components. The code snippets simplify the task of adding complex manageability UI controls, such as the Keyboard, Video, Mouse (KVM). A sample web application, based on React.js, is provided for test and development. The tutorial outlines how to add various controls to the sample React web application provided. Developers can use the sample code below as a springboard for developing their own consoles. What You'll Need \u00b6 Hardware \u00b6 At minimum, to install and utilize the Active Edge microservices, a network configuration must include: A development system with Windows 10 or Ubuntu 18.04 or newer At least one Intel\u00ae vPro device Software \u00b6 MPS , the Management Presence Server RPS , the Remote Provisioning Server Intel\u00ae vPro device, configured and connected to MPS Note Instructions on how to set up the MPS and RPS servers to connect a vPro device can be followed in the Local or Local Docker Build and Deploy Guides. The development system requires the following software: Chrome* Browser git Visual Studio Code or any other IDE Node.js* LTS 12.x.x or newer What You'll Do \u00b6 Follow the steps in these sections sequentially: Create a new React app Add UI controls to the React app Create a New React App \u00b6 The React app can be created in any preferred development directory. The MPS can continue to run while creating and running the app. In a Command Prompt or Terminal, go to your preferred development directory. Run the following commands to create sample React app named my-app . npx create-react-app my-app cd my-app Add UI Toolkit \u00b6 Run the following command to add the UI Toolkit and install the required dependencies: npm install git+https://github.com/open-amt-cloud-toolkit/ui-toolkit.git#ActivEdge --save Run the following commands to start the web UI locally: npm start By default, React apps run on port 3000 . If port 3000 is already used by the MPS server or any other application, you'll be prompted to use another port. If this happens, enter 'Y'. Sample Output: ``` You can now view my-app in the browser. Local: http://localhost:3001 On Your Network: http://172.16.17.4:3001 ``` Note By default, React launches in your machine's default browser. However for best experience, navigate to the page using a Chromium based web browser. When you make changes, you do not need to stop the application and restart. It will update and refresh automatically as you make code changes. Add a Sample Control \u00b6 The following sections outline how to add controls. To use the code snippets provided, replace what is in the App.js file with the provided code snippet. Refresh the web browser after adding a control if it does not update automatically after a few seconds. Add Keyboard, Video, Mouse (KVM) Redirection \u00b6 The code snippet below adds KVM control to the React application. Open ./my-app/src/App.js in a text editor or IDE of choice, such as Visual Studio Code or Notepad. Delete the current code and replace with the code snippet below. Change the following values: Field Value deviceId Replace the example deviceId value with the GUID of the Intel AMT device activated and connected to your MPS server. Information on obtaining a GUID can be found here . mpsServer Replace the localhost with the IP Address of your Development Device or MPS Server. Default MPS Server port is 3000. import React from \"react\" ; import logo from \"./logo.svg\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //Replace with AMT Device GUID mpsServer = \"localhost:3000/relay\" //Replace 'localhost' with Development System or MPS Server IP mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ; Save and close the file. If the React app is still open in the browser and hasn't updated, refresh the page. If not already open, open Chrome and navigate to the given URLs from your successful output. By default it is https://localhost:3001 if MPS is running on Port 3000 already. You are now able to remotely control your Intel AMT device. Other controls such as device audit logs or profiles for RPS have example code below to test with. Add Other Controls \u00b6 The following sections outline how to add controls. To use the code snippets provided, replace what is in App.js file with the code snippet. Refresh the app after adding a control. Add Audit Log Control \u00b6 The following code snippet shows how to add Audit Log control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import logo from \"./logo.svg\" ; import \"./App.css\" ; import { AuditLog , MpsProvider } from \"ui-toolkit\" ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < AuditLog deviceId = \"038d0240-045c-05f4-7706-980700080009\" mpsServer = \"localhost:3000\" >< /AuditLog> < /MpsProvider> < /div> ); } export default App ; Add Device Grid Control \u00b6 The following code snippet shows how to add Device Grid control to the React application. Open src/App.js , add the following code as show below: Note Change mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { DeviceGrid , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < DeviceGrid mpsServer = \"localhost:3000\" >< /DeviceGrid> < /MpsProvider> < /div> ); } export default App ; Add Serial Over LAN Control \u00b6 The following code snippet shows how to add Serial Over LAN control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { SOL , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < SOL deviceId = \"038d0240-045c-05f4-7706-980700080009\" mpsServer = \"localhost:3000\" >< /SOL> < /MpsProvider> < /div> ); } export default App ; Add Profile Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { Profile , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < Profile rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ; Add CIRA configs Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { CiraEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < CiraEditor rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ; Add Domain Control \u00b6 Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port import React from \"react\" ; import { DomainEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < DomainEditor rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ; Test the changes \u00b6 At a command prompt navigate to the root of react app, and run the web UI locally if it has been stopped: npm start Go to the chrome browser, ensure controls shows up correctly. You will see the errors in the following scenario's: compilation errors if ui-toolkit has not downloaded and installed to your react app. MPS/RPS server not running, appropriate controls fail to work. MPS server running and device not connected. If your browser is IE / Edge, there might be some compatibility issues. Customize and create bundles \u00b6 AuditLog KVM Device Grid Serial Over LAN Profile Editor CIRA Configs Domains License Note \u00b6 If you are distributing the FortAwesome Icons, please provide attribution to the source per the CC-by 4.0 license obligations.","title":"Create Consoles with the UI Toolkit"},{"location":"Tutorials/uitoolkit/#add-mps-ui-toolkit-controls-to-a-webui","text":"The UI Toolkit allows developers to add manageability features to a console with prebuilt React components. The code snippets simplify the task of adding complex manageability UI controls, such as the Keyboard, Video, Mouse (KVM). A sample web application, based on React.js, is provided for test and development. The tutorial outlines how to add various controls to the sample React web application provided. Developers can use the sample code below as a springboard for developing their own consoles.","title":"Add MPS UI Toolkit Controls to a WebUI"},{"location":"Tutorials/uitoolkit/#what-youll-need","text":"","title":"What You'll Need"},{"location":"Tutorials/uitoolkit/#hardware","text":"At minimum, to install and utilize the Active Edge microservices, a network configuration must include: A development system with Windows 10 or Ubuntu 18.04 or newer At least one Intel\u00ae vPro device","title":"Hardware"},{"location":"Tutorials/uitoolkit/#software","text":"MPS , the Management Presence Server RPS , the Remote Provisioning Server Intel\u00ae vPro device, configured and connected to MPS Note Instructions on how to set up the MPS and RPS servers to connect a vPro device can be followed in the Local or Local Docker Build and Deploy Guides. The development system requires the following software: Chrome* Browser git Visual Studio Code or any other IDE Node.js* LTS 12.x.x or newer","title":"Software"},{"location":"Tutorials/uitoolkit/#what-youll-do","text":"Follow the steps in these sections sequentially: Create a new React app Add UI controls to the React app","title":"What You'll Do"},{"location":"Tutorials/uitoolkit/#create-a-new-react-app","text":"The React app can be created in any preferred development directory. The MPS can continue to run while creating and running the app. In a Command Prompt or Terminal, go to your preferred development directory. Run the following commands to create sample React app named my-app . npx create-react-app my-app cd my-app","title":"Create a New React App"},{"location":"Tutorials/uitoolkit/#add-ui-toolkit","text":"Run the following command to add the UI Toolkit and install the required dependencies: npm install git+https://github.com/open-amt-cloud-toolkit/ui-toolkit.git#ActivEdge --save Run the following commands to start the web UI locally: npm start By default, React apps run on port 3000 . If port 3000 is already used by the MPS server or any other application, you'll be prompted to use another port. If this happens, enter 'Y'. Sample Output: ``` You can now view my-app in the browser. Local: http://localhost:3001 On Your Network: http://172.16.17.4:3001 ``` Note By default, React launches in your machine's default browser. However for best experience, navigate to the page using a Chromium based web browser. When you make changes, you do not need to stop the application and restart. It will update and refresh automatically as you make code changes.","title":"Add UI Toolkit"},{"location":"Tutorials/uitoolkit/#add-a-sample-control","text":"The following sections outline how to add controls. To use the code snippets provided, replace what is in the App.js file with the provided code snippet. Refresh the web browser after adding a control if it does not update automatically after a few seconds.","title":"Add a Sample Control"},{"location":"Tutorials/uitoolkit/#add-keyboard-video-mouse-kvm-redirection","text":"The code snippet below adds KVM control to the React application. Open ./my-app/src/App.js in a text editor or IDE of choice, such as Visual Studio Code or Notepad. Delete the current code and replace with the code snippet below. Change the following values: Field Value deviceId Replace the example deviceId value with the GUID of the Intel AMT device activated and connected to your MPS server. Information on obtaining a GUID can be found here . mpsServer Replace the localhost with the IP Address of your Development Device or MPS Server. Default MPS Server port is 3000. import React from \"react\" ; import logo from \"./logo.svg\" ; import \"./App.css\" ; import { KVM , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < KVM deviceId = \"038d0240-045c-05f4-7706-980700080009\" //Replace with AMT Device GUID mpsServer = \"localhost:3000/relay\" //Replace 'localhost' with Development System or MPS Server IP mouseDebounceTime = \"200\" canvasHeight = \"100%\" canvasWidth = \"100%\" >< /KVM> < /MpsProvider> < /div> ); } export default App ; Save and close the file. If the React app is still open in the browser and hasn't updated, refresh the page. If not already open, open Chrome and navigate to the given URLs from your successful output. By default it is https://localhost:3001 if MPS is running on Port 3000 already. You are now able to remotely control your Intel AMT device. Other controls such as device audit logs or profiles for RPS have example code below to test with.","title":"Add Keyboard, Video, Mouse (KVM) Redirection"},{"location":"Tutorials/uitoolkit/#add-other-controls","text":"The following sections outline how to add controls. To use the code snippets provided, replace what is in App.js file with the code snippet. Refresh the app after adding a control.","title":"Add Other Controls"},{"location":"Tutorials/uitoolkit/#add-audit-log-control","text":"The following code snippet shows how to add Audit Log control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import logo from \"./logo.svg\" ; import \"./App.css\" ; import { AuditLog , MpsProvider } from \"ui-toolkit\" ; function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div className = \"App\" > < MpsProvider data = { data } > < AuditLog deviceId = \"038d0240-045c-05f4-7706-980700080009\" mpsServer = \"localhost:3000\" >< /AuditLog> < /MpsProvider> < /div> ); } export default App ;","title":"Add Audit Log Control"},{"location":"Tutorials/uitoolkit/#add-device-grid-control","text":"The following code snippet shows how to add Device Grid control to the React application. Open src/App.js , add the following code as show below: Note Change mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { DeviceGrid , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < DeviceGrid mpsServer = \"localhost:3000\" >< /DeviceGrid> < /MpsProvider> < /div> ); } export default App ;","title":"Add Device Grid Control"},{"location":"Tutorials/uitoolkit/#add-serial-over-lan-control","text":"The following code snippet shows how to add Serial Over LAN control to the React application. Open src/App.js , add the following code as show below: Note Change deviceId value to your device GUID mpsServer value to your MPS server address and appropriate port. import React from \"react\" ; import { SOL , MpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { mpsKey : '<MPS API key>' }; return ( < div > < MpsProvider data = { data } > < SOL deviceId = \"038d0240-045c-05f4-7706-980700080009\" mpsServer = \"localhost:3000\" >< /SOL> < /MpsProvider> < /div> ); } export default App ;","title":"Add Serial Over LAN Control"},{"location":"Tutorials/uitoolkit/#add-profile-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { Profile , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < Profile rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add Profile Control"},{"location":"Tutorials/uitoolkit/#add-cira-configs-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port. import React from \"react\" ; import { CiraEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < CiraEditor rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add CIRA configs Control"},{"location":"Tutorials/uitoolkit/#add-domain-control","text":"Open src/App.js , add the following code as show below: Note Change rpsServer value to your RPS server address and appropriate port import React from \"react\" ; import { DomainEditor , RpsProvider } from \"ui-toolkit\" ; import '../node_modules/ui-toolkit/i18n.ts' function App () { const data = { rpsKey : '<RPS API key>' }; return ( < div > < RpsProvider data = { data } > < DomainEditor rpsServer = \"http://localhost:8081\" /> < /RpsProvider> < /div> ); } export default App ;","title":"Add Domain Control"},{"location":"Tutorials/uitoolkit/#test-the-changes","text":"At a command prompt navigate to the root of react app, and run the web UI locally if it has been stopped: npm start Go to the chrome browser, ensure controls shows up correctly. You will see the errors in the following scenario's: compilation errors if ui-toolkit has not downloaded and installed to your react app. MPS/RPS server not running, appropriate controls fail to work. MPS server running and device not connected. If your browser is IE / Edge, there might be some compatibility issues.","title":"Test the changes"},{"location":"Tutorials/uitoolkit/#customize-and-create-bundles","text":"AuditLog KVM Device Grid Serial Over LAN Profile Editor CIRA Configs Domains","title":"Customize and create bundles"},{"location":"Tutorials/uitoolkit/#license-note","text":"If you are distributing the FortAwesome Icons, please provide attribution to the source per the CC-by 4.0 license obligations.","title":"License Note"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/","text":"Quickstart - To Bundle CIRA configs Control \u00b6 This document shows how to bundle CIRA configs control and display it on a sample html page for testing. how to customize the control how to create a bundle for CIRA configs control how to add to sample html how to add a new language for Internalization Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome Download and Install UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize the control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to following URL http://localhost:8080/cira.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port Create Bundle for CIRA configs \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing cira.core.min.js in dist/ npm run build A new cira.core.min.js will be created in dist/ directory. To bundle the cira configs control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the CIRA configs control on a sample web page, update following changes to the existing src/sample/sampleCIRA.htm page. <body> <div id=\"ciraroot\"></div> <script src=\"../../dist/cira.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleCIRA.htm?server=<rps IPaddress>:<rps port> Add a new Language for Internationalization \u00b6 Please refer to Localization docs ## Run RPS server in DEV mode To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Quickstart - To Bundle CIRA configs Control"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#quickstart-to-bundle-cira-configs-control","text":"This document shows how to bundle CIRA configs control and display it on a sample html page for testing. how to customize the control how to create a bundle for CIRA configs control how to add to sample html how to add a new language for Internalization","title":"Quickstart - To Bundle CIRA configs Control"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#download-and-install-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#customize-the-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to following URL http://localhost:8080/cira.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port","title":"Customize the control"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#create-bundle-for-cira-configs","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing cira.core.min.js in dist/ npm run build A new cira.core.min.js will be created in dist/ directory. To bundle the cira configs control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for CIRA configs"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#add-to-sample-html-page","text":"To display the CIRA configs control on a sample web page, update following changes to the existing src/sample/sampleCIRA.htm page. <body> <div id=\"ciraroot\"></div> <script src=\"../../dist/cira.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#test-the-sample-page","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleCIRA.htm?server=<rps IPaddress>:<rps port>","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/CIRAConfigs/#add-a-new-language-for-internationalization","text":"Please refer to Localization docs ## Run RPS server in DEV mode To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Add a new Language for Internationalization"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/","text":"Quickstart - To run devicegrid in development enviroment and bundle devicegrid control. \u00b6 This document shows how to run devicegrid in devlopment enviroment and bundle devicegrid control and display it on sample html page. how to customize the control how to create a bundle for devicegrid control. how to add to sample html file. how to add a new language for Internalization Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser Download and Install MPS UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start -Open the browser and navigate http://localhost:8080/device.htm?deviceId= &server= : Create Bundle for devicegrid \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing device.core.min.js in dist/ npm run build A new device.core.min.js will be created in dist/ directory. To bundle the device grid control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the Device Grid control on a sample web page, update following changes to the existing src/sample/sampleDG.htm page. <body> <div id=\"dgroot\"></div> <script src=\"../../dist/device.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleDG.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if mps-ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected. Add a new Language for Internationalization \u00b6 Please refer to Localization docs","title":"Quickstart  - To run devicegrid in development enviroment and bundle devicegrid control."},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#quickstart-to-run-devicegrid-in-development-enviroment-and-bundle-devicegrid-control","text":"This document shows how to run devicegrid in devlopment enviroment and bundle devicegrid control and display it on sample html page. how to customize the control how to create a bundle for devicegrid control. how to add to sample html file. how to add a new language for Internalization","title":"Quickstart  - To run devicegrid in development enviroment and bundle devicegrid control."},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#download-and-install-mps-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install MPS UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#customize-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start -Open the browser and navigate http://localhost:8080/device.htm?deviceId= &server= :","title":"Customize control"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#create-bundle-for-devicegrid","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing device.core.min.js in dist/ npm run build A new device.core.min.js will be created in dist/ directory. To bundle the device grid control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for devicegrid"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#add-to-sample-html-page","text":"To display the Device Grid control on a sample web page, update following changes to the existing src/sample/sampleDG.htm page. <body> <div id=\"dgroot\"></div> <script src=\"../../dist/device.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#test-the-sample-page","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleDG.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if mps-ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/DeviceGrid/#add-a-new-language-for-internationalization","text":"Please refer to Localization docs","title":"Add a new Language for Internationalization"},{"location":"Tutorials/uitoolkitDocs/Domains/","text":"Quickstart - To Bundle Domain Control \u00b6 This document shows how to bundle Domain control and display it on a sample html page for testing. how to customize the control how to create a bundle for Domain control how to add to sample html how to add a new language for Internalization Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome Download and Install UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize the control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to following URL http://localhost:8080/domain.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port Create Bundle for Domain \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing domain.core.min.js in dist/ npm run build A new domain.core.min.js will be created in dist/ directory. To bundle the domain control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the Domain control on a sample web page, update following changes to the existing src/sample/sampleDomain.htm page. <body> <div id=\"domainroot\"></div> <script src=\"../../dist/domain.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleDomains.htm?server=<rps IPaddress>:<rps port> Add a new Language for Internationalization \u00b6 Please refer to Localization docs ## Run RPS server in DEV mode To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Quickstart - To Bundle Domain Control"},{"location":"Tutorials/uitoolkitDocs/Domains/#quickstart-to-bundle-domain-control","text":"This document shows how to bundle Domain control and display it on a sample html page for testing. how to customize the control how to create a bundle for Domain control how to add to sample html how to add a new language for Internalization","title":"Quickstart - To Bundle Domain Control"},{"location":"Tutorials/uitoolkitDocs/Domains/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/Domains/#download-and-install-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/Domains/#customize-the-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to following URL http://localhost:8080/domain.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port","title":"Customize the control"},{"location":"Tutorials/uitoolkitDocs/Domains/#create-bundle-for-domain","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing domain.core.min.js in dist/ npm run build A new domain.core.min.js will be created in dist/ directory. To bundle the domain control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for Domain"},{"location":"Tutorials/uitoolkitDocs/Domains/#add-to-sample-html-page","text":"To display the Domain control on a sample web page, update following changes to the existing src/sample/sampleDomain.htm page. <body> <div id=\"domainroot\"></div> <script src=\"../../dist/domain.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/Domains/#test-the-sample-page","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleDomains.htm?server=<rps IPaddress>:<rps port>","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/Domains/#add-a-new-language-for-internationalization","text":"Please refer to Localization docs ## Run RPS server in DEV mode To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Add a new Language for Internationalization"},{"location":"Tutorials/uitoolkitDocs/Profiles/","text":"Quickstart - To Bundle Profiles Control \u00b6 This document shows how to bundle profiles control and display it on a sample html page for testing. how to customize the control how to create a bundle for profiles control how to add to sample html how to add a new language for Internalization Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome Download and Install UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize the control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to the following url http://localhost:8080/profile.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port Create Bundle for Profile \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing profile.core.min.js in dist/ npm run build A new profile.core.min.js will be created in dist/ directory. To bundle the profile control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the profile control on a sample web page, update following changes to the existing src/sample/sampleProfile.htm page. <body> <div id=\"profileroot\"></div> <script src=\"../../dist/profile.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleProfile.htm?server=<rps IPaddress>:<rps port> Add a new Language for Internationalization \u00b6 Please refer to Localization docs Run RPS server in DEV mode \u00b6 To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Quickstart - To Bundle Profiles Control"},{"location":"Tutorials/uitoolkitDocs/Profiles/#quickstart-to-bundle-profiles-control","text":"This document shows how to bundle profiles control and display it on a sample html page for testing. how to customize the control how to create a bundle for profiles control how to add to sample html how to add a new language for Internalization","title":"Quickstart - To Bundle Profiles Control"},{"location":"Tutorials/uitoolkitDocs/Profiles/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - RPS stands for R emote P rovisioning S erver - Intel AMT device is configured and connected to RPS. See the RPS for documentation. - Chrome","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/Profiles/#download-and-install-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/Profiles/#customize-the-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to the following url http://localhost:8080/profile.htm?server=<protocol>://<rps IPaddress>:<rps port> Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port","title":"Customize the control"},{"location":"Tutorials/uitoolkitDocs/Profiles/#create-bundle-for-profile","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. Note: Remove or rename the existing profile.core.min.js in dist/ npm run build A new profile.core.min.js will be created in dist/ directory. To bundle the profile control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for Profile"},{"location":"Tutorials/uitoolkitDocs/Profiles/#add-to-sample-html-page","text":"To display the profile control on a sample web page, update following changes to the existing src/sample/sampleProfile.htm page. <body> <div id=\"profileroot\"></div> <script src=\"../../dist/profile.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/Profiles/#test-the-sample-page","text":"At a command prompt navigate to the root of ui-toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleProfile.htm?server=<rps IPaddress>:<rps port>","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/Profiles/#add-a-new-language-for-internationalization","text":"Please refer to Localization docs","title":"Add a new Language for Internationalization"},{"location":"Tutorials/uitoolkitDocs/Profiles/#run-rps-server-in-dev-mode","text":"To display UI controls on local react Web UI for testing , make the following changes. Go to your local rps application where it is running. Press ctrl+c to exit the application. Edit the file rps/package.json Replace the dev command under scripts with below code \"dev\": \"set RPS_NODE_ENV=dev&& set RPS_USE_VAULT=false&& set RPS_USE_DB_PROFILES=false&& set RPS_LOG_LEVEL=silly&& set RPS_HTTPS=false&& npm start\" Edit the file rps/.rpsrc Update the xapikey value with below snippet \"xapikey\": \"APIKEYFORRPS123!\" Save the changes. At the command prompt, run the below command from the root of rps application npm run dev","title":"Run RPS server in DEV mode"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/","text":"Quickstart - To run sol in development enviroment and bundle SerialOverLan control. \u00b6 This document shows how to run serialoverlan in devlopment enviroment and bundle serialoverlan control and display it on sample html page. how to run sol control in development enviroment how to create a bundle for sol control. how to add to sample html file. Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver. Build adnd Deploy MPS locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser Download and Install UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit.git cd ui-toolkit npm install Run sol in development enviroment \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. npm start open chrome browser, navigate to following url http://localhost:8080/sol.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> Create Bundle for SOL \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing sol.core.min.js in dist/ npm run build A new sol.core.min.js will be created in dist/ directory. To bundle the Serial Over LAN control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the SOL control on a sample web page, update following changes to the existing src/sample/sampleSOL.htm page. <body> <div id=\"sol\"></div> <script src=\"../../dist/sol.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleKVM.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Quickstart  - To run sol in development enviroment and bundle SerialOverLan control."},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#quickstart-to-run-sol-in-development-enviroment-and-bundle-serialoverlan-control","text":"This document shows how to run serialoverlan in devlopment enviroment and bundle serialoverlan control and display it on sample html page. how to run sol control in development enviroment how to create a bundle for sol control. how to add to sample html file.","title":"Quickstart  - To run sol in development enviroment and bundle SerialOverLan control."},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver. Build adnd Deploy MPS locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#download-and-install-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit.git cd ui-toolkit npm install","title":"Download and Install UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#run-sol-in-development-enviroment","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. npm start open chrome browser, navigate to following url http://localhost:8080/sol.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port>","title":"Run sol in development enviroment"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#create-bundle-for-sol","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing sol.core.min.js in dist/ npm run build A new sol.core.min.js will be created in dist/ directory. To bundle the Serial Over LAN control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run build-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for SOL"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#add-to-sample-html-page","text":"To display the SOL control on a sample web page, update following changes to the existing src/sample/sampleSOL.htm page. <body> <div id=\"sol\"></div> <script src=\"../../dist/sol.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/SerialOverLAN/#test-the-sample-page","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleKVM.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/","text":"As stated in the documentation getting started is quite easy, as you only need to understand its core concepts \u2014 Entry, Output, Loaders, and plugins. Entry: \u00b6 The entry point such as /src/index.js which is the default for Webpack 4 is what Webpack will use to start building out/resolving its dependencies. Output: \u00b6 Output: The output property such as ./dist (default for Webpack 4) tells Webpack where to output the bundles it creates and how to name them. Loaders: \u00b6 Since Webpack only understands native Javascript code, these loaders enable it to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have 2 properties in the configuration file The test property which identifies which file or files should be transformed The use property which indicates which loader can be used to do the transforming Plugins: \u00b6 This allows you to extend Webpack capabilities to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables. You can check out some of the plugins provided by Webpack here. Installing Webpack: \u00b6 install webpack and webpack cli as dev dependencies. npm i webpack webpack-cli -D webpack-dev-server. Configuring Webpack for development enviroment : \u00b6 Create a Webpack config file webpack.config.dev.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"development\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple } Adding Typescript: \u00b6 Install Typescript\u2019s dependencies. npm i awesome-typescript-loader -D Add Typescript configuration to Webpack: \u00b6 const path = require('path'); module.exports = { .... resolve: { extensions: [\".tsx\", \".ts\", \".js\"] }, module: { rules: [ { test: /\\.tsx?$/, loader: 'awesome-typescript-loader' } ] } } Here we are telling Webpack to: Resolve file extensions with .tsx, .ts and .js All files with the extension .tsx or .ts should be processed by awesome-typescript-loader Add Styles : \u00b6 Install Styles dependencies. npm i style-loader css-loader sass-loader -D update the webpack config file: module.exports = { .... module: { rules: [ ... { test: /\\.(sc|sa|c)ss$/, use: ['style-loader', 'css-loader', 'sass-loader'], } ] } } Adding HTML: \u00b6 we need to use a Webpack plugin html-webpack-plugin which helps simplifies the creation of HTML files to help serve our Webpack bundles. npm i html-webpack-plugin -D. Update the Webpack config file: const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { .... plugins: [ new HtmlWebpackPlugin({ filename: 'device.htm', template: './src/sample/sampleDG.htm', inject: true, chunks: [\"device\"] }), ] } Adding API keys as Environmental variables: \u00b6 Environmental variables can be setup using the DefinePlugin option in webpack. const path = require('path'); const webpack = require('webpack'); module.exports = { ... plugins: [ new webpack.DefinePlugin({ 'process.env': { 'API_KEY_RPS': JSON.stringify('<Provide RPS api key>'), 'API_KEY_MPS': JSON.stringify('<Provide MPS api key>') } }) ] } These environmental variables can be used inside the code as below, const data = { rpsKey: process.env.API_KEY_RPS, mpsKey: process.env.API_KEY_MPS } Development Server: \u00b6 we are going to set up a development server using the webpack-dev-server which will open up a default browser when we do npm start and also provide us with live reloading on the fly. npm i webpack-dev-server --D update Package.json \u00b6 \"scripts\": { \"start\": \"webpack-dev-server --config webpack.config.dev.js\" } Sample usage : 1)open command prompt 2)Run npm start command Configuring Webpack for production enviroment : \u00b6 Create a Webpack config file webpack.config.prod.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"production\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple output: { filename: \"[name].core.min.js\", path: path.resolve(__dirname, \"./dist\") }, .... } update Package.json \u00b6 \"scripts\": { \"build\": \"webpack --config webpack.config.prod.js\", } Sample usage: 1)open command prompt 2)Run npm run build command Configuring Webpack for external enviroment : \u00b6 Create a Webpack config file webpack.config.externals.js in the root of our project folder. Add webpack-node-externals : \u00b6 Install webpack-node-externals dependencies. npm install webpack-node-externals -D webpack-node-externals library creates an externals function that ignores node_modules when bundling in Webpack. const path = require(\"path\"); //No ES6 in webpack config const nodeExternals = require('webpack-node-externals'); module.exports = { .... externals: [nodeExternals()], }; update Package.json \u00b6 \"scripts\": { \"build-ext\": \"webpack --config webpack.config.externals.js\", } Sample usage: 1)open command prompt 2)Run npm run build-ext command","title":"Webpack Configuration"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#entry","text":"The entry point such as /src/index.js which is the default for Webpack 4 is what Webpack will use to start building out/resolving its dependencies.","title":"Entry:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#output","text":"Output: The output property such as ./dist (default for Webpack 4) tells Webpack where to output the bundles it creates and how to name them.","title":"Output:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#loaders","text":"Since Webpack only understands native Javascript code, these loaders enable it to process different types of imported files and convert them into valid modules when it encounters a specific type of file. Loaders have 2 properties in the configuration file The test property which identifies which file or files should be transformed The use property which indicates which loader can be used to do the transforming","title":"Loaders:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#plugins","text":"This allows you to extend Webpack capabilities to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables. You can check out some of the plugins provided by Webpack here.","title":"Plugins:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#installing-webpack","text":"install webpack and webpack cli as dev dependencies. npm i webpack webpack-cli -D webpack-dev-server.","title":"Installing Webpack:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#configuring-webpack-for-development-enviroment","text":"Create a Webpack config file webpack.config.dev.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"development\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple }","title":"Configuring Webpack for development enviroment :"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#adding-typescript","text":"Install Typescript\u2019s dependencies. npm i awesome-typescript-loader -D","title":"Adding Typescript:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#add-typescript-configuration-to-webpack","text":"const path = require('path'); module.exports = { .... resolve: { extensions: [\".tsx\", \".ts\", \".js\"] }, module: { rules: [ { test: /\\.tsx?$/, loader: 'awesome-typescript-loader' } ] } } Here we are telling Webpack to: Resolve file extensions with .tsx, .ts and .js All files with the extension .tsx or .ts should be processed by awesome-typescript-loader","title":"Add Typescript configuration to Webpack:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#add-styles","text":"Install Styles dependencies. npm i style-loader css-loader sass-loader -D update the webpack config file: module.exports = { .... module: { rules: [ ... { test: /\\.(sc|sa|c)ss$/, use: ['style-loader', 'css-loader', 'sass-loader'], } ] } }","title":"Add Styles :"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#adding-html","text":"we need to use a Webpack plugin html-webpack-plugin which helps simplifies the creation of HTML files to help serve our Webpack bundles. npm i html-webpack-plugin -D. Update the Webpack config file: const path = require('path'); const HtmlWebpackPlugin = require('html-webpack-plugin'); module.exports = { .... plugins: [ new HtmlWebpackPlugin({ filename: 'device.htm', template: './src/sample/sampleDG.htm', inject: true, chunks: [\"device\"] }), ] }","title":"Adding HTML:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#adding-api-keys-as-environmental-variables","text":"Environmental variables can be setup using the DefinePlugin option in webpack. const path = require('path'); const webpack = require('webpack'); module.exports = { ... plugins: [ new webpack.DefinePlugin({ 'process.env': { 'API_KEY_RPS': JSON.stringify('<Provide RPS api key>'), 'API_KEY_MPS': JSON.stringify('<Provide MPS api key>') } }) ] } These environmental variables can be used inside the code as below, const data = { rpsKey: process.env.API_KEY_RPS, mpsKey: process.env.API_KEY_MPS }","title":"Adding API keys as Environmental variables:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#development-server","text":"we are going to set up a development server using the webpack-dev-server which will open up a default browser when we do npm start and also provide us with live reloading on the fly. npm i webpack-dev-server --D","title":"Development Server:"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#update-packagejson","text":"\"scripts\": { \"start\": \"webpack-dev-server --config webpack.config.dev.js\" } Sample usage : 1)open command prompt 2)Run npm start command","title":"update Package.json"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#configuring-webpack-for-production-enviroment","text":"Create a Webpack config file webpack.config.prod.js in the root of our project folder. const path = require('path'); module.exports = { mode: \"production\", entry: './src/reactjs/components/DeviceGrid/index.tsx', // entry points can be multiple output: { filename: \"[name].core.min.js\", path: path.resolve(__dirname, \"./dist\") }, .... }","title":"Configuring Webpack for production enviroment :"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#update-packagejson_1","text":"\"scripts\": { \"build\": \"webpack --config webpack.config.prod.js\", } Sample usage: 1)open command prompt 2)Run npm run build command","title":"update Package.json"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#configuring-webpack-for-external-enviroment","text":"Create a Webpack config file webpack.config.externals.js in the root of our project folder.","title":"Configuring Webpack for external enviroment :"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#add-webpack-node-externals","text":"Install webpack-node-externals dependencies. npm install webpack-node-externals -D webpack-node-externals library creates an externals function that ignores node_modules when bundling in Webpack. const path = require(\"path\"); //No ES6 in webpack config const nodeExternals = require('webpack-node-externals'); module.exports = { .... externals: [nodeExternals()], };","title":"Add webpack-node-externals :"},{"location":"Tutorials/uitoolkitDocs/Webpack-Configuration/#update-packagejson_2","text":"\"scripts\": { \"build-ext\": \"webpack --config webpack.config.externals.js\", } Sample usage: 1)open command prompt 2)Run npm run build-ext command","title":"update Package.json"},{"location":"Tutorials/uitoolkitDocs/auditLog/","text":"Quickstart - To Bundle AuditLog control \u00b6 This document shows how to bundle only Audit Log control and display it on a sample html page for testing. How to customize the control How to create a bundle for only auditlog control How to add to sample html file How to add a new language for Internalization Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser Download and Install MPS UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize the control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to http://localhost:8080/auditLog.htm?deviceId= &server= Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port Create Bundle for AuditLog \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing auditlog.core.min.js in dist/ npm run build A new auditlog.core.min.js will be created in dist/ directory. To bundle the audit log control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the auditlog control on a sample web page, update following changes to the existing src/sample/sampleAuditLog.htm page. <body> <div id=\"auditlog\"></div> <script src=\"../../dist/auditlog.core.min.js\"></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleAuditLog.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected. Add a new Language for Internationalization \u00b6 Please refer to Localization docs","title":"Quickstart - To Bundle AuditLog control"},{"location":"Tutorials/uitoolkitDocs/auditLog/#quickstart-to-bundle-auditlog-control","text":"This document shows how to bundle only Audit Log control and display it on a sample html page for testing. How to customize the control How to create a bundle for only auditlog control How to add to sample html file How to add a new language for Internalization","title":"Quickstart - To Bundle AuditLog control"},{"location":"Tutorials/uitoolkitDocs/auditLog/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/auditLog/#download-and-install-mps-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install MPS UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/auditLog/#customize-the-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to http://localhost:8080/auditLog.htm?deviceId= &server= Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port","title":"Customize the control"},{"location":"Tutorials/uitoolkitDocs/auditLog/#create-bundle-for-auditlog","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing auditlog.core.min.js in dist/ npm run build A new auditlog.core.min.js will be created in dist/ directory. To bundle the audit log control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for AuditLog"},{"location":"Tutorials/uitoolkitDocs/auditLog/#add-to-sample-html-page","text":"To display the auditlog control on a sample web page, update following changes to the existing src/sample/sampleAuditLog.htm page. <body> <div id=\"auditlog\"></div> <script src=\"../../dist/auditlog.core.min.js\"></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/auditLog/#test-the-sample-page","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleAuditLog.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/auditLog/#add-a-new-language-for-internationalization","text":"Please refer to Localization docs","title":"Add a new Language for Internationalization"},{"location":"Tutorials/uitoolkitDocs/kvm/","text":"Quickstart - To Bundle KVM control \u00b6 This document shows how to bundle only KVM control and display it on a sample html page for testing. How to customize the control How to create a bundle for only KVM control How to add to sample html file Prerequisites \u00b6 In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser Download and Install MPS UI Toolkit \u00b6 At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install Customize the control \u00b6 To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to http://localhost:8080/kvm.htm?deviceId= &server= Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port Create Bundle for KVM \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing kvm.core.min.js in dist/ npm run build A new kvm.core.min.js will be created in dist/ directory. To bundle the KVM control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control Add to sample html page \u00b6 To display the KVM control on a sample web page, update following changes to the existing src/sample/sampleKVM.htm page. <body> <div id=\"kvm\"></div> <script src=\"../../dist/kvm.core.min.js\" crossorigin></script> </body> Test the sample page \u00b6 At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleKVM.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Quickstart - To Bundle KVM control"},{"location":"Tutorials/uitoolkitDocs/kvm/#quickstart-to-bundle-kvm-control","text":"This document shows how to bundle only KVM control and display it on a sample html page for testing. How to customize the control How to create a bundle for only KVM control How to add to sample html file","title":"Quickstart - To Bundle KVM control"},{"location":"Tutorials/uitoolkitDocs/kvm/#prerequisites","text":"In order to deploy and make changes, the following tools and application has to be installed on your development machine - Git - Visual Studio Code or any other IDE - Node.js - MPS stands for M anagement P resence S erver - Build and deploy MPS MicroService locally. - Intel AMT device is configured and connected to MPS. See the MPS for documentation. - Chrome Browser","title":"Prerequisites"},{"location":"Tutorials/uitoolkitDocs/kvm/#download-and-install-mps-ui-toolkit","text":"At a command prompt, run the following commands: git clone https://github.com/open-amt-cloud-toolkit/ui-toolkit cd ui-toolkit npm install","title":"Download and Install MPS UI Toolkit"},{"location":"Tutorials/uitoolkitDocs/kvm/#customize-the-control","text":"To add new changes and test the changes instantly before bundling the control, webpack dev server can be used After making the changes, open a command prompt and navigate to the root of ui-toolkit, run the below command. npm start Open the browser and navigate to http://localhost:8080/kvm.htm?deviceId= &server= Note: By default webpack dev server runs on port 8080. If port 8080 is already in use, webpack automatically runs on the next immediate available port","title":"Customize the control"},{"location":"Tutorials/uitoolkitDocs/kvm/#create-bundle-for-kvm","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. Note: Remove or rename the existing kvm.core.min.js in dist/ npm run build A new kvm.core.min.js will be created in dist/ directory. To bundle the KVM control without node_modules, run the below command in a command prompt on the root of ui-toolkit, npm run built-ext Note : The bundle generated using build-ext command can be used in react apps as an independent control","title":"Create Bundle for KVM"},{"location":"Tutorials/uitoolkitDocs/kvm/#add-to-sample-html-page","text":"To display the KVM control on a sample web page, update following changes to the existing src/sample/sampleKVM.htm page. <body> <div id=\"kvm\"></div> <script src=\"../../dist/kvm.core.min.js\" crossorigin></script> </body>","title":"Add to sample html page"},{"location":"Tutorials/uitoolkitDocs/kvm/#test-the-sample-page","text":"At a command prompt navigate to the root of UI_Toolkit, run the below command. npx serve Open Chrome browser, navigate to the following url http://<localhost>:5000/src/sample/sampleKVM.htm?deviceId=<device GUID>&server=<mps IPaddress>:<mps port> You will see the errors in the following scenario's: - compilation errors if ui-toolkit has not downloaded and installed to your react app. - MPS server not running - MPS server running and device not connected.","title":"Test the sample page"},{"location":"Tutorials/uitoolkitDocs/localization/","text":"Localize the strings \u00b6 Create a directory under public/locales with the directory name as per the language Add the translation.json to public/locales/en/translation.json file under the new language directory. Customize the required field in the translation.json file. Example : To support for Kannada language, - Add the directory kn to public/locales . - Copy the translation.json file from public/locales/en to public/locales/kn - Update the public/locales/kn/translation.json file as per kanada langauage Modify the /i18n.ts file to import the newly added public/locales/Language/translation.json file and update the 'const resources' to include the new file. Example : To support for Kannada language modified /i18n.ts as below. import translationKN from './public/locales/kn/translation.json'; const resources = { en: { translations: translationEN }, kn: { translations: translationKN } }; Note: Rebuild and generate a new bundle before testing the changes. Language can be changed in the browser under langauage section of the browser settings. English is the default if no customized translation file provided for the langauage. Get the localised strings for the web consoles with localization enabled. \u00b6 if users web console is already enabled with localization please make sure to add the translations located in public/locales/en/translation.json of UI-controls into your web consoles translations file.","title":"Localization"},{"location":"Tutorials/uitoolkitDocs/localization/#localize-the-strings","text":"Create a directory under public/locales with the directory name as per the language Add the translation.json to public/locales/en/translation.json file under the new language directory. Customize the required field in the translation.json file. Example : To support for Kannada language, - Add the directory kn to public/locales . - Copy the translation.json file from public/locales/en to public/locales/kn - Update the public/locales/kn/translation.json file as per kanada langauage Modify the /i18n.ts file to import the newly added public/locales/Language/translation.json file and update the 'const resources' to include the new file. Example : To support for Kannada language modified /i18n.ts as below. import translationKN from './public/locales/kn/translation.json'; const resources = { en: { translations: translationEN }, kn: { translations: translationKN } }; Note: Rebuild and generate a new bundle before testing the changes. Language can be changed in the browser under langauage section of the browser settings. English is the default if no customized translation file provided for the langauage.","title":"Localize the strings"},{"location":"Tutorials/uitoolkitDocs/localization/#get-the-localised-strings-for-the-web-consoles-with-localization-enabled","text":"if users web console is already enabled with localization please make sure to add the translations located in public/locales/en/translation.json of UI-controls into your web consoles translations file.","title":"Get the localised strings for the web consoles with localization enabled."}]}